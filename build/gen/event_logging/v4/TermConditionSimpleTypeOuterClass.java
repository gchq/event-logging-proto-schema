// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/term_condition_simple_type.proto
// Protobuf Java Version: 4.26.1

package event_logging.v4;

public final class TermConditionSimpleTypeOuterClass {
  private TermConditionSimpleTypeOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      TermConditionSimpleTypeOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * The types of term used in query predicates.
   * </pre>
   *
   * Protobuf enum {@code event_logging.v4.TermConditionSimpleType}
   */
  public enum TermConditionSimpleType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Default
     * </pre>
     *
     * <code>TERM_CONDITION_SIMPLE_TYPE_UNSPECIFIED = 0;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_UNSPECIFIED(0),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_EXISTS = 1;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_EXISTS(1),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_NOT_EXISTS = 2;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_NOT_EXISTS(2),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_CONTAINS = 3;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_CONTAINS(3),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_NOT_CONTAINS = 4;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_NOT_CONTAINS(4),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_EMPTY = 5;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_EMPTY(5),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_NOT_EMPTY = 6;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_NOT_EMPTY(6),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_EQUALS = 7;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_EQUALS(7),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_NOT_EQUALS = 8;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_NOT_EQUALS(8),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_GREATER_THAN = 9;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_GREATER_THAN(9),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_GREATER_THAN_EQUAL_TO = 10;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_GREATER_THAN_EQUAL_TO(10),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_LESS_THAN = 11;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_LESS_THAN(11),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_LESS_THAN_EQUAL_TO = 12;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_LESS_THAN_EQUAL_TO(12),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_STARTS_WITH = 13;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_STARTS_WITH(13),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_NOT_STARTS_WITH = 14;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_NOT_STARTS_WITH(14),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_REGEX = 15;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_REGEX(15),
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_NOT_REGEX = 16;</code>
     */
    TERM_CONDITION_SIMPLE_TYPE_NOT_REGEX(16),
    UNRECOGNIZED(-1),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        TermConditionSimpleType.class.getName());
    }
    /**
     * <pre>
     * Default
     * </pre>
     *
     * <code>TERM_CONDITION_SIMPLE_TYPE_UNSPECIFIED = 0;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_UNSPECIFIED_VALUE = 0;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_EXISTS = 1;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_EXISTS_VALUE = 1;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_NOT_EXISTS = 2;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_NOT_EXISTS_VALUE = 2;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_CONTAINS = 3;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_CONTAINS_VALUE = 3;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_NOT_CONTAINS = 4;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_NOT_CONTAINS_VALUE = 4;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_EMPTY = 5;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_EMPTY_VALUE = 5;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_NOT_EMPTY = 6;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_NOT_EMPTY_VALUE = 6;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_EQUALS = 7;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_EQUALS_VALUE = 7;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_NOT_EQUALS = 8;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_NOT_EQUALS_VALUE = 8;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_GREATER_THAN = 9;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_GREATER_THAN_VALUE = 9;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_GREATER_THAN_EQUAL_TO = 10;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_GREATER_THAN_EQUAL_TO_VALUE = 10;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_LESS_THAN = 11;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_LESS_THAN_VALUE = 11;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_LESS_THAN_EQUAL_TO = 12;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_LESS_THAN_EQUAL_TO_VALUE = 12;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_STARTS_WITH = 13;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_STARTS_WITH_VALUE = 13;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_NOT_STARTS_WITH = 14;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_NOT_STARTS_WITH_VALUE = 14;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_REGEX = 15;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_REGEX_VALUE = 15;
    /**
     * <code>TERM_CONDITION_SIMPLE_TYPE_NOT_REGEX = 16;</code>
     */
    public static final int TERM_CONDITION_SIMPLE_TYPE_NOT_REGEX_VALUE = 16;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static TermConditionSimpleType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static TermConditionSimpleType forNumber(int value) {
      switch (value) {
        case 0: return TERM_CONDITION_SIMPLE_TYPE_UNSPECIFIED;
        case 1: return TERM_CONDITION_SIMPLE_TYPE_EXISTS;
        case 2: return TERM_CONDITION_SIMPLE_TYPE_NOT_EXISTS;
        case 3: return TERM_CONDITION_SIMPLE_TYPE_CONTAINS;
        case 4: return TERM_CONDITION_SIMPLE_TYPE_NOT_CONTAINS;
        case 5: return TERM_CONDITION_SIMPLE_TYPE_EMPTY;
        case 6: return TERM_CONDITION_SIMPLE_TYPE_NOT_EMPTY;
        case 7: return TERM_CONDITION_SIMPLE_TYPE_EQUALS;
        case 8: return TERM_CONDITION_SIMPLE_TYPE_NOT_EQUALS;
        case 9: return TERM_CONDITION_SIMPLE_TYPE_GREATER_THAN;
        case 10: return TERM_CONDITION_SIMPLE_TYPE_GREATER_THAN_EQUAL_TO;
        case 11: return TERM_CONDITION_SIMPLE_TYPE_LESS_THAN;
        case 12: return TERM_CONDITION_SIMPLE_TYPE_LESS_THAN_EQUAL_TO;
        case 13: return TERM_CONDITION_SIMPLE_TYPE_STARTS_WITH;
        case 14: return TERM_CONDITION_SIMPLE_TYPE_NOT_STARTS_WITH;
        case 15: return TERM_CONDITION_SIMPLE_TYPE_REGEX;
        case 16: return TERM_CONDITION_SIMPLE_TYPE_NOT_REGEX;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<TermConditionSimpleType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        TermConditionSimpleType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<TermConditionSimpleType>() {
            public TermConditionSimpleType findValueByNumber(int number) {
              return TermConditionSimpleType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return event_logging.v4.TermConditionSimpleTypeOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final TermConditionSimpleType[] VALUES = values();

    public static TermConditionSimpleType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private TermConditionSimpleType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:event_logging.v4.TermConditionSimpleType)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n1event_logging/v4/term_condition_simple" +
      "_type.proto\022\020event_logging.v4\032\033buf/valid" +
      "ate/validate.proto*\373\005\n\027TermConditionSimp" +
      "leType\022*\n&TERM_CONDITION_SIMPLE_TYPE_UNS" +
      "PECIFIED\020\000\022%\n!TERM_CONDITION_SIMPLE_TYPE" +
      "_EXISTS\020\001\022)\n%TERM_CONDITION_SIMPLE_TYPE_" +
      "NOT_EXISTS\020\002\022\'\n#TERM_CONDITION_SIMPLE_TY" +
      "PE_CONTAINS\020\003\022+\n\'TERM_CONDITION_SIMPLE_T" +
      "YPE_NOT_CONTAINS\020\004\022$\n TERM_CONDITION_SIM" +
      "PLE_TYPE_EMPTY\020\005\022(\n$TERM_CONDITION_SIMPL" +
      "E_TYPE_NOT_EMPTY\020\006\022%\n!TERM_CONDITION_SIM" +
      "PLE_TYPE_EQUALS\020\007\022)\n%TERM_CONDITION_SIMP" +
      "LE_TYPE_NOT_EQUALS\020\010\022+\n\'TERM_CONDITION_S" +
      "IMPLE_TYPE_GREATER_THAN\020\t\0224\n0TERM_CONDIT" +
      "ION_SIMPLE_TYPE_GREATER_THAN_EQUAL_TO\020\n\022" +
      "(\n$TERM_CONDITION_SIMPLE_TYPE_LESS_THAN\020" +
      "\013\0221\n-TERM_CONDITION_SIMPLE_TYPE_LESS_THA" +
      "N_EQUAL_TO\020\014\022*\n&TERM_CONDITION_SIMPLE_TY" +
      "PE_STARTS_WITH\020\r\022.\n*TERM_CONDITION_SIMPL" +
      "E_TYPE_NOT_STARTS_WITH\020\016\022$\n TERM_CONDITI" +
      "ON_SIMPLE_TYPE_REGEX\020\017\022(\n$TERM_CONDITION" +
      "_SIMPLE_TYPE_NOT_REGEX\020\020b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          build.buf.validate.ValidateProto.getDescriptor(),
        });
    descriptor.resolveAllFeaturesImmutable();
    build.buf.validate.ValidateProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
