// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/event_source_complex_type.proto
// Protobuf Java Version: 4.26.1

package event_logging.v4;

public final class EventSourceComplexTypeOuterClass {
  private EventSourceComplexTypeOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      EventSourceComplexTypeOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface EventSourceComplexTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:event_logging.v4.EventSourceComplexType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
     * </pre>
     *
     * <code>string event_id = 1;</code>
     * @return The eventId.
     */
    java.lang.String getEventId();
    /**
     * <pre>
     * A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
     * </pre>
     *
     * <code>string event_id = 1;</code>
     * @return The bytes for eventId.
     */
    com.google.protobuf.ByteString
        getEventIdBytes();

    /**
     * <pre>
     * Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
     * </pre>
     *
     * <code>string session_id = 2;</code>
     * @return The sessionId.
     */
    java.lang.String getSessionId();
    /**
     * <pre>
     * Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
     * </pre>
     *
     * <code>string session_id = 2;</code>
     * @return The bytes for sessionId.
     */
    com.google.protobuf.ByteString
        getSessionIdBytes();

    /**
     * <pre>
     * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
     * </pre>
     *
     * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
     * @return Whether the system field is set.
     */
    boolean hasSystem();
    /**
     * <pre>
     * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
     * </pre>
     *
     * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
     * @return The system.
     */
    event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType getSystem();
    /**
     * <pre>
     * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
     * </pre>
     *
     * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
     */
    event_logging.v4.SystemComplexTypeOuterClass.SystemComplexTypeOrBuilder getSystemOrBuilder();

    /**
     * <pre>
     * The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
     * </pre>
     *
     * <code>string generator = 4 [(.buf.validate.field) = { ... }</code>
     * @return The generator.
     */
    java.lang.String getGenerator();
    /**
     * <pre>
     * The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
     * </pre>
     *
     * <code>string generator = 4 [(.buf.validate.field) = { ... }</code>
     * @return The bytes for generator.
     */
    com.google.protobuf.ByteString
        getGeneratorBytes();

    /**
     * <pre>
     * A description of the device that the event generator is hosted upon.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
     * @return Whether the device field is set.
     */
    boolean hasDevice();
    /**
     * <pre>
     * A description of the device that the event generator is hosted upon.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
     * @return The device.
     */
    event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType getDevice();
    /**
     * <pre>
     * A description of the device that the event generator is hosted upon.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
     */
    event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder getDeviceOrBuilder();

    /**
     * <pre>
     * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
     * @return Whether the client field is set.
     */
    boolean hasClient();
    /**
     * <pre>
     * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
     * @return The client.
     */
    event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType getClient();
    /**
     * <pre>
     * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
     */
    event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder getClientOrBuilder();

    /**
     * <pre>
     * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
     * @return Whether the server field is set.
     */
    boolean hasServer();
    /**
     * <pre>
     * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
     * @return The server.
     */
    event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType getServer();
    /**
     * <pre>
     * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
     */
    event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder getServerOrBuilder();

    /**
     * <pre>
     * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
     * </pre>
     *
     * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
     * @return Whether the door field is set.
     */
    boolean hasDoor();
    /**
     * <pre>
     * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
     * </pre>
     *
     * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
     * @return The door.
     */
    event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType getDoor();
    /**
     * <pre>
     * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
     * </pre>
     *
     * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
     */
    event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorTypeOrBuilder getDoorOrBuilder();

    /**
     * <pre>
     * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 9;</code>
     * @return Whether the user field is set.
     */
    boolean hasUser();
    /**
     * <pre>
     * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 9;</code>
     * @return The user.
     */
    event_logging.v4.UserComplexTypeOuterClass.UserComplexType getUser();
    /**
     * <pre>
     * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 9;</code>
     */
    event_logging.v4.UserComplexTypeOuterClass.UserComplexTypeOrBuilder getUserOrBuilder();

    /**
     * <pre>
     * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
     * @return Whether the runAs field is set.
     */
    boolean hasRunAs();
    /**
     * <pre>
     * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
     * @return The runAs.
     */
    event_logging.v4.UserComplexTypeOuterClass.UserComplexType getRunAs();
    /**
     * <pre>
     * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
     */
    event_logging.v4.UserComplexTypeOuterClass.UserComplexTypeOrBuilder getRunAsOrBuilder();

    /**
     * <pre>
     * Indicates whether the event was produced as a result of direct interaction, i.e. user was directly responsible for the event being created and was present at the time it was created. This element will be false where an event may have been created after the user was present, e.g. where scheduled processing is performed or an action has been queued for execution later, as is the case when some form of asynchronous processing is used. All interactive events must provide the Id for the user. Can be omitted if true as this is the default.
     * </pre>
     *
     * <code>bool interactive = 11;</code>
     * @return The interactive.
     */
    boolean getInteractive();

    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
     */
    java.util.List<event_logging.v4.DataComplexTypeOuterClass.DataComplexType> 
        getDataList();
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
     */
    event_logging.v4.DataComplexTypeOuterClass.DataComplexType getData(int index);
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
     */
    int getDataCount();
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
     */
    java.util.List<? extends event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder> 
        getDataOrBuilderList();
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
     */
    event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder getDataOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Details where the event came from, i.e. what generator created the event and on what device.
   * </pre>
   *
   * Protobuf type {@code event_logging.v4.EventSourceComplexType}
   */
  public static final class EventSourceComplexType extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:event_logging.v4.EventSourceComplexType)
      EventSourceComplexTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        EventSourceComplexType.class.getName());
    }
    // Use EventSourceComplexType.newBuilder() to construct.
    private EventSourceComplexType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private EventSourceComplexType() {
      eventId_ = "";
      sessionId_ = "";
      generator_ = "";
      data_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.class, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.Builder.class);
    }

    public interface DoorTypeOrBuilder extends
        // @@protoc_insertion_point(interface_extends:event_logging.v4.EventSourceComplexType.DoorType)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The site-wide name/identifier for the door.
       * </pre>
       *
       * <code>string name = 1 [(.buf.validate.field) = { ... }</code>
       * @return The name.
       */
      java.lang.String getName();
      /**
       * <pre>
       * The site-wide name/identifier for the door.
       * </pre>
       *
       * <code>string name = 1 [(.buf.validate.field) = { ... }</code>
       * @return The bytes for name.
       */
      com.google.protobuf.ByteString
          getNameBytes();

      /**
       * <pre>
       * A user readable description of the door.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @return The description.
       */
      java.lang.String getDescription();
      /**
       * <pre>
       * A user readable description of the door.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @return The bytes for description.
       */
      com.google.protobuf.ByteString
          getDescriptionBytes();

      /**
       * <pre>
       * Describes the geographic location of the device.
       * </pre>
       *
       * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
       * @return Whether the location field is set.
       */
      boolean hasLocation();
      /**
       * <pre>
       * Describes the geographic location of the device.
       * </pre>
       *
       * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
       * @return The location.
       */
      event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType getLocation();
      /**
       * <pre>
       * Describes the geographic location of the device.
       * </pre>
       *
       * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
       */
      event_logging.v4.LocationComplexTypeOuterClass.LocationComplexTypeOrBuilder getLocationOrBuilder();

      /**
       * <pre>
       * It is assumed that doors only allow for a single authenticated person to enter at a time, e.g. in the case of turnstiles. Where single entry is true this element can be omitted as this is expected by default.
       * </pre>
       *
       * <code>bool single_entry = 4;</code>
       * @return The singleEntry.
       */
      boolean getSingleEntry();

      /**
       * <pre>
       * This element is used to tell us to remove all access zones from the list of currently accessible zones for a user before adding a new one. This is the case whenever a user moves from one zone to another and loses all possible access to the zones they were previously in, i.e. they would need to re-authenticate to regain access rather than just pass back through the door. If not specified this element is considered to be true as most movement through a door removes access to previously accessible zones. Removal of all access zones provides anti pass-back protection.
       * </pre>
       *
       * <code>bool remove_all = 5;</code>
       * @return The removeAll.
       */
      boolean getRemoveAll();

      /**
       * <pre>
       * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
       * @return Whether the addAccess field is set.
       */
      boolean hasAddAccess();
      /**
       * <pre>
       * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
       * @return The addAccess.
       */
      event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType getAddAccess();
      /**
       * <pre>
       * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
       */
      event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessTypeOrBuilder getAddAccessOrBuilder();
    }
    /**
     * <pre>
     * Physical access events are generated by doors, barriers, turnstiles, etc. This type provides details of the door and its location and access control properties.
     * </pre>
     *
     * Protobuf type {@code event_logging.v4.EventSourceComplexType.DoorType}
     */
    public static final class DoorType extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:event_logging.v4.EventSourceComplexType.DoorType)
        DoorTypeOrBuilder {
    private static final long serialVersionUID = 0L;
      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 26,
          /* patch= */ 1,
          /* suffix= */ "",
          DoorType.class.getName());
      }
      // Use DoorType.newBuilder() to construct.
      private DoorType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
      }
      private DoorType() {
        name_ = "";
        description_ = "";
      }

      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_DoorType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_DoorType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.class, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.Builder.class);
      }

      public interface AddAccessTypeOrBuilder extends
          // @@protoc_insertion_point(interface_extends:event_logging.v4.EventSourceComplexType.DoorType.AddAccessType)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
         * </pre>
         *
         * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
         * @return A list containing the accessZone.
         */
        java.util.List<java.lang.String>
            getAccessZoneList();
        /**
         * <pre>
         * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
         * </pre>
         *
         * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
         * @return The count of accessZone.
         */
        int getAccessZoneCount();
        /**
         * <pre>
         * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
         * </pre>
         *
         * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
         * @param index The index of the element to return.
         * @return The accessZone at the given index.
         */
        java.lang.String getAccessZone(int index);
        /**
         * <pre>
         * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
         * </pre>
         *
         * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
         * @param index The index of the value to return.
         * @return The bytes of the accessZone at the given index.
         */
        com.google.protobuf.ByteString
            getAccessZoneBytes(int index);
      }
      /**
       * <pre>
       * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
       * </pre>
       *
       * Protobuf type {@code event_logging.v4.EventSourceComplexType.DoorType.AddAccessType}
       */
      public static final class AddAccessType extends
          com.google.protobuf.GeneratedMessage implements
          // @@protoc_insertion_point(message_implements:event_logging.v4.EventSourceComplexType.DoorType.AddAccessType)
          AddAccessTypeOrBuilder {
      private static final long serialVersionUID = 0L;
        static {
          com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
            com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
            /* major= */ 4,
            /* minor= */ 26,
            /* patch= */ 1,
            /* suffix= */ "",
            AddAccessType.class.getName());
        }
        // Use AddAccessType.newBuilder() to construct.
        private AddAccessType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
          super(builder);
        }
        private AddAccessType() {
          accessZone_ =
              com.google.protobuf.LazyStringArrayList.emptyList();
        }

        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_DoorType_AddAccessType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_DoorType_AddAccessType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.class, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.Builder.class);
        }

        public static final int ACCESS_ZONE_FIELD_NUMBER = 1;
        @SuppressWarnings("serial")
        private com.google.protobuf.LazyStringArrayList accessZone_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        /**
         * <pre>
         * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
         * </pre>
         *
         * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
         * @return A list containing the accessZone.
         */
        public com.google.protobuf.ProtocolStringList
            getAccessZoneList() {
          return accessZone_;
        }
        /**
         * <pre>
         * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
         * </pre>
         *
         * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
         * @return The count of accessZone.
         */
        public int getAccessZoneCount() {
          return accessZone_.size();
        }
        /**
         * <pre>
         * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
         * </pre>
         *
         * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
         * @param index The index of the element to return.
         * @return The accessZone at the given index.
         */
        public java.lang.String getAccessZone(int index) {
          return accessZone_.get(index);
        }
        /**
         * <pre>
         * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
         * </pre>
         *
         * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
         * @param index The index of the value to return.
         * @return The bytes of the accessZone at the given index.
         */
        public com.google.protobuf.ByteString
            getAccessZoneBytes(int index) {
          return accessZone_.getByteString(index);
        }

        private byte memoizedIsInitialized = -1;
        @java.lang.Override
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        @java.lang.Override
        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          for (int i = 0; i < accessZone_.size(); i++) {
            com.google.protobuf.GeneratedMessage.writeString(output, 1, accessZone_.getRaw(i));
          }
          getUnknownFields().writeTo(output);
        }

        @java.lang.Override
        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          {
            int dataSize = 0;
            for (int i = 0; i < accessZone_.size(); i++) {
              dataSize += computeStringSizeNoTag(accessZone_.getRaw(i));
            }
            size += dataSize;
            size += 1 * getAccessZoneList().size();
          }
          size += getUnknownFields().getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType)) {
            return super.equals(obj);
          }
          event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType other = (event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType) obj;

          if (!getAccessZoneList()
              .equals(other.getAccessZoneList())) return false;
          if (!getUnknownFields().equals(other.getUnknownFields())) return false;
          return true;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          if (getAccessZoneCount() > 0) {
            hash = (37 * hash) + ACCESS_ZONE_FIELD_NUMBER;
            hash = (53 * hash) + getAccessZoneList().hashCode();
          }
          hash = (29 * hash) + getUnknownFields().hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input);
        }

        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input);
        }
        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessage
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        @java.lang.Override
        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        @java.lang.Override
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * <pre>
         * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
         * </pre>
         *
         * Protobuf type {@code event_logging.v4.EventSourceComplexType.DoorType.AddAccessType}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessage.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:event_logging.v4.EventSourceComplexType.DoorType.AddAccessType)
            event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessTypeOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_DoorType_AddAccessType_descriptor;
          }

          @java.lang.Override
          protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_DoorType_AddAccessType_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.class, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.Builder.class);
          }

          // Construct using event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.newBuilder()
          private Builder() {

          }

          private Builder(
              com.google.protobuf.GeneratedMessage.BuilderParent parent) {
            super(parent);

          }
          @java.lang.Override
          public Builder clear() {
            super.clear();
            bitField0_ = 0;
            accessZone_ =
                com.google.protobuf.LazyStringArrayList.emptyList();
            return this;
          }

          @java.lang.Override
          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_DoorType_AddAccessType_descriptor;
          }

          @java.lang.Override
          public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType getDefaultInstanceForType() {
            return event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.getDefaultInstance();
          }

          @java.lang.Override
          public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType build() {
            event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          @java.lang.Override
          public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType buildPartial() {
            event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType result = new event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType(this);
            if (bitField0_ != 0) { buildPartial0(result); }
            onBuilt();
            return result;
          }

          private void buildPartial0(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType result) {
            int from_bitField0_ = bitField0_;
            if (((from_bitField0_ & 0x00000001) != 0)) {
              accessZone_.makeImmutable();
              result.accessZone_ = accessZone_;
            }
          }

          @java.lang.Override
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType) {
              return mergeFrom((event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType other) {
            if (other == event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.getDefaultInstance()) return this;
            if (!other.accessZone_.isEmpty()) {
              if (accessZone_.isEmpty()) {
                accessZone_ = other.accessZone_;
                bitField0_ |= 0x00000001;
              } else {
                ensureAccessZoneIsMutable();
                accessZone_.addAll(other.accessZone_);
              }
              onChanged();
            }
            this.mergeUnknownFields(other.getUnknownFields());
            onChanged();
            return this;
          }

          @java.lang.Override
          public final boolean isInitialized() {
            return true;
          }

          @java.lang.Override
          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            if (extensionRegistry == null) {
              throw new java.lang.NullPointerException();
            }
            try {
              boolean done = false;
              while (!done) {
                int tag = input.readTag();
                switch (tag) {
                  case 0:
                    done = true;
                    break;
                  case 10: {
                    java.lang.String s = input.readStringRequireUtf8();
                    ensureAccessZoneIsMutable();
                    accessZone_.add(s);
                    break;
                  } // case 10
                  default: {
                    if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                      done = true; // was an endgroup tag
                    }
                    break;
                  } // default:
                } // switch (tag)
              } // while (!done)
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.unwrapIOException();
            } finally {
              onChanged();
            } // finally
            return this;
          }
          private int bitField0_;

          private com.google.protobuf.LazyStringArrayList accessZone_ =
              com.google.protobuf.LazyStringArrayList.emptyList();
          private void ensureAccessZoneIsMutable() {
            if (!accessZone_.isModifiable()) {
              accessZone_ = new com.google.protobuf.LazyStringArrayList(accessZone_);
            }
            bitField0_ |= 0x00000001;
          }
          /**
           * <pre>
           * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
           * </pre>
           *
           * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
           * @return A list containing the accessZone.
           */
          public com.google.protobuf.ProtocolStringList
              getAccessZoneList() {
            accessZone_.makeImmutable();
            return accessZone_;
          }
          /**
           * <pre>
           * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
           * </pre>
           *
           * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
           * @return The count of accessZone.
           */
          public int getAccessZoneCount() {
            return accessZone_.size();
          }
          /**
           * <pre>
           * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
           * </pre>
           *
           * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
           * @param index The index of the element to return.
           * @return The accessZone at the given index.
           */
          public java.lang.String getAccessZone(int index) {
            return accessZone_.get(index);
          }
          /**
           * <pre>
           * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
           * </pre>
           *
           * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
           * @param index The index of the value to return.
           * @return The bytes of the accessZone at the given index.
           */
          public com.google.protobuf.ByteString
              getAccessZoneBytes(int index) {
            return accessZone_.getByteString(index);
          }
          /**
           * <pre>
           * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
           * </pre>
           *
           * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
           * @param index The index to set the value at.
           * @param value The accessZone to set.
           * @return This builder for chaining.
           */
          public Builder setAccessZone(
              int index, java.lang.String value) {
            if (value == null) { throw new NullPointerException(); }
            ensureAccessZoneIsMutable();
            accessZone_.set(index, value);
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
           * </pre>
           *
           * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
           * @param value The accessZone to add.
           * @return This builder for chaining.
           */
          public Builder addAccessZone(
              java.lang.String value) {
            if (value == null) { throw new NullPointerException(); }
            ensureAccessZoneIsMutable();
            accessZone_.add(value);
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
           * </pre>
           *
           * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
           * @param values The accessZone to add.
           * @return This builder for chaining.
           */
          public Builder addAllAccessZone(
              java.lang.Iterable<java.lang.String> values) {
            ensureAccessZoneIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, accessZone_);
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
           * </pre>
           *
           * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
           * @return This builder for chaining.
           */
          public Builder clearAccessZone() {
            accessZone_ =
              com.google.protobuf.LazyStringArrayList.emptyList();
            bitField0_ = (bitField0_ & ~0x00000001);;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
           * </pre>
           *
           * <code>repeated string access_zone = 1 [(.buf.validate.field) = { ... }</code>
           * @param value The bytes of the accessZone to add.
           * @return This builder for chaining.
           */
          public Builder addAccessZoneBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) { throw new NullPointerException(); }
            checkByteStringIsUtf8(value);
            ensureAccessZoneIsMutable();
            accessZone_.add(value);
            bitField0_ |= 0x00000001;
            onChanged();
            return this;
          }

          // @@protoc_insertion_point(builder_scope:event_logging.v4.EventSourceComplexType.DoorType.AddAccessType)
        }

        // @@protoc_insertion_point(class_scope:event_logging.v4.EventSourceComplexType.DoorType.AddAccessType)
        private static final event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType();
        }

        public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<AddAccessType>
            PARSER = new com.google.protobuf.AbstractParser<AddAccessType>() {
          @java.lang.Override
          public AddAccessType parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            Builder builder = newBuilder();
            try {
              builder.mergeFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              throw e.setUnfinishedMessage(builder.buildPartial());
            } catch (com.google.protobuf.UninitializedMessageException e) {
              throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
            } catch (java.io.IOException e) {
              throw new com.google.protobuf.InvalidProtocolBufferException(e)
                  .setUnfinishedMessage(builder.buildPartial());
            }
            return builder.buildPartial();
          }
        };

        public static com.google.protobuf.Parser<AddAccessType> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<AddAccessType> getParserForType() {
          return PARSER;
        }

        @java.lang.Override
        public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int bitField0_;
      public static final int NAME_FIELD_NUMBER = 1;
      @SuppressWarnings("serial")
      private volatile java.lang.Object name_ = "";
      /**
       * <pre>
       * The site-wide name/identifier for the door.
       * </pre>
       *
       * <code>string name = 1 [(.buf.validate.field) = { ... }</code>
       * @return The name.
       */
      @java.lang.Override
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * The site-wide name/identifier for the door.
       * </pre>
       *
       * <code>string name = 1 [(.buf.validate.field) = { ... }</code>
       * @return The bytes for name.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int DESCRIPTION_FIELD_NUMBER = 2;
      @SuppressWarnings("serial")
      private volatile java.lang.Object description_ = "";
      /**
       * <pre>
       * A user readable description of the door.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @return The description.
       */
      @java.lang.Override
      public java.lang.String getDescription() {
        java.lang.Object ref = description_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          description_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * A user readable description of the door.
       * </pre>
       *
       * <code>string description = 2;</code>
       * @return The bytes for description.
       */
      @java.lang.Override
      public com.google.protobuf.ByteString
          getDescriptionBytes() {
        java.lang.Object ref = description_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          description_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int LOCATION_FIELD_NUMBER = 3;
      private event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType location_;
      /**
       * <pre>
       * Describes the geographic location of the device.
       * </pre>
       *
       * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
       * @return Whether the location field is set.
       */
      @java.lang.Override
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Describes the geographic location of the device.
       * </pre>
       *
       * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
       * @return The location.
       */
      @java.lang.Override
      public event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType getLocation() {
        return location_ == null ? event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType.getDefaultInstance() : location_;
      }
      /**
       * <pre>
       * Describes the geographic location of the device.
       * </pre>
       *
       * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
       */
      @java.lang.Override
      public event_logging.v4.LocationComplexTypeOuterClass.LocationComplexTypeOrBuilder getLocationOrBuilder() {
        return location_ == null ? event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType.getDefaultInstance() : location_;
      }

      public static final int SINGLE_ENTRY_FIELD_NUMBER = 4;
      private boolean singleEntry_ = false;
      /**
       * <pre>
       * It is assumed that doors only allow for a single authenticated person to enter at a time, e.g. in the case of turnstiles. Where single entry is true this element can be omitted as this is expected by default.
       * </pre>
       *
       * <code>bool single_entry = 4;</code>
       * @return The singleEntry.
       */
      @java.lang.Override
      public boolean getSingleEntry() {
        return singleEntry_;
      }

      public static final int REMOVE_ALL_FIELD_NUMBER = 5;
      private boolean removeAll_ = false;
      /**
       * <pre>
       * This element is used to tell us to remove all access zones from the list of currently accessible zones for a user before adding a new one. This is the case whenever a user moves from one zone to another and loses all possible access to the zones they were previously in, i.e. they would need to re-authenticate to regain access rather than just pass back through the door. If not specified this element is considered to be true as most movement through a door removes access to previously accessible zones. Removal of all access zones provides anti pass-back protection.
       * </pre>
       *
       * <code>bool remove_all = 5;</code>
       * @return The removeAll.
       */
      @java.lang.Override
      public boolean getRemoveAll() {
        return removeAll_;
      }

      public static final int ADD_ACCESS_FIELD_NUMBER = 6;
      private event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType addAccess_;
      /**
       * <pre>
       * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
       * @return Whether the addAccess field is set.
       */
      @java.lang.Override
      public boolean hasAddAccess() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
       * @return The addAccess.
       */
      @java.lang.Override
      public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType getAddAccess() {
        return addAccess_ == null ? event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.getDefaultInstance() : addAccess_;
      }
      /**
       * <pre>
       * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
       */
      @java.lang.Override
      public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessTypeOrBuilder getAddAccessOrBuilder() {
        return addAccess_ == null ? event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.getDefaultInstance() : addAccess_;
      }

      private byte memoizedIsInitialized = -1;
      @java.lang.Override
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      @java.lang.Override
      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 1, name_);
        }
        if (!com.google.protobuf.GeneratedMessage.isStringEmpty(description_)) {
          com.google.protobuf.GeneratedMessage.writeString(output, 2, description_);
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          output.writeMessage(3, getLocation());
        }
        if (singleEntry_ != false) {
          output.writeBool(4, singleEntry_);
        }
        if (removeAll_ != false) {
          output.writeBool(5, removeAll_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          output.writeMessage(6, getAddAccess());
        }
        getUnknownFields().writeTo(output);
      }

      @java.lang.Override
      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(1, name_);
        }
        if (!com.google.protobuf.GeneratedMessage.isStringEmpty(description_)) {
          size += com.google.protobuf.GeneratedMessage.computeStringSize(2, description_);
        }
        if (((bitField0_ & 0x00000001) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, getLocation());
        }
        if (singleEntry_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(4, singleEntry_);
        }
        if (removeAll_ != false) {
          size += com.google.protobuf.CodedOutputStream
            .computeBoolSize(5, removeAll_);
        }
        if (((bitField0_ & 0x00000002) != 0)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(6, getAddAccess());
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType)) {
          return super.equals(obj);
        }
        event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType other = (event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType) obj;

        if (!getName()
            .equals(other.getName())) return false;
        if (!getDescription()
            .equals(other.getDescription())) return false;
        if (hasLocation() != other.hasLocation()) return false;
        if (hasLocation()) {
          if (!getLocation()
              .equals(other.getLocation())) return false;
        }
        if (getSingleEntry()
            != other.getSingleEntry()) return false;
        if (getRemoveAll()
            != other.getRemoveAll()) return false;
        if (hasAddAccess() != other.hasAddAccess()) return false;
        if (hasAddAccess()) {
          if (!getAddAccess()
              .equals(other.getAddAccess())) return false;
        }
        if (!getUnknownFields().equals(other.getUnknownFields())) return false;
        return true;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + NAME_FIELD_NUMBER;
        hash = (53 * hash) + getName().hashCode();
        hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
        hash = (53 * hash) + getDescription().hashCode();
        if (hasLocation()) {
          hash = (37 * hash) + LOCATION_FIELD_NUMBER;
          hash = (53 * hash) + getLocation().hashCode();
        }
        hash = (37 * hash) + SINGLE_ENTRY_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getSingleEntry());
        hash = (37 * hash) + REMOVE_ALL_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
            getRemoveAll());
        if (hasAddAccess()) {
          hash = (37 * hash) + ADD_ACCESS_FIELD_NUMBER;
          hash = (53 * hash) + getAddAccess().hashCode();
        }
        hash = (29 * hash) + getUnknownFields().hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input);
      }

      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input);
      }
      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessage
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      @java.lang.Override
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      @java.lang.Override
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * Physical access events are generated by doors, barriers, turnstiles, etc. This type provides details of the door and its location and access control properties.
       * </pre>
       *
       * Protobuf type {@code event_logging.v4.EventSourceComplexType.DoorType}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:event_logging.v4.EventSourceComplexType.DoorType)
          event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorTypeOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_DoorType_descriptor;
        }

        @java.lang.Override
        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_DoorType_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.class, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.Builder.class);
        }

        // Construct using event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage
                  .alwaysUseFieldBuilders) {
            getLocationFieldBuilder();
            getAddAccessFieldBuilder();
          }
        }
        @java.lang.Override
        public Builder clear() {
          super.clear();
          bitField0_ = 0;
          name_ = "";
          description_ = "";
          location_ = null;
          if (locationBuilder_ != null) {
            locationBuilder_.dispose();
            locationBuilder_ = null;
          }
          singleEntry_ = false;
          removeAll_ = false;
          addAccess_ = null;
          if (addAccessBuilder_ != null) {
            addAccessBuilder_.dispose();
            addAccessBuilder_ = null;
          }
          return this;
        }

        @java.lang.Override
        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_DoorType_descriptor;
        }

        @java.lang.Override
        public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType getDefaultInstanceForType() {
          return event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.getDefaultInstance();
        }

        @java.lang.Override
        public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType build() {
          event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        @java.lang.Override
        public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType buildPartial() {
          event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType result = new event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType(this);
          if (bitField0_ != 0) { buildPartial0(result); }
          onBuilt();
          return result;
        }

        private void buildPartial0(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType result) {
          int from_bitField0_ = bitField0_;
          if (((from_bitField0_ & 0x00000001) != 0)) {
            result.name_ = name_;
          }
          if (((from_bitField0_ & 0x00000002) != 0)) {
            result.description_ = description_;
          }
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000004) != 0)) {
            result.location_ = locationBuilder_ == null
                ? location_
                : locationBuilder_.build();
            to_bitField0_ |= 0x00000001;
          }
          if (((from_bitField0_ & 0x00000008) != 0)) {
            result.singleEntry_ = singleEntry_;
          }
          if (((from_bitField0_ & 0x00000010) != 0)) {
            result.removeAll_ = removeAll_;
          }
          if (((from_bitField0_ & 0x00000020) != 0)) {
            result.addAccess_ = addAccessBuilder_ == null
                ? addAccess_
                : addAccessBuilder_.build();
            to_bitField0_ |= 0x00000002;
          }
          result.bitField0_ |= to_bitField0_;
        }

        @java.lang.Override
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType) {
            return mergeFrom((event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType other) {
          if (other == event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.getDefaultInstance()) return this;
          if (!other.getName().isEmpty()) {
            name_ = other.name_;
            bitField0_ |= 0x00000001;
            onChanged();
          }
          if (!other.getDescription().isEmpty()) {
            description_ = other.description_;
            bitField0_ |= 0x00000002;
            onChanged();
          }
          if (other.hasLocation()) {
            mergeLocation(other.getLocation());
          }
          if (other.getSingleEntry() != false) {
            setSingleEntry(other.getSingleEntry());
          }
          if (other.getRemoveAll() != false) {
            setRemoveAll(other.getRemoveAll());
          }
          if (other.hasAddAccess()) {
            mergeAddAccess(other.getAddAccess());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          onChanged();
          return this;
        }

        @java.lang.Override
        public final boolean isInitialized() {
          return true;
        }

        @java.lang.Override
        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                case 10: {
                  name_ = input.readStringRequireUtf8();
                  bitField0_ |= 0x00000001;
                  break;
                } // case 10
                case 18: {
                  description_ = input.readStringRequireUtf8();
                  bitField0_ |= 0x00000002;
                  break;
                } // case 18
                case 26: {
                  input.readMessage(
                      getLocationFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000004;
                  break;
                } // case 26
                case 32: {
                  singleEntry_ = input.readBool();
                  bitField0_ |= 0x00000008;
                  break;
                } // case 32
                case 40: {
                  removeAll_ = input.readBool();
                  bitField0_ |= 0x00000010;
                  break;
                } // case 40
                case 50: {
                  input.readMessage(
                      getAddAccessFieldBuilder().getBuilder(),
                      extensionRegistry);
                  bitField0_ |= 0x00000020;
                  break;
                } // case 50
                default: {
                  if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                    done = true; // was an endgroup tag
                  }
                  break;
                } // default:
              } // switch (tag)
            } // while (!done)
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.unwrapIOException();
          } finally {
            onChanged();
          } // finally
          return this;
        }
        private int bitField0_;

        private java.lang.Object name_ = "";
        /**
         * <pre>
         * The site-wide name/identifier for the door.
         * </pre>
         *
         * <code>string name = 1 [(.buf.validate.field) = { ... }</code>
         * @return The name.
         */
        public java.lang.String getName() {
          java.lang.Object ref = name_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            name_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * The site-wide name/identifier for the door.
         * </pre>
         *
         * <code>string name = 1 [(.buf.validate.field) = { ... }</code>
         * @return The bytes for name.
         */
        public com.google.protobuf.ByteString
            getNameBytes() {
          java.lang.Object ref = name_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            name_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * The site-wide name/identifier for the door.
         * </pre>
         *
         * <code>string name = 1 [(.buf.validate.field) = { ... }</code>
         * @param value The name to set.
         * @return This builder for chaining.
         */
        public Builder setName(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          name_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The site-wide name/identifier for the door.
         * </pre>
         *
         * <code>string name = 1 [(.buf.validate.field) = { ... }</code>
         * @return This builder for chaining.
         */
        public Builder clearName() {
          name_ = getDefaultInstance().getName();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The site-wide name/identifier for the door.
         * </pre>
         *
         * <code>string name = 1 [(.buf.validate.field) = { ... }</code>
         * @param value The bytes for name to set.
         * @return This builder for chaining.
         */
        public Builder setNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          checkByteStringIsUtf8(value);
          name_ = value;
          bitField0_ |= 0x00000001;
          onChanged();
          return this;
        }

        private java.lang.Object description_ = "";
        /**
         * <pre>
         * A user readable description of the door.
         * </pre>
         *
         * <code>string description = 2;</code>
         * @return The description.
         */
        public java.lang.String getDescription() {
          java.lang.Object ref = description_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            description_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * A user readable description of the door.
         * </pre>
         *
         * <code>string description = 2;</code>
         * @return The bytes for description.
         */
        public com.google.protobuf.ByteString
            getDescriptionBytes() {
          java.lang.Object ref = description_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            description_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * A user readable description of the door.
         * </pre>
         *
         * <code>string description = 2;</code>
         * @param value The description to set.
         * @return This builder for chaining.
         */
        public Builder setDescription(
            java.lang.String value) {
          if (value == null) { throw new NullPointerException(); }
          description_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * A user readable description of the door.
         * </pre>
         *
         * <code>string description = 2;</code>
         * @return This builder for chaining.
         */
        public Builder clearDescription() {
          description_ = getDefaultInstance().getDescription();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * A user readable description of the door.
         * </pre>
         *
         * <code>string description = 2;</code>
         * @param value The bytes for description to set.
         * @return This builder for chaining.
         */
        public Builder setDescriptionBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) { throw new NullPointerException(); }
          checkByteStringIsUtf8(value);
          description_ = value;
          bitField0_ |= 0x00000002;
          onChanged();
          return this;
        }

        private event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType location_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType, event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType.Builder, event_logging.v4.LocationComplexTypeOuterClass.LocationComplexTypeOrBuilder> locationBuilder_;
        /**
         * <pre>
         * Describes the geographic location of the device.
         * </pre>
         *
         * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
         * @return Whether the location field is set.
         */
        public boolean hasLocation() {
          return ((bitField0_ & 0x00000004) != 0);
        }
        /**
         * <pre>
         * Describes the geographic location of the device.
         * </pre>
         *
         * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
         * @return The location.
         */
        public event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType getLocation() {
          if (locationBuilder_ == null) {
            return location_ == null ? event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType.getDefaultInstance() : location_;
          } else {
            return locationBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * Describes the geographic location of the device.
         * </pre>
         *
         * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
         */
        public Builder setLocation(event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType value) {
          if (locationBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            location_ = value;
          } else {
            locationBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Describes the geographic location of the device.
         * </pre>
         *
         * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
         */
        public Builder setLocation(
            event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType.Builder builderForValue) {
          if (locationBuilder_ == null) {
            location_ = builderForValue.build();
          } else {
            locationBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000004;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Describes the geographic location of the device.
         * </pre>
         *
         * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
         */
        public Builder mergeLocation(event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType value) {
          if (locationBuilder_ == null) {
            if (((bitField0_ & 0x00000004) != 0) &&
              location_ != null &&
              location_ != event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType.getDefaultInstance()) {
              getLocationBuilder().mergeFrom(value);
            } else {
              location_ = value;
            }
          } else {
            locationBuilder_.mergeFrom(value);
          }
          if (location_ != null) {
            bitField0_ |= 0x00000004;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * Describes the geographic location of the device.
         * </pre>
         *
         * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
         */
        public Builder clearLocation() {
          bitField0_ = (bitField0_ & ~0x00000004);
          location_ = null;
          if (locationBuilder_ != null) {
            locationBuilder_.dispose();
            locationBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Describes the geographic location of the device.
         * </pre>
         *
         * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
         */
        public event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType.Builder getLocationBuilder() {
          bitField0_ |= 0x00000004;
          onChanged();
          return getLocationFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * Describes the geographic location of the device.
         * </pre>
         *
         * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
         */
        public event_logging.v4.LocationComplexTypeOuterClass.LocationComplexTypeOrBuilder getLocationOrBuilder() {
          if (locationBuilder_ != null) {
            return locationBuilder_.getMessageOrBuilder();
          } else {
            return location_ == null ?
                event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType.getDefaultInstance() : location_;
          }
        }
        /**
         * <pre>
         * Describes the geographic location of the device.
         * </pre>
         *
         * <code>.event_logging.v4.LocationComplexType location = 3 [(.buf.validate.field) = { ... }</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType, event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType.Builder, event_logging.v4.LocationComplexTypeOuterClass.LocationComplexTypeOrBuilder> 
            getLocationFieldBuilder() {
          if (locationBuilder_ == null) {
            locationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType, event_logging.v4.LocationComplexTypeOuterClass.LocationComplexType.Builder, event_logging.v4.LocationComplexTypeOuterClass.LocationComplexTypeOrBuilder>(
                    getLocation(),
                    getParentForChildren(),
                    isClean());
            location_ = null;
          }
          return locationBuilder_;
        }

        private boolean singleEntry_ ;
        /**
         * <pre>
         * It is assumed that doors only allow for a single authenticated person to enter at a time, e.g. in the case of turnstiles. Where single entry is true this element can be omitted as this is expected by default.
         * </pre>
         *
         * <code>bool single_entry = 4;</code>
         * @return The singleEntry.
         */
        @java.lang.Override
        public boolean getSingleEntry() {
          return singleEntry_;
        }
        /**
         * <pre>
         * It is assumed that doors only allow for a single authenticated person to enter at a time, e.g. in the case of turnstiles. Where single entry is true this element can be omitted as this is expected by default.
         * </pre>
         *
         * <code>bool single_entry = 4;</code>
         * @param value The singleEntry to set.
         * @return This builder for chaining.
         */
        public Builder setSingleEntry(boolean value) {

          singleEntry_ = value;
          bitField0_ |= 0x00000008;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * It is assumed that doors only allow for a single authenticated person to enter at a time, e.g. in the case of turnstiles. Where single entry is true this element can be omitted as this is expected by default.
         * </pre>
         *
         * <code>bool single_entry = 4;</code>
         * @return This builder for chaining.
         */
        public Builder clearSingleEntry() {
          bitField0_ = (bitField0_ & ~0x00000008);
          singleEntry_ = false;
          onChanged();
          return this;
        }

        private boolean removeAll_ ;
        /**
         * <pre>
         * This element is used to tell us to remove all access zones from the list of currently accessible zones for a user before adding a new one. This is the case whenever a user moves from one zone to another and loses all possible access to the zones they were previously in, i.e. they would need to re-authenticate to regain access rather than just pass back through the door. If not specified this element is considered to be true as most movement through a door removes access to previously accessible zones. Removal of all access zones provides anti pass-back protection.
         * </pre>
         *
         * <code>bool remove_all = 5;</code>
         * @return The removeAll.
         */
        @java.lang.Override
        public boolean getRemoveAll() {
          return removeAll_;
        }
        /**
         * <pre>
         * This element is used to tell us to remove all access zones from the list of currently accessible zones for a user before adding a new one. This is the case whenever a user moves from one zone to another and loses all possible access to the zones they were previously in, i.e. they would need to re-authenticate to regain access rather than just pass back through the door. If not specified this element is considered to be true as most movement through a door removes access to previously accessible zones. Removal of all access zones provides anti pass-back protection.
         * </pre>
         *
         * <code>bool remove_all = 5;</code>
         * @param value The removeAll to set.
         * @return This builder for chaining.
         */
        public Builder setRemoveAll(boolean value) {

          removeAll_ = value;
          bitField0_ |= 0x00000010;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * This element is used to tell us to remove all access zones from the list of currently accessible zones for a user before adding a new one. This is the case whenever a user moves from one zone to another and loses all possible access to the zones they were previously in, i.e. they would need to re-authenticate to regain access rather than just pass back through the door. If not specified this element is considered to be true as most movement through a door removes access to previously accessible zones. Removal of all access zones provides anti pass-back protection.
         * </pre>
         *
         * <code>bool remove_all = 5;</code>
         * @return This builder for chaining.
         */
        public Builder clearRemoveAll() {
          bitField0_ = (bitField0_ & ~0x00000010);
          removeAll_ = false;
          onChanged();
          return this;
        }

        private event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType addAccess_;
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.Builder, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessTypeOrBuilder> addAccessBuilder_;
        /**
         * <pre>
         * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
         * </pre>
         *
         * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
         * @return Whether the addAccess field is set.
         */
        public boolean hasAddAccess() {
          return ((bitField0_ & 0x00000020) != 0);
        }
        /**
         * <pre>
         * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
         * </pre>
         *
         * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
         * @return The addAccess.
         */
        public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType getAddAccess() {
          if (addAccessBuilder_ == null) {
            return addAccess_ == null ? event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.getDefaultInstance() : addAccess_;
          } else {
            return addAccessBuilder_.getMessage();
          }
        }
        /**
         * <pre>
         * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
         * </pre>
         *
         * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
         */
        public Builder setAddAccess(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType value) {
          if (addAccessBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            addAccess_ = value;
          } else {
            addAccessBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000020;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
         * </pre>
         *
         * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
         */
        public Builder setAddAccess(
            event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.Builder builderForValue) {
          if (addAccessBuilder_ == null) {
            addAccess_ = builderForValue.build();
          } else {
            addAccessBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000020;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
         * </pre>
         *
         * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
         */
        public Builder mergeAddAccess(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType value) {
          if (addAccessBuilder_ == null) {
            if (((bitField0_ & 0x00000020) != 0) &&
              addAccess_ != null &&
              addAccess_ != event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.getDefaultInstance()) {
              getAddAccessBuilder().mergeFrom(value);
            } else {
              addAccess_ = value;
            }
          } else {
            addAccessBuilder_.mergeFrom(value);
          }
          if (addAccess_ != null) {
            bitField0_ |= 0x00000020;
            onChanged();
          }
          return this;
        }
        /**
         * <pre>
         * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
         * </pre>
         *
         * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
         */
        public Builder clearAddAccess() {
          bitField0_ = (bitField0_ & ~0x00000020);
          addAccess_ = null;
          if (addAccessBuilder_ != null) {
            addAccessBuilder_.dispose();
            addAccessBuilder_ = null;
          }
          onChanged();
          return this;
        }
        /**
         * <pre>
         * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
         * </pre>
         *
         * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
         */
        public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.Builder getAddAccessBuilder() {
          bitField0_ |= 0x00000020;
          onChanged();
          return getAddAccessFieldBuilder().getBuilder();
        }
        /**
         * <pre>
         * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
         * </pre>
         *
         * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
         */
        public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessTypeOrBuilder getAddAccessOrBuilder() {
          if (addAccessBuilder_ != null) {
            return addAccessBuilder_.getMessageOrBuilder();
          } else {
            return addAccess_ == null ?
                event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.getDefaultInstance() : addAccess_;
          }
        }
        /**
         * <pre>
         * A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
         * </pre>
         *
         * <code>.event_logging.v4.EventSourceComplexType.DoorType.AddAccessType add_access = 6 [(.buf.validate.field) = { ... }</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.Builder, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessTypeOrBuilder> 
            getAddAccessFieldBuilder() {
          if (addAccessBuilder_ == null) {
            addAccessBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessType.Builder, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.AddAccessTypeOrBuilder>(
                    getAddAccess(),
                    getParentForChildren(),
                    isClean());
            addAccess_ = null;
          }
          return addAccessBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:event_logging.v4.EventSourceComplexType.DoorType)
      }

      // @@protoc_insertion_point(class_scope:event_logging.v4.EventSourceComplexType.DoorType)
      private static final event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType();
      }

      public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<DoorType>
          PARSER = new com.google.protobuf.AbstractParser<DoorType>() {
        @java.lang.Override
        public DoorType parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          Builder builder = newBuilder();
          try {
            builder.mergeFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(builder.buildPartial());
          } catch (com.google.protobuf.UninitializedMessageException e) {
            throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(e)
                .setUnfinishedMessage(builder.buildPartial());
          }
          return builder.buildPartial();
        }
      };

      public static com.google.protobuf.Parser<DoorType> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<DoorType> getParserForType() {
        return PARSER;
      }

      @java.lang.Override
      public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int EVENT_ID_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private volatile java.lang.Object eventId_ = "";
    /**
     * <pre>
     * A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
     * </pre>
     *
     * <code>string event_id = 1;</code>
     * @return The eventId.
     */
    @java.lang.Override
    public java.lang.String getEventId() {
      java.lang.Object ref = eventId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        eventId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
     * </pre>
     *
     * <code>string event_id = 1;</code>
     * @return The bytes for eventId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getEventIdBytes() {
      java.lang.Object ref = eventId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        eventId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SESSION_ID_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object sessionId_ = "";
    /**
     * <pre>
     * Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
     * </pre>
     *
     * <code>string session_id = 2;</code>
     * @return The sessionId.
     */
    @java.lang.Override
    public java.lang.String getSessionId() {
      java.lang.Object ref = sessionId_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sessionId_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
     * </pre>
     *
     * <code>string session_id = 2;</code>
     * @return The bytes for sessionId.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getSessionIdBytes() {
      java.lang.Object ref = sessionId_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sessionId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SYSTEM_FIELD_NUMBER = 3;
    private event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType system_;
    /**
     * <pre>
     * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
     * </pre>
     *
     * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
     * @return Whether the system field is set.
     */
    @java.lang.Override
    public boolean hasSystem() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
     * </pre>
     *
     * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
     * @return The system.
     */
    @java.lang.Override
    public event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType getSystem() {
      return system_ == null ? event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType.getDefaultInstance() : system_;
    }
    /**
     * <pre>
     * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
     * </pre>
     *
     * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public event_logging.v4.SystemComplexTypeOuterClass.SystemComplexTypeOrBuilder getSystemOrBuilder() {
      return system_ == null ? event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType.getDefaultInstance() : system_;
    }

    public static final int GENERATOR_FIELD_NUMBER = 4;
    @SuppressWarnings("serial")
    private volatile java.lang.Object generator_ = "";
    /**
     * <pre>
     * The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
     * </pre>
     *
     * <code>string generator = 4 [(.buf.validate.field) = { ... }</code>
     * @return The generator.
     */
    @java.lang.Override
    public java.lang.String getGenerator() {
      java.lang.Object ref = generator_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        generator_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
     * </pre>
     *
     * <code>string generator = 4 [(.buf.validate.field) = { ... }</code>
     * @return The bytes for generator.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getGeneratorBytes() {
      java.lang.Object ref = generator_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        generator_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int DEVICE_FIELD_NUMBER = 5;
    private event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType device_;
    /**
     * <pre>
     * A description of the device that the event generator is hosted upon.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
     * @return Whether the device field is set.
     */
    @java.lang.Override
    public boolean hasDevice() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * A description of the device that the event generator is hosted upon.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
     * @return The device.
     */
    @java.lang.Override
    public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType getDevice() {
      return device_ == null ? event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance() : device_;
    }
    /**
     * <pre>
     * A description of the device that the event generator is hosted upon.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder getDeviceOrBuilder() {
      return device_ == null ? event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance() : device_;
    }

    public static final int CLIENT_FIELD_NUMBER = 6;
    private event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType client_;
    /**
     * <pre>
     * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
     * @return Whether the client field is set.
     */
    @java.lang.Override
    public boolean hasClient() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
     * @return The client.
     */
    @java.lang.Override
    public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType getClient() {
      return client_ == null ? event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance() : client_;
    }
    /**
     * <pre>
     * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
     */
    @java.lang.Override
    public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder getClientOrBuilder() {
      return client_ == null ? event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance() : client_;
    }

    public static final int SERVER_FIELD_NUMBER = 7;
    private event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType server_;
    /**
     * <pre>
     * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
     * @return Whether the server field is set.
     */
    @java.lang.Override
    public boolean hasServer() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
     * @return The server.
     */
    @java.lang.Override
    public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType getServer() {
      return server_ == null ? event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance() : server_;
    }
    /**
     * <pre>
     * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
     */
    @java.lang.Override
    public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder getServerOrBuilder() {
      return server_ == null ? event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance() : server_;
    }

    public static final int DOOR_FIELD_NUMBER = 8;
    private event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType door_;
    /**
     * <pre>
     * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
     * </pre>
     *
     * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
     * @return Whether the door field is set.
     */
    @java.lang.Override
    public boolean hasDoor() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
     * </pre>
     *
     * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
     * @return The door.
     */
    @java.lang.Override
    public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType getDoor() {
      return door_ == null ? event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.getDefaultInstance() : door_;
    }
    /**
     * <pre>
     * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
     * </pre>
     *
     * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
     */
    @java.lang.Override
    public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorTypeOrBuilder getDoorOrBuilder() {
      return door_ == null ? event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.getDefaultInstance() : door_;
    }

    public static final int USER_FIELD_NUMBER = 9;
    private event_logging.v4.UserComplexTypeOuterClass.UserComplexType user_;
    /**
     * <pre>
     * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 9;</code>
     * @return Whether the user field is set.
     */
    @java.lang.Override
    public boolean hasUser() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 9;</code>
     * @return The user.
     */
    @java.lang.Override
    public event_logging.v4.UserComplexTypeOuterClass.UserComplexType getUser() {
      return user_ == null ? event_logging.v4.UserComplexTypeOuterClass.UserComplexType.getDefaultInstance() : user_;
    }
    /**
     * <pre>
     * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 9;</code>
     */
    @java.lang.Override
    public event_logging.v4.UserComplexTypeOuterClass.UserComplexTypeOrBuilder getUserOrBuilder() {
      return user_ == null ? event_logging.v4.UserComplexTypeOuterClass.UserComplexType.getDefaultInstance() : user_;
    }

    public static final int RUN_AS_FIELD_NUMBER = 10;
    private event_logging.v4.UserComplexTypeOuterClass.UserComplexType runAs_;
    /**
     * <pre>
     * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
     * @return Whether the runAs field is set.
     */
    @java.lang.Override
    public boolean hasRunAs() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
     * @return The runAs.
     */
    @java.lang.Override
    public event_logging.v4.UserComplexTypeOuterClass.UserComplexType getRunAs() {
      return runAs_ == null ? event_logging.v4.UserComplexTypeOuterClass.UserComplexType.getDefaultInstance() : runAs_;
    }
    /**
     * <pre>
     * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
     */
    @java.lang.Override
    public event_logging.v4.UserComplexTypeOuterClass.UserComplexTypeOrBuilder getRunAsOrBuilder() {
      return runAs_ == null ? event_logging.v4.UserComplexTypeOuterClass.UserComplexType.getDefaultInstance() : runAs_;
    }

    public static final int INTERACTIVE_FIELD_NUMBER = 11;
    private boolean interactive_ = false;
    /**
     * <pre>
     * Indicates whether the event was produced as a result of direct interaction, i.e. user was directly responsible for the event being created and was present at the time it was created. This element will be false where an event may have been created after the user was present, e.g. where scheduled processing is performed or an action has been queued for execution later, as is the case when some form of asynchronous processing is used. All interactive events must provide the Id for the user. Can be omitted if true as this is the default.
     * </pre>
     *
     * <code>bool interactive = 11;</code>
     * @return The interactive.
     */
    @java.lang.Override
    public boolean getInteractive() {
      return interactive_;
    }

    public static final int DATA_FIELD_NUMBER = 12;
    @SuppressWarnings("serial")
    private java.util.List<event_logging.v4.DataComplexTypeOuterClass.DataComplexType> data_;
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<event_logging.v4.DataComplexTypeOuterClass.DataComplexType> getDataList() {
      return data_;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder> 
        getDataOrBuilderList() {
      return data_;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public event_logging.v4.DataComplexTypeOuterClass.DataComplexType getData(int index) {
      return data_.get(index);
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder getDataOrBuilder(
        int index) {
      return data_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(eventId_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 1, eventId_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(sessionId_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, sessionId_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(3, getSystem());
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(generator_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 4, generator_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(5, getDevice());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(6, getClient());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(7, getServer());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(8, getDoor());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeMessage(9, getUser());
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeMessage(10, getRunAs());
      }
      if (interactive_ != false) {
        output.writeBool(11, interactive_);
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeMessage(12, data_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(eventId_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(1, eventId_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(sessionId_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, sessionId_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getSystem());
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(generator_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(4, generator_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getDevice());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getClient());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getServer());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getDoor());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getUser());
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getRunAs());
      }
      if (interactive_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, interactive_);
      }
      for (int i = 0; i < data_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(12, data_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType)) {
        return super.equals(obj);
      }
      event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType other = (event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType) obj;

      if (!getEventId()
          .equals(other.getEventId())) return false;
      if (!getSessionId()
          .equals(other.getSessionId())) return false;
      if (hasSystem() != other.hasSystem()) return false;
      if (hasSystem()) {
        if (!getSystem()
            .equals(other.getSystem())) return false;
      }
      if (!getGenerator()
          .equals(other.getGenerator())) return false;
      if (hasDevice() != other.hasDevice()) return false;
      if (hasDevice()) {
        if (!getDevice()
            .equals(other.getDevice())) return false;
      }
      if (hasClient() != other.hasClient()) return false;
      if (hasClient()) {
        if (!getClient()
            .equals(other.getClient())) return false;
      }
      if (hasServer() != other.hasServer()) return false;
      if (hasServer()) {
        if (!getServer()
            .equals(other.getServer())) return false;
      }
      if (hasDoor() != other.hasDoor()) return false;
      if (hasDoor()) {
        if (!getDoor()
            .equals(other.getDoor())) return false;
      }
      if (hasUser() != other.hasUser()) return false;
      if (hasUser()) {
        if (!getUser()
            .equals(other.getUser())) return false;
      }
      if (hasRunAs() != other.hasRunAs()) return false;
      if (hasRunAs()) {
        if (!getRunAs()
            .equals(other.getRunAs())) return false;
      }
      if (getInteractive()
          != other.getInteractive()) return false;
      if (!getDataList()
          .equals(other.getDataList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EVENT_ID_FIELD_NUMBER;
      hash = (53 * hash) + getEventId().hashCode();
      hash = (37 * hash) + SESSION_ID_FIELD_NUMBER;
      hash = (53 * hash) + getSessionId().hashCode();
      if (hasSystem()) {
        hash = (37 * hash) + SYSTEM_FIELD_NUMBER;
        hash = (53 * hash) + getSystem().hashCode();
      }
      hash = (37 * hash) + GENERATOR_FIELD_NUMBER;
      hash = (53 * hash) + getGenerator().hashCode();
      if (hasDevice()) {
        hash = (37 * hash) + DEVICE_FIELD_NUMBER;
        hash = (53 * hash) + getDevice().hashCode();
      }
      if (hasClient()) {
        hash = (37 * hash) + CLIENT_FIELD_NUMBER;
        hash = (53 * hash) + getClient().hashCode();
      }
      if (hasServer()) {
        hash = (37 * hash) + SERVER_FIELD_NUMBER;
        hash = (53 * hash) + getServer().hashCode();
      }
      if (hasDoor()) {
        hash = (37 * hash) + DOOR_FIELD_NUMBER;
        hash = (53 * hash) + getDoor().hashCode();
      }
      if (hasUser()) {
        hash = (37 * hash) + USER_FIELD_NUMBER;
        hash = (53 * hash) + getUser().hashCode();
      }
      if (hasRunAs()) {
        hash = (37 * hash) + RUN_AS_FIELD_NUMBER;
        hash = (53 * hash) + getRunAs().hashCode();
      }
      hash = (37 * hash) + INTERACTIVE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getInteractive());
      if (getDataCount() > 0) {
        hash = (37 * hash) + DATA_FIELD_NUMBER;
        hash = (53 * hash) + getDataList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Details where the event came from, i.e. what generator created the event and on what device.
     * </pre>
     *
     * Protobuf type {@code event_logging.v4.EventSourceComplexType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:event_logging.v4.EventSourceComplexType)
        event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.class, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.Builder.class);
      }

      // Construct using event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getSystemFieldBuilder();
          getDeviceFieldBuilder();
          getClientFieldBuilder();
          getServerFieldBuilder();
          getDoorFieldBuilder();
          getUserFieldBuilder();
          getRunAsFieldBuilder();
          getDataFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        eventId_ = "";
        sessionId_ = "";
        system_ = null;
        if (systemBuilder_ != null) {
          systemBuilder_.dispose();
          systemBuilder_ = null;
        }
        generator_ = "";
        device_ = null;
        if (deviceBuilder_ != null) {
          deviceBuilder_.dispose();
          deviceBuilder_ = null;
        }
        client_ = null;
        if (clientBuilder_ != null) {
          clientBuilder_.dispose();
          clientBuilder_ = null;
        }
        server_ = null;
        if (serverBuilder_ != null) {
          serverBuilder_.dispose();
          serverBuilder_ = null;
        }
        door_ = null;
        if (doorBuilder_ != null) {
          doorBuilder_.dispose();
          doorBuilder_ = null;
        }
        user_ = null;
        if (userBuilder_ != null) {
          userBuilder_.dispose();
          userBuilder_ = null;
        }
        runAs_ = null;
        if (runAsBuilder_ != null) {
          runAsBuilder_.dispose();
          runAsBuilder_ = null;
        }
        interactive_ = false;
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
        } else {
          data_ = null;
          dataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return event_logging.v4.EventSourceComplexTypeOuterClass.internal_static_event_logging_v4_EventSourceComplexType_descriptor;
      }

      @java.lang.Override
      public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType getDefaultInstanceForType() {
        return event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.getDefaultInstance();
      }

      @java.lang.Override
      public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType build() {
        event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType buildPartial() {
        event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType result = new event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType result) {
        if (dataBuilder_ == null) {
          if (((bitField0_ & 0x00000800) != 0)) {
            data_ = java.util.Collections.unmodifiableList(data_);
            bitField0_ = (bitField0_ & ~0x00000800);
          }
          result.data_ = data_;
        } else {
          result.data_ = dataBuilder_.build();
        }
      }

      private void buildPartial0(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.eventId_ = eventId_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.sessionId_ = sessionId_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.system_ = systemBuilder_ == null
              ? system_
              : systemBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.generator_ = generator_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.device_ = deviceBuilder_ == null
              ? device_
              : deviceBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.client_ = clientBuilder_ == null
              ? client_
              : clientBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.server_ = serverBuilder_ == null
              ? server_
              : serverBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.door_ = doorBuilder_ == null
              ? door_
              : doorBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.user_ = userBuilder_ == null
              ? user_
              : userBuilder_.build();
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.runAs_ = runAsBuilder_ == null
              ? runAs_
              : runAsBuilder_.build();
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.interactive_ = interactive_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType) {
          return mergeFrom((event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType other) {
        if (other == event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.getDefaultInstance()) return this;
        if (!other.getEventId().isEmpty()) {
          eventId_ = other.eventId_;
          bitField0_ |= 0x00000001;
          onChanged();
        }
        if (!other.getSessionId().isEmpty()) {
          sessionId_ = other.sessionId_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (other.hasSystem()) {
          mergeSystem(other.getSystem());
        }
        if (!other.getGenerator().isEmpty()) {
          generator_ = other.generator_;
          bitField0_ |= 0x00000008;
          onChanged();
        }
        if (other.hasDevice()) {
          mergeDevice(other.getDevice());
        }
        if (other.hasClient()) {
          mergeClient(other.getClient());
        }
        if (other.hasServer()) {
          mergeServer(other.getServer());
        }
        if (other.hasDoor()) {
          mergeDoor(other.getDoor());
        }
        if (other.hasUser()) {
          mergeUser(other.getUser());
        }
        if (other.hasRunAs()) {
          mergeRunAs(other.getRunAs());
        }
        if (other.getInteractive() != false) {
          setInteractive(other.getInteractive());
        }
        if (dataBuilder_ == null) {
          if (!other.data_.isEmpty()) {
            if (data_.isEmpty()) {
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000800);
            } else {
              ensureDataIsMutable();
              data_.addAll(other.data_);
            }
            onChanged();
          }
        } else {
          if (!other.data_.isEmpty()) {
            if (dataBuilder_.isEmpty()) {
              dataBuilder_.dispose();
              dataBuilder_ = null;
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000800);
              dataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDataFieldBuilder() : null;
            } else {
              dataBuilder_.addAllMessages(other.data_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                eventId_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                sessionId_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getSystemFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                generator_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getDeviceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getClientFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 58: {
                input.readMessage(
                    getServerFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 66: {
                input.readMessage(
                    getDoorFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000080;
                break;
              } // case 66
              case 74: {
                input.readMessage(
                    getUserFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000100;
                break;
              } // case 74
              case 82: {
                input.readMessage(
                    getRunAsFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000200;
                break;
              } // case 82
              case 88: {
                interactive_ = input.readBool();
                bitField0_ |= 0x00000400;
                break;
              } // case 88
              case 98: {
                event_logging.v4.DataComplexTypeOuterClass.DataComplexType m =
                    input.readMessage(
                        event_logging.v4.DataComplexTypeOuterClass.DataComplexType.parser(),
                        extensionRegistry);
                if (dataBuilder_ == null) {
                  ensureDataIsMutable();
                  data_.add(m);
                } else {
                  dataBuilder_.addMessage(m);
                }
                break;
              } // case 98
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.lang.Object eventId_ = "";
      /**
       * <pre>
       * A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
       * </pre>
       *
       * <code>string event_id = 1;</code>
       * @return The eventId.
       */
      public java.lang.String getEventId() {
        java.lang.Object ref = eventId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          eventId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
       * </pre>
       *
       * <code>string event_id = 1;</code>
       * @return The bytes for eventId.
       */
      public com.google.protobuf.ByteString
          getEventIdBytes() {
        java.lang.Object ref = eventId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          eventId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
       * </pre>
       *
       * <code>string event_id = 1;</code>
       * @param value The eventId to set.
       * @return This builder for chaining.
       */
      public Builder setEventId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        eventId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
       * </pre>
       *
       * <code>string event_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearEventId() {
        eventId_ = getDefaultInstance().getEventId();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
       * </pre>
       *
       * <code>string event_id = 1;</code>
       * @param value The bytes for eventId to set.
       * @return This builder for chaining.
       */
      public Builder setEventIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        eventId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }

      private java.lang.Object sessionId_ = "";
      /**
       * <pre>
       * Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
       * </pre>
       *
       * <code>string session_id = 2;</code>
       * @return The sessionId.
       */
      public java.lang.String getSessionId() {
        java.lang.Object ref = sessionId_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sessionId_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
       * </pre>
       *
       * <code>string session_id = 2;</code>
       * @return The bytes for sessionId.
       */
      public com.google.protobuf.ByteString
          getSessionIdBytes() {
        java.lang.Object ref = sessionId_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sessionId_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
       * </pre>
       *
       * <code>string session_id = 2;</code>
       * @param value The sessionId to set.
       * @return This builder for chaining.
       */
      public Builder setSessionId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        sessionId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
       * </pre>
       *
       * <code>string session_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearSessionId() {
        sessionId_ = getDefaultInstance().getSessionId();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
       * </pre>
       *
       * <code>string session_id = 2;</code>
       * @param value The bytes for sessionId to set.
       * @return This builder for chaining.
       */
      public Builder setSessionIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        sessionId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType system_;
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType, event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType.Builder, event_logging.v4.SystemComplexTypeOuterClass.SystemComplexTypeOrBuilder> systemBuilder_;
      /**
       * <pre>
       * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
       * </pre>
       *
       * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
       * @return Whether the system field is set.
       */
      public boolean hasSystem() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
       * </pre>
       *
       * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
       * @return The system.
       */
      public event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType getSystem() {
        if (systemBuilder_ == null) {
          return system_ == null ? event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType.getDefaultInstance() : system_;
        } else {
          return systemBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
       * </pre>
       *
       * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setSystem(event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType value) {
        if (systemBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          system_ = value;
        } else {
          systemBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
       * </pre>
       *
       * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setSystem(
          event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType.Builder builderForValue) {
        if (systemBuilder_ == null) {
          system_ = builderForValue.build();
        } else {
          systemBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
       * </pre>
       *
       * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
       */
      public Builder mergeSystem(event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType value) {
        if (systemBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            system_ != null &&
            system_ != event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType.getDefaultInstance()) {
            getSystemBuilder().mergeFrom(value);
          } else {
            system_ = value;
          }
        } else {
          systemBuilder_.mergeFrom(value);
        }
        if (system_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
       * </pre>
       *
       * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
       */
      public Builder clearSystem() {
        bitField0_ = (bitField0_ & ~0x00000004);
        system_ = null;
        if (systemBuilder_ != null) {
          systemBuilder_.dispose();
          systemBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
       * </pre>
       *
       * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType.Builder getSystemBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSystemFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
       * </pre>
       *
       * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.SystemComplexTypeOuterClass.SystemComplexTypeOrBuilder getSystemOrBuilder() {
        if (systemBuilder_ != null) {
          return systemBuilder_.getMessageOrBuilder();
        } else {
          return system_ == null ?
              event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType.getDefaultInstance() : system_;
        }
      }
      /**
       * <pre>
       * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
       * </pre>
       *
       * <code>.event_logging.v4.SystemComplexType system = 3 [(.buf.validate.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType, event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType.Builder, event_logging.v4.SystemComplexTypeOuterClass.SystemComplexTypeOrBuilder> 
          getSystemFieldBuilder() {
        if (systemBuilder_ == null) {
          systemBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType, event_logging.v4.SystemComplexTypeOuterClass.SystemComplexType.Builder, event_logging.v4.SystemComplexTypeOuterClass.SystemComplexTypeOrBuilder>(
                  getSystem(),
                  getParentForChildren(),
                  isClean());
          system_ = null;
        }
        return systemBuilder_;
      }

      private java.lang.Object generator_ = "";
      /**
       * <pre>
       * The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
       * </pre>
       *
       * <code>string generator = 4 [(.buf.validate.field) = { ... }</code>
       * @return The generator.
       */
      public java.lang.String getGenerator() {
        java.lang.Object ref = generator_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          generator_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
       * </pre>
       *
       * <code>string generator = 4 [(.buf.validate.field) = { ... }</code>
       * @return The bytes for generator.
       */
      public com.google.protobuf.ByteString
          getGeneratorBytes() {
        java.lang.Object ref = generator_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          generator_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
       * </pre>
       *
       * <code>string generator = 4 [(.buf.validate.field) = { ... }</code>
       * @param value The generator to set.
       * @return This builder for chaining.
       */
      public Builder setGenerator(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        generator_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
       * </pre>
       *
       * <code>string generator = 4 [(.buf.validate.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearGenerator() {
        generator_ = getDefaultInstance().getGenerator();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
       * </pre>
       *
       * <code>string generator = 4 [(.buf.validate.field) = { ... }</code>
       * @param value The bytes for generator to set.
       * @return This builder for chaining.
       */
      public Builder setGeneratorBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        generator_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }

      private event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType device_;
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder> deviceBuilder_;
      /**
       * <pre>
       * A description of the device that the event generator is hosted upon.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
       * @return Whether the device field is set.
       */
      public boolean hasDevice() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * A description of the device that the event generator is hosted upon.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
       * @return The device.
       */
      public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType getDevice() {
        if (deviceBuilder_ == null) {
          return device_ == null ? event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance() : device_;
        } else {
          return deviceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * A description of the device that the event generator is hosted upon.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setDevice(event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType value) {
        if (deviceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          device_ = value;
        } else {
          deviceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A description of the device that the event generator is hosted upon.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setDevice(
          event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder builderForValue) {
        if (deviceBuilder_ == null) {
          device_ = builderForValue.build();
        } else {
          deviceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A description of the device that the event generator is hosted upon.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
       */
      public Builder mergeDevice(event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType value) {
        if (deviceBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            device_ != null &&
            device_ != event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance()) {
            getDeviceBuilder().mergeFrom(value);
          } else {
            device_ = value;
          }
        } else {
          deviceBuilder_.mergeFrom(value);
        }
        if (device_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * A description of the device that the event generator is hosted upon.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
       */
      public Builder clearDevice() {
        bitField0_ = (bitField0_ & ~0x00000010);
        device_ = null;
        if (deviceBuilder_ != null) {
          deviceBuilder_.dispose();
          deviceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A description of the device that the event generator is hosted upon.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder getDeviceBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getDeviceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * A description of the device that the event generator is hosted upon.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder getDeviceOrBuilder() {
        if (deviceBuilder_ != null) {
          return deviceBuilder_.getMessageOrBuilder();
        } else {
          return device_ == null ?
              event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance() : device_;
        }
      }
      /**
       * <pre>
       * A description of the device that the event generator is hosted upon.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType device = 5 [(.buf.validate.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder> 
          getDeviceFieldBuilder() {
        if (deviceBuilder_ == null) {
          deviceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder>(
                  getDevice(),
                  getParentForChildren(),
                  isClean());
          device_ = null;
        }
        return deviceBuilder_;
      }

      private event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType client_;
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder> clientBuilder_;
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
       * @return Whether the client field is set.
       */
      public boolean hasClient() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
       * @return The client.
       */
      public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType getClient() {
        if (clientBuilder_ == null) {
          return client_ == null ? event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance() : client_;
        } else {
          return clientBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
       */
      public Builder setClient(event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType value) {
        if (clientBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          client_ = value;
        } else {
          clientBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
       */
      public Builder setClient(
          event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder builderForValue) {
        if (clientBuilder_ == null) {
          client_ = builderForValue.build();
        } else {
          clientBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
       */
      public Builder mergeClient(event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType value) {
        if (clientBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            client_ != null &&
            client_ != event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance()) {
            getClientBuilder().mergeFrom(value);
          } else {
            client_ = value;
          }
        } else {
          clientBuilder_.mergeFrom(value);
        }
        if (client_ != null) {
          bitField0_ |= 0x00000020;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
       */
      public Builder clearClient() {
        bitField0_ = (bitField0_ & ~0x00000020);
        client_ = null;
        if (clientBuilder_ != null) {
          clientBuilder_.dispose();
          clientBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
       */
      public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder getClientBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getClientFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
       */
      public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder getClientOrBuilder() {
        if (clientBuilder_ != null) {
          return clientBuilder_.getMessageOrBuilder();
        } else {
          return client_ == null ?
              event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance() : client_;
        }
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType client = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder> 
          getClientFieldBuilder() {
        if (clientBuilder_ == null) {
          clientBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder>(
                  getClient(),
                  getParentForChildren(),
                  isClean());
          client_ = null;
        }
        return clientBuilder_;
      }

      private event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType server_;
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder> serverBuilder_;
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
       * @return Whether the server field is set.
       */
      public boolean hasServer() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
       * @return The server.
       */
      public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType getServer() {
        if (serverBuilder_ == null) {
          return server_ == null ? event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance() : server_;
        } else {
          return serverBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
       */
      public Builder setServer(event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType value) {
        if (serverBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          server_ = value;
        } else {
          serverBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
       */
      public Builder setServer(
          event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder builderForValue) {
        if (serverBuilder_ == null) {
          server_ = builderForValue.build();
        } else {
          serverBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
       */
      public Builder mergeServer(event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType value) {
        if (serverBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0) &&
            server_ != null &&
            server_ != event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance()) {
            getServerBuilder().mergeFrom(value);
          } else {
            server_ = value;
          }
        } else {
          serverBuilder_.mergeFrom(value);
        }
        if (server_ != null) {
          bitField0_ |= 0x00000040;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
       */
      public Builder clearServer() {
        bitField0_ = (bitField0_ & ~0x00000040);
        server_ = null;
        if (serverBuilder_ != null) {
          serverBuilder_.dispose();
          serverBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
       */
      public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder getServerBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getServerFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
       */
      public event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder getServerOrBuilder() {
        if (serverBuilder_ != null) {
          return serverBuilder_.getMessageOrBuilder();
        } else {
          return server_ == null ?
              event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.getDefaultInstance() : server_;
        }
      }
      /**
       * <pre>
       * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
       * </pre>
       *
       * <code>.event_logging.v4.DeviceComplexType server = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder> 
          getServerFieldBuilder() {
        if (serverBuilder_ == null) {
          serverBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexType.Builder, event_logging.v4.DeviceComplexTypeOuterClass.DeviceComplexTypeOrBuilder>(
                  getServer(),
                  getParentForChildren(),
                  isClean());
          server_ = null;
        }
        return serverBuilder_;
      }

      private event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType door_;
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.Builder, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorTypeOrBuilder> doorBuilder_;
      /**
       * <pre>
       * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
       * @return Whether the door field is set.
       */
      public boolean hasDoor() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <pre>
       * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
       * @return The door.
       */
      public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType getDoor() {
        if (doorBuilder_ == null) {
          return door_ == null ? event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.getDefaultInstance() : door_;
        } else {
          return doorBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
       */
      public Builder setDoor(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType value) {
        if (doorBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          door_ = value;
        } else {
          doorBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
       */
      public Builder setDoor(
          event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.Builder builderForValue) {
        if (doorBuilder_ == null) {
          door_ = builderForValue.build();
        } else {
          doorBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
       */
      public Builder mergeDoor(event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType value) {
        if (doorBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0) &&
            door_ != null &&
            door_ != event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.getDefaultInstance()) {
            getDoorBuilder().mergeFrom(value);
          } else {
            door_ = value;
          }
        } else {
          doorBuilder_.mergeFrom(value);
        }
        if (door_ != null) {
          bitField0_ |= 0x00000080;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
       */
      public Builder clearDoor() {
        bitField0_ = (bitField0_ & ~0x00000080);
        door_ = null;
        if (doorBuilder_ != null) {
          doorBuilder_.dispose();
          doorBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
       */
      public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.Builder getDoorBuilder() {
        bitField0_ |= 0x00000080;
        onChanged();
        return getDoorFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
       */
      public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorTypeOrBuilder getDoorOrBuilder() {
        if (doorBuilder_ != null) {
          return doorBuilder_.getMessageOrBuilder();
        } else {
          return door_ == null ?
              event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.getDefaultInstance() : door_;
        }
      }
      /**
       * <pre>
       * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.Builder, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorTypeOrBuilder> 
          getDoorFieldBuilder() {
        if (doorBuilder_ == null) {
          doorBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorType.Builder, event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType.DoorTypeOrBuilder>(
                  getDoor(),
                  getParentForChildren(),
                  isClean());
          door_ = null;
        }
        return doorBuilder_;
      }

      private event_logging.v4.UserComplexTypeOuterClass.UserComplexType user_;
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.UserComplexTypeOuterClass.UserComplexType, event_logging.v4.UserComplexTypeOuterClass.UserComplexType.Builder, event_logging.v4.UserComplexTypeOuterClass.UserComplexTypeOrBuilder> userBuilder_;
      /**
       * <pre>
       * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType user = 9;</code>
       * @return Whether the user field is set.
       */
      public boolean hasUser() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <pre>
       * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType user = 9;</code>
       * @return The user.
       */
      public event_logging.v4.UserComplexTypeOuterClass.UserComplexType getUser() {
        if (userBuilder_ == null) {
          return user_ == null ? event_logging.v4.UserComplexTypeOuterClass.UserComplexType.getDefaultInstance() : user_;
        } else {
          return userBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType user = 9;</code>
       */
      public Builder setUser(event_logging.v4.UserComplexTypeOuterClass.UserComplexType value) {
        if (userBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          user_ = value;
        } else {
          userBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType user = 9;</code>
       */
      public Builder setUser(
          event_logging.v4.UserComplexTypeOuterClass.UserComplexType.Builder builderForValue) {
        if (userBuilder_ == null) {
          user_ = builderForValue.build();
        } else {
          userBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType user = 9;</code>
       */
      public Builder mergeUser(event_logging.v4.UserComplexTypeOuterClass.UserComplexType value) {
        if (userBuilder_ == null) {
          if (((bitField0_ & 0x00000100) != 0) &&
            user_ != null &&
            user_ != event_logging.v4.UserComplexTypeOuterClass.UserComplexType.getDefaultInstance()) {
            getUserBuilder().mergeFrom(value);
          } else {
            user_ = value;
          }
        } else {
          userBuilder_.mergeFrom(value);
        }
        if (user_ != null) {
          bitField0_ |= 0x00000100;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType user = 9;</code>
       */
      public Builder clearUser() {
        bitField0_ = (bitField0_ & ~0x00000100);
        user_ = null;
        if (userBuilder_ != null) {
          userBuilder_.dispose();
          userBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType user = 9;</code>
       */
      public event_logging.v4.UserComplexTypeOuterClass.UserComplexType.Builder getUserBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getUserFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType user = 9;</code>
       */
      public event_logging.v4.UserComplexTypeOuterClass.UserComplexTypeOrBuilder getUserOrBuilder() {
        if (userBuilder_ != null) {
          return userBuilder_.getMessageOrBuilder();
        } else {
          return user_ == null ?
              event_logging.v4.UserComplexTypeOuterClass.UserComplexType.getDefaultInstance() : user_;
        }
      }
      /**
       * <pre>
       * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType user = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.UserComplexTypeOuterClass.UserComplexType, event_logging.v4.UserComplexTypeOuterClass.UserComplexType.Builder, event_logging.v4.UserComplexTypeOuterClass.UserComplexTypeOrBuilder> 
          getUserFieldBuilder() {
        if (userBuilder_ == null) {
          userBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              event_logging.v4.UserComplexTypeOuterClass.UserComplexType, event_logging.v4.UserComplexTypeOuterClass.UserComplexType.Builder, event_logging.v4.UserComplexTypeOuterClass.UserComplexTypeOrBuilder>(
                  getUser(),
                  getParentForChildren(),
                  isClean());
          user_ = null;
        }
        return userBuilder_;
      }

      private event_logging.v4.UserComplexTypeOuterClass.UserComplexType runAs_;
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.UserComplexTypeOuterClass.UserComplexType, event_logging.v4.UserComplexTypeOuterClass.UserComplexType.Builder, event_logging.v4.UserComplexTypeOuterClass.UserComplexTypeOrBuilder> runAsBuilder_;
      /**
       * <pre>
       * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
       * @return Whether the runAs field is set.
       */
      public boolean hasRunAs() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <pre>
       * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
       * @return The runAs.
       */
      public event_logging.v4.UserComplexTypeOuterClass.UserComplexType getRunAs() {
        if (runAsBuilder_ == null) {
          return runAs_ == null ? event_logging.v4.UserComplexTypeOuterClass.UserComplexType.getDefaultInstance() : runAs_;
        } else {
          return runAsBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
       */
      public Builder setRunAs(event_logging.v4.UserComplexTypeOuterClass.UserComplexType value) {
        if (runAsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          runAs_ = value;
        } else {
          runAsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
       */
      public Builder setRunAs(
          event_logging.v4.UserComplexTypeOuterClass.UserComplexType.Builder builderForValue) {
        if (runAsBuilder_ == null) {
          runAs_ = builderForValue.build();
        } else {
          runAsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
       */
      public Builder mergeRunAs(event_logging.v4.UserComplexTypeOuterClass.UserComplexType value) {
        if (runAsBuilder_ == null) {
          if (((bitField0_ & 0x00000200) != 0) &&
            runAs_ != null &&
            runAs_ != event_logging.v4.UserComplexTypeOuterClass.UserComplexType.getDefaultInstance()) {
            getRunAsBuilder().mergeFrom(value);
          } else {
            runAs_ = value;
          }
        } else {
          runAsBuilder_.mergeFrom(value);
        }
        if (runAs_ != null) {
          bitField0_ |= 0x00000200;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
       */
      public Builder clearRunAs() {
        bitField0_ = (bitField0_ & ~0x00000200);
        runAs_ = null;
        if (runAsBuilder_ != null) {
          runAsBuilder_.dispose();
          runAsBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
       */
      public event_logging.v4.UserComplexTypeOuterClass.UserComplexType.Builder getRunAsBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getRunAsFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
       */
      public event_logging.v4.UserComplexTypeOuterClass.UserComplexTypeOrBuilder getRunAsOrBuilder() {
        if (runAsBuilder_ != null) {
          return runAsBuilder_.getMessageOrBuilder();
        } else {
          return runAs_ == null ?
              event_logging.v4.UserComplexTypeOuterClass.UserComplexType.getDefaultInstance() : runAs_;
        }
      }
      /**
       * <pre>
       * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
       * </pre>
       *
       * <code>.event_logging.v4.UserComplexType run_as = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.UserComplexTypeOuterClass.UserComplexType, event_logging.v4.UserComplexTypeOuterClass.UserComplexType.Builder, event_logging.v4.UserComplexTypeOuterClass.UserComplexTypeOrBuilder> 
          getRunAsFieldBuilder() {
        if (runAsBuilder_ == null) {
          runAsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              event_logging.v4.UserComplexTypeOuterClass.UserComplexType, event_logging.v4.UserComplexTypeOuterClass.UserComplexType.Builder, event_logging.v4.UserComplexTypeOuterClass.UserComplexTypeOrBuilder>(
                  getRunAs(),
                  getParentForChildren(),
                  isClean());
          runAs_ = null;
        }
        return runAsBuilder_;
      }

      private boolean interactive_ ;
      /**
       * <pre>
       * Indicates whether the event was produced as a result of direct interaction, i.e. user was directly responsible for the event being created and was present at the time it was created. This element will be false where an event may have been created after the user was present, e.g. where scheduled processing is performed or an action has been queued for execution later, as is the case when some form of asynchronous processing is used. All interactive events must provide the Id for the user. Can be omitted if true as this is the default.
       * </pre>
       *
       * <code>bool interactive = 11;</code>
       * @return The interactive.
       */
      @java.lang.Override
      public boolean getInteractive() {
        return interactive_;
      }
      /**
       * <pre>
       * Indicates whether the event was produced as a result of direct interaction, i.e. user was directly responsible for the event being created and was present at the time it was created. This element will be false where an event may have been created after the user was present, e.g. where scheduled processing is performed or an action has been queued for execution later, as is the case when some form of asynchronous processing is used. All interactive events must provide the Id for the user. Can be omitted if true as this is the default.
       * </pre>
       *
       * <code>bool interactive = 11;</code>
       * @param value The interactive to set.
       * @return This builder for chaining.
       */
      public Builder setInteractive(boolean value) {

        interactive_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indicates whether the event was produced as a result of direct interaction, i.e. user was directly responsible for the event being created and was present at the time it was created. This element will be false where an event may have been created after the user was present, e.g. where scheduled processing is performed or an action has been queued for execution later, as is the case when some form of asynchronous processing is used. All interactive events must provide the Id for the user. Can be omitted if true as this is the default.
       * </pre>
       *
       * <code>bool interactive = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearInteractive() {
        bitField0_ = (bitField0_ & ~0x00000400);
        interactive_ = false;
        onChanged();
        return this;
      }

      private java.util.List<event_logging.v4.DataComplexTypeOuterClass.DataComplexType> data_ =
        java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000800) != 0)) {
          data_ = new java.util.ArrayList<event_logging.v4.DataComplexTypeOuterClass.DataComplexType>(data_);
          bitField0_ |= 0x00000800;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          event_logging.v4.DataComplexTypeOuterClass.DataComplexType, event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder, event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder> dataBuilder_;

      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<event_logging.v4.DataComplexTypeOuterClass.DataComplexType> getDataList() {
        if (dataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(data_);
        } else {
          return dataBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public int getDataCount() {
        if (dataBuilder_ == null) {
          return data_.size();
        } else {
          return dataBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.DataComplexTypeOuterClass.DataComplexType getData(int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);
        } else {
          return dataBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setData(
          int index, event_logging.v4.DataComplexTypeOuterClass.DataComplexType value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.set(index, value);
          onChanged();
        } else {
          dataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setData(
          int index, event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addData(event_logging.v4.DataComplexTypeOuterClass.DataComplexType value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(value);
          onChanged();
        } else {
          dataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addData(
          int index, event_logging.v4.DataComplexTypeOuterClass.DataComplexType value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(index, value);
          onChanged();
        } else {
          dataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addData(
          event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addData(
          int index, event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends event_logging.v4.DataComplexTypeOuterClass.DataComplexType> values) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, data_);
          onChanged();
        } else {
          dataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public Builder clearData() {
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000800);
          onChanged();
        } else {
          dataBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public Builder removeData(int index) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.remove(index);
          onChanged();
        } else {
          dataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder getDataBuilder(
          int index) {
        return getDataFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder getDataOrBuilder(
          int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);  } else {
          return dataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<? extends event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder> 
           getDataOrBuilderList() {
        if (dataBuilder_ != null) {
          return dataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(data_);
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder addDataBuilder() {
        return getDataFieldBuilder().addBuilder(
            event_logging.v4.DataComplexTypeOuterClass.DataComplexType.getDefaultInstance());
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder addDataBuilder(
          int index) {
        return getDataFieldBuilder().addBuilder(
            index, event_logging.v4.DataComplexTypeOuterClass.DataComplexType.getDefaultInstance());
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 12 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder> 
           getDataBuilderList() {
        return getDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          event_logging.v4.DataComplexTypeOuterClass.DataComplexType, event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder, event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder> 
          getDataFieldBuilder() {
        if (dataBuilder_ == null) {
          dataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              event_logging.v4.DataComplexTypeOuterClass.DataComplexType, event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder, event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder>(
                  data_,
                  ((bitField0_ & 0x00000800) != 0),
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        return dataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:event_logging.v4.EventSourceComplexType)
    }

    // @@protoc_insertion_point(class_scope:event_logging.v4.EventSourceComplexType)
    private static final event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType();
    }

    public static event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EventSourceComplexType>
        PARSER = new com.google.protobuf.AbstractParser<EventSourceComplexType>() {
      @java.lang.Override
      public EventSourceComplexType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EventSourceComplexType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EventSourceComplexType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public event_logging.v4.EventSourceComplexTypeOuterClass.EventSourceComplexType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_event_logging_v4_EventSourceComplexType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_event_logging_v4_EventSourceComplexType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_event_logging_v4_EventSourceComplexType_DoorType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_event_logging_v4_EventSourceComplexType_DoorType_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_event_logging_v4_EventSourceComplexType_DoorType_AddAccessType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_event_logging_v4_EventSourceComplexType_DoorType_AddAccessType_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n0event_logging/v4/event_source_complex_" +
      "type.proto\022\020event_logging.v4\032(event_logg" +
      "ing/v4/data_complex_type.proto\032*event_lo" +
      "gging/v4/device_complex_type.proto\032,even" +
      "t_logging/v4/location_complex_type.proto" +
      "\032*event_logging/v4/system_complex_type.p" +
      "roto\032(event_logging/v4/user_complex_type" +
      ".proto\032\033buf/validate/validate.proto\"\340\006\n\026" +
      "EventSourceComplexType\022\020\n\010event_id\030\001 \001(\t" +
      "\022\022\n\nsession_id\030\002 \001(\t\022;\n\006system\030\003 \001(\0132#.e" +
      "vent_logging.v4.SystemComplexTypeB\006\272H\003\310\001" +
      "\001\022\031\n\tgenerator\030\004 \001(\tB\006\272H\003\310\001\001\022;\n\006device\030\005" +
      " \001(\0132#.event_logging.v4.DeviceComplexTyp" +
      "eB\006\272H\003\310\001\001\0223\n\006client\030\006 \001(\0132#.event_loggin" +
      "g.v4.DeviceComplexType\0223\n\006server\030\007 \001(\0132#" +
      ".event_logging.v4.DeviceComplexType\022?\n\004d" +
      "oor\030\010 \001(\01321.event_logging.v4.EventSource" +
      "ComplexType.DoorType\022/\n\004user\030\t \001(\0132!.eve" +
      "nt_logging.v4.UserComplexType\0221\n\006run_as\030" +
      "\n \001(\0132!.event_logging.v4.UserComplexType" +
      "\022\023\n\013interactive\030\013 \001(\010\0227\n\004data\030\014 \003(\0132!.ev" +
      "ent_logging.v4.DataComplexTypeB\006\272H\003\222\001\000\032\255" +
      "\002\n\010DoorType\022\024\n\004name\030\001 \001(\tB\006\272H\003\310\001\001\022\023\n\013des" +
      "cription\030\002 \001(\t\022?\n\010location\030\003 \001(\0132%.event" +
      "_logging.v4.LocationComplexTypeB\006\272H\003\310\001\001\022" +
      "\024\n\014single_entry\030\004 \001(\010\022\022\n\nremove_all\030\005 \001(" +
      "\010\022[\n\nadd_access\030\006 \001(\0132?.event_logging.v4" +
      ".EventSourceComplexType.DoorType.AddAcce" +
      "ssTypeB\006\272H\003\310\001\001\032.\n\rAddAccessType\022\035\n\013acces" +
      "s_zone\030\001 \003(\tB\010\272H\005\222\001\002\010\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          event_logging.v4.DataComplexTypeOuterClass.getDescriptor(),
          event_logging.v4.DeviceComplexTypeOuterClass.getDescriptor(),
          event_logging.v4.LocationComplexTypeOuterClass.getDescriptor(),
          event_logging.v4.SystemComplexTypeOuterClass.getDescriptor(),
          event_logging.v4.UserComplexTypeOuterClass.getDescriptor(),
          build.buf.validate.ValidateProto.getDescriptor(),
        });
    internal_static_event_logging_v4_EventSourceComplexType_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_event_logging_v4_EventSourceComplexType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_event_logging_v4_EventSourceComplexType_descriptor,
        new java.lang.String[] { "EventId", "SessionId", "System", "Generator", "Device", "Client", "Server", "Door", "User", "RunAs", "Interactive", "Data", });
    internal_static_event_logging_v4_EventSourceComplexType_DoorType_descriptor =
      internal_static_event_logging_v4_EventSourceComplexType_descriptor.getNestedTypes().get(0);
    internal_static_event_logging_v4_EventSourceComplexType_DoorType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_event_logging_v4_EventSourceComplexType_DoorType_descriptor,
        new java.lang.String[] { "Name", "Description", "Location", "SingleEntry", "RemoveAll", "AddAccess", });
    internal_static_event_logging_v4_EventSourceComplexType_DoorType_AddAccessType_descriptor =
      internal_static_event_logging_v4_EventSourceComplexType_DoorType_descriptor.getNestedTypes().get(0);
    internal_static_event_logging_v4_EventSourceComplexType_DoorType_AddAccessType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_event_logging_v4_EventSourceComplexType_DoorType_AddAccessType_descriptor,
        new java.lang.String[] { "AccessZone", });
    descriptor.resolveAllFeaturesImmutable();
    event_logging.v4.DataComplexTypeOuterClass.getDescriptor();
    event_logging.v4.DeviceComplexTypeOuterClass.getDescriptor();
    event_logging.v4.LocationComplexTypeOuterClass.getDescriptor();
    event_logging.v4.SystemComplexTypeOuterClass.getDescriptor();
    event_logging.v4.UserComplexTypeOuterClass.getDescriptor();
    build.buf.validate.ValidateProto.getDescriptor();
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(build.buf.validate.ValidateProto.field);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
