// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/media_complex_type.proto
// Protobuf Java Version: 4.26.1

package event_logging.v4;

public final class MediaComplexTypeOuterClass {
  private MediaComplexTypeOuterClass() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      MediaComplexTypeOuterClass.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface MediaComplexTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:event_logging.v4.MediaComplexType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The type of the removable media, e.g. MemoryCard
     * </pre>
     *
     * <code>.event_logging.v4.MediaTypeSimpleType type = 1 [(.buf.validate.field) = { ... }</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <pre>
     * The type of the removable media, e.g. MemoryCard
     * </pre>
     *
     * <code>.event_logging.v4.MediaTypeSimpleType type = 1 [(.buf.validate.field) = { ... }</code>
     * @return The type.
     */
    event_logging.v4.MediaTypeSimpleTypeOuterClass.MediaTypeSimpleType getType();

    /**
     * <pre>
     * The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.
     * </pre>
     *
     * <code>string id = 2;</code>
     * @return The id.
     */
    java.lang.String getId();
    /**
     * <pre>
     * The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.
     * </pre>
     *
     * <code>string id = 2;</code>
     * @return The bytes for id.
     */
    com.google.protobuf.ByteString
        getIdBytes();

    /**
     * <pre>
     * A friendly name for the media, possibly assigned by device monitoring system..
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The name.
     */
    java.lang.String getName();
    /**
     * <pre>
     * A friendly name for the media, possibly assigned by device monitoring system..
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The bytes for name.
     */
    com.google.protobuf.ByteString
        getNameBytes();

    /**
     * <pre>
     * Indicates if this media is removable, e.g. USB storage device or soft media such as DVD.
     * </pre>
     *
     * <code>bool removable = 4;</code>
     * @return The removable.
     */
    boolean getRemovable();

    /**
     * <pre>
     * Indicates if a device has read-write access. Most devices are read-write so this is assumed to be true and can therefore be omitted where this is the case.
     * </pre>
     *
     * <code>bool read_write = 5;</code>
     * @return The readWrite.
     */
    boolean getReadWrite();

    /**
     * <pre>
     * The capacity of the media in bytes.
     * </pre>
     *
     * <code>uint32 capacity = 6 [(.buf.validate.field) = { ... }</code>
     * @return The capacity.
     */
    int getCapacity();

    /**
     * <pre>
     * The classification of the media.
     * </pre>
     *
     * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
     * @return Whether the classification field is set.
     */
    boolean hasClassification();
    /**
     * <pre>
     * The classification of the media.
     * </pre>
     *
     * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
     * @return The classification.
     */
    event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType getClassification();
    /**
     * <pre>
     * The classification of the media.
     * </pre>
     *
     * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
     */
    event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexTypeOrBuilder getClassificationOrBuilder();

    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
     */
    java.util.List<event_logging.v4.DataComplexTypeOuterClass.DataComplexType> 
        getDataList();
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
     */
    event_logging.v4.DataComplexTypeOuterClass.DataComplexType getData(int index);
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
     */
    int getDataCount();
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
     */
    java.util.List<? extends event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder> 
        getDataOrBuilderList();
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
     */
    event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder getDataOrBuilder(
        int index);
  }
  /**
   * <pre>
   * Used to describe media added or removed from a computer system, or as a location for reading and writing files.
   * </pre>
   *
   * Protobuf type {@code event_logging.v4.MediaComplexType}
   */
  public static final class MediaComplexType extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:event_logging.v4.MediaComplexType)
      MediaComplexTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        MediaComplexType.class.getName());
    }
    // Use MediaComplexType.newBuilder() to construct.
    private MediaComplexType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private MediaComplexType() {
      type_ = 0;
      id_ = "";
      name_ = "";
      data_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return event_logging.v4.MediaComplexTypeOuterClass.internal_static_event_logging_v4_MediaComplexType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return event_logging.v4.MediaComplexTypeOuterClass.internal_static_event_logging_v4_MediaComplexType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType.class, event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType.Builder.class);
    }

    private int bitField0_;
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_ = 0;
    /**
     * <pre>
     * The type of the removable media, e.g. MemoryCard
     * </pre>
     *
     * <code>.event_logging.v4.MediaTypeSimpleType type = 1 [(.buf.validate.field) = { ... }</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * The type of the removable media, e.g. MemoryCard
     * </pre>
     *
     * <code>.event_logging.v4.MediaTypeSimpleType type = 1 [(.buf.validate.field) = { ... }</code>
     * @return The type.
     */
    @java.lang.Override public event_logging.v4.MediaTypeSimpleTypeOuterClass.MediaTypeSimpleType getType() {
      event_logging.v4.MediaTypeSimpleTypeOuterClass.MediaTypeSimpleType result = event_logging.v4.MediaTypeSimpleTypeOuterClass.MediaTypeSimpleType.forNumber(type_);
      return result == null ? event_logging.v4.MediaTypeSimpleTypeOuterClass.MediaTypeSimpleType.UNRECOGNIZED : result;
    }

    public static final int ID_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object id_ = "";
    /**
     * <pre>
     * The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.
     * </pre>
     *
     * <code>string id = 2;</code>
     * @return The id.
     */
    @java.lang.Override
    public java.lang.String getId() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        id_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.
     * </pre>
     *
     * <code>string id = 2;</code>
     * @return The bytes for id.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdBytes() {
      java.lang.Object ref = id_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        id_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int NAME_FIELD_NUMBER = 3;
    @SuppressWarnings("serial")
    private volatile java.lang.Object name_ = "";
    /**
     * <pre>
     * A friendly name for the media, possibly assigned by device monitoring system..
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The name.
     */
    @java.lang.Override
    public java.lang.String getName() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        name_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * A friendly name for the media, possibly assigned by device monitoring system..
     * </pre>
     *
     * <code>string name = 3;</code>
     * @return The bytes for name.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getNameBytes() {
      java.lang.Object ref = name_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        name_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REMOVABLE_FIELD_NUMBER = 4;
    private boolean removable_ = false;
    /**
     * <pre>
     * Indicates if this media is removable, e.g. USB storage device or soft media such as DVD.
     * </pre>
     *
     * <code>bool removable = 4;</code>
     * @return The removable.
     */
    @java.lang.Override
    public boolean getRemovable() {
      return removable_;
    }

    public static final int READ_WRITE_FIELD_NUMBER = 5;
    private boolean readWrite_ = false;
    /**
     * <pre>
     * Indicates if a device has read-write access. Most devices are read-write so this is assumed to be true and can therefore be omitted where this is the case.
     * </pre>
     *
     * <code>bool read_write = 5;</code>
     * @return The readWrite.
     */
    @java.lang.Override
    public boolean getReadWrite() {
      return readWrite_;
    }

    public static final int CAPACITY_FIELD_NUMBER = 6;
    private int capacity_ = 0;
    /**
     * <pre>
     * The capacity of the media in bytes.
     * </pre>
     *
     * <code>uint32 capacity = 6 [(.buf.validate.field) = { ... }</code>
     * @return The capacity.
     */
    @java.lang.Override
    public int getCapacity() {
      return capacity_;
    }

    public static final int CLASSIFICATION_FIELD_NUMBER = 7;
    private event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType classification_;
    /**
     * <pre>
     * The classification of the media.
     * </pre>
     *
     * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
     * @return Whether the classification field is set.
     */
    @java.lang.Override
    public boolean hasClassification() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The classification of the media.
     * </pre>
     *
     * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
     * @return The classification.
     */
    @java.lang.Override
    public event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType getClassification() {
      return classification_ == null ? event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType.getDefaultInstance() : classification_;
    }
    /**
     * <pre>
     * The classification of the media.
     * </pre>
     *
     * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
     */
    @java.lang.Override
    public event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexTypeOrBuilder getClassificationOrBuilder() {
      return classification_ == null ? event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType.getDefaultInstance() : classification_;
    }

    public static final int DATA_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private java.util.List<event_logging.v4.DataComplexTypeOuterClass.DataComplexType> data_;
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<event_logging.v4.DataComplexTypeOuterClass.DataComplexType> getDataList() {
      return data_;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder> 
        getDataOrBuilderList() {
      return data_;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public event_logging.v4.DataComplexTypeOuterClass.DataComplexType getData(int index) {
      return data_.get(index);
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder getDataOrBuilder(
        int index) {
      return data_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != event_logging.v4.MediaTypeSimpleTypeOuterClass.MediaTypeSimpleType.MEDIA_TYPE_SIMPLE_TYPE_UNSPECIFIED.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(id_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, id_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 3, name_);
      }
      if (removable_ != false) {
        output.writeBool(4, removable_);
      }
      if (readWrite_ != false) {
        output.writeBool(5, readWrite_);
      }
      if (capacity_ != 0) {
        output.writeUInt32(6, capacity_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(7, getClassification());
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeMessage(8, data_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != event_logging.v4.MediaTypeSimpleTypeOuterClass.MediaTypeSimpleType.MEDIA_TYPE_SIMPLE_TYPE_UNSPECIFIED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(id_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, id_);
      }
      if (!com.google.protobuf.GeneratedMessage.isStringEmpty(name_)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(3, name_);
      }
      if (removable_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, removable_);
      }
      if (readWrite_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, readWrite_);
      }
      if (capacity_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, capacity_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getClassification());
      }
      for (int i = 0; i < data_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, data_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType)) {
        return super.equals(obj);
      }
      event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType other = (event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType) obj;

      if (type_ != other.type_) return false;
      if (!getId()
          .equals(other.getId())) return false;
      if (!getName()
          .equals(other.getName())) return false;
      if (getRemovable()
          != other.getRemovable()) return false;
      if (getReadWrite()
          != other.getReadWrite()) return false;
      if (getCapacity()
          != other.getCapacity()) return false;
      if (hasClassification() != other.hasClassification()) return false;
      if (hasClassification()) {
        if (!getClassification()
            .equals(other.getClassification())) return false;
      }
      if (!getDataList()
          .equals(other.getDataList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + ID_FIELD_NUMBER;
      hash = (53 * hash) + getId().hashCode();
      hash = (37 * hash) + NAME_FIELD_NUMBER;
      hash = (53 * hash) + getName().hashCode();
      hash = (37 * hash) + REMOVABLE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getRemovable());
      hash = (37 * hash) + READ_WRITE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getReadWrite());
      hash = (37 * hash) + CAPACITY_FIELD_NUMBER;
      hash = (53 * hash) + getCapacity();
      if (hasClassification()) {
        hash = (37 * hash) + CLASSIFICATION_FIELD_NUMBER;
        hash = (53 * hash) + getClassification().hashCode();
      }
      if (getDataCount() > 0) {
        hash = (37 * hash) + DATA_FIELD_NUMBER;
        hash = (53 * hash) + getDataList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Used to describe media added or removed from a computer system, or as a location for reading and writing files.
     * </pre>
     *
     * Protobuf type {@code event_logging.v4.MediaComplexType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:event_logging.v4.MediaComplexType)
        event_logging.v4.MediaComplexTypeOuterClass.MediaComplexTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return event_logging.v4.MediaComplexTypeOuterClass.internal_static_event_logging_v4_MediaComplexType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return event_logging.v4.MediaComplexTypeOuterClass.internal_static_event_logging_v4_MediaComplexType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType.class, event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType.Builder.class);
      }

      // Construct using event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getClassificationFieldBuilder();
          getDataFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        type_ = 0;
        id_ = "";
        name_ = "";
        removable_ = false;
        readWrite_ = false;
        capacity_ = 0;
        classification_ = null;
        if (classificationBuilder_ != null) {
          classificationBuilder_.dispose();
          classificationBuilder_ = null;
        }
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
        } else {
          data_ = null;
          dataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return event_logging.v4.MediaComplexTypeOuterClass.internal_static_event_logging_v4_MediaComplexType_descriptor;
      }

      @java.lang.Override
      public event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType getDefaultInstanceForType() {
        return event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType.getDefaultInstance();
      }

      @java.lang.Override
      public event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType build() {
        event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType buildPartial() {
        event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType result = new event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType result) {
        if (dataBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0)) {
            data_ = java.util.Collections.unmodifiableList(data_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.data_ = data_;
        } else {
          result.data_ = dataBuilder_.build();
        }
      }

      private void buildPartial0(event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.type_ = type_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.id_ = id_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.name_ = name_;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.removable_ = removable_;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.readWrite_ = readWrite_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.capacity_ = capacity_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.classification_ = classificationBuilder_ == null
              ? classification_
              : classificationBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType) {
          return mergeFrom((event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType other) {
        if (other == event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (!other.getId().isEmpty()) {
          id_ = other.id_;
          bitField0_ |= 0x00000002;
          onChanged();
        }
        if (!other.getName().isEmpty()) {
          name_ = other.name_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.getRemovable() != false) {
          setRemovable(other.getRemovable());
        }
        if (other.getReadWrite() != false) {
          setReadWrite(other.getReadWrite());
        }
        if (other.getCapacity() != 0) {
          setCapacity(other.getCapacity());
        }
        if (other.hasClassification()) {
          mergeClassification(other.getClassification());
        }
        if (dataBuilder_ == null) {
          if (!other.data_.isEmpty()) {
            if (data_.isEmpty()) {
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureDataIsMutable();
              data_.addAll(other.data_);
            }
            onChanged();
          }
        } else {
          if (!other.data_.isEmpty()) {
            if (dataBuilder_.isEmpty()) {
              dataBuilder_.dispose();
              dataBuilder_ = null;
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000080);
              dataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDataFieldBuilder() : null;
            } else {
              dataBuilder_.addAllMessages(other.data_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                id_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                name_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 32: {
                removable_ = input.readBool();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 40: {
                readWrite_ = input.readBool();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 48: {
                capacity_ = input.readUInt32();
                bitField0_ |= 0x00000020;
                break;
              } // case 48
              case 58: {
                input.readMessage(
                    getClassificationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 66: {
                event_logging.v4.DataComplexTypeOuterClass.DataComplexType m =
                    input.readMessage(
                        event_logging.v4.DataComplexTypeOuterClass.DataComplexType.parser(),
                        extensionRegistry);
                if (dataBuilder_ == null) {
                  ensureDataIsMutable();
                  data_.add(m);
                } else {
                  dataBuilder_.addMessage(m);
                }
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <pre>
       * The type of the removable media, e.g. MemoryCard
       * </pre>
       *
       * <code>.event_logging.v4.MediaTypeSimpleType type = 1 [(.buf.validate.field) = { ... }</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <pre>
       * The type of the removable media, e.g. MemoryCard
       * </pre>
       *
       * <code>.event_logging.v4.MediaTypeSimpleType type = 1 [(.buf.validate.field) = { ... }</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type of the removable media, e.g. MemoryCard
       * </pre>
       *
       * <code>.event_logging.v4.MediaTypeSimpleType type = 1 [(.buf.validate.field) = { ... }</code>
       * @return The type.
       */
      @java.lang.Override
      public event_logging.v4.MediaTypeSimpleTypeOuterClass.MediaTypeSimpleType getType() {
        event_logging.v4.MediaTypeSimpleTypeOuterClass.MediaTypeSimpleType result = event_logging.v4.MediaTypeSimpleTypeOuterClass.MediaTypeSimpleType.forNumber(type_);
        return result == null ? event_logging.v4.MediaTypeSimpleTypeOuterClass.MediaTypeSimpleType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The type of the removable media, e.g. MemoryCard
       * </pre>
       *
       * <code>.event_logging.v4.MediaTypeSimpleType type = 1 [(.buf.validate.field) = { ... }</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(event_logging.v4.MediaTypeSimpleTypeOuterClass.MediaTypeSimpleType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The type of the removable media, e.g. MemoryCard
       * </pre>
       *
       * <code>.event_logging.v4.MediaTypeSimpleType type = 1 [(.buf.validate.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object id_ = "";
      /**
       * <pre>
       * The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.
       * </pre>
       *
       * <code>string id = 2;</code>
       * @return The id.
       */
      public java.lang.String getId() {
        java.lang.Object ref = id_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          id_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.
       * </pre>
       *
       * <code>string id = 2;</code>
       * @return The bytes for id.
       */
      public com.google.protobuf.ByteString
          getIdBytes() {
        java.lang.Object ref = id_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          id_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.
       * </pre>
       *
       * <code>string id = 2;</code>
       * @param value The id to set.
       * @return This builder for chaining.
       */
      public Builder setId(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        id_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.
       * </pre>
       *
       * <code>string id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearId() {
        id_ = getDefaultInstance().getId();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.
       * </pre>
       *
       * <code>string id = 2;</code>
       * @param value The bytes for id to set.
       * @return This builder for chaining.
       */
      public Builder setIdBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        id_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }

      private java.lang.Object name_ = "";
      /**
       * <pre>
       * A friendly name for the media, possibly assigned by device monitoring system..
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return The name.
       */
      public java.lang.String getName() {
        java.lang.Object ref = name_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          name_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * A friendly name for the media, possibly assigned by device monitoring system..
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return The bytes for name.
       */
      public com.google.protobuf.ByteString
          getNameBytes() {
        java.lang.Object ref = name_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          name_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * A friendly name for the media, possibly assigned by device monitoring system..
       * </pre>
       *
       * <code>string name = 3;</code>
       * @param value The name to set.
       * @return This builder for chaining.
       */
      public Builder setName(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        name_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A friendly name for the media, possibly assigned by device monitoring system..
       * </pre>
       *
       * <code>string name = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearName() {
        name_ = getDefaultInstance().getName();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * A friendly name for the media, possibly assigned by device monitoring system..
       * </pre>
       *
       * <code>string name = 3;</code>
       * @param value The bytes for name to set.
       * @return This builder for chaining.
       */
      public Builder setNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        name_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private boolean removable_ ;
      /**
       * <pre>
       * Indicates if this media is removable, e.g. USB storage device or soft media such as DVD.
       * </pre>
       *
       * <code>bool removable = 4;</code>
       * @return The removable.
       */
      @java.lang.Override
      public boolean getRemovable() {
        return removable_;
      }
      /**
       * <pre>
       * Indicates if this media is removable, e.g. USB storage device or soft media such as DVD.
       * </pre>
       *
       * <code>bool removable = 4;</code>
       * @param value The removable to set.
       * @return This builder for chaining.
       */
      public Builder setRemovable(boolean value) {

        removable_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indicates if this media is removable, e.g. USB storage device or soft media such as DVD.
       * </pre>
       *
       * <code>bool removable = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearRemovable() {
        bitField0_ = (bitField0_ & ~0x00000008);
        removable_ = false;
        onChanged();
        return this;
      }

      private boolean readWrite_ ;
      /**
       * <pre>
       * Indicates if a device has read-write access. Most devices are read-write so this is assumed to be true and can therefore be omitted where this is the case.
       * </pre>
       *
       * <code>bool read_write = 5;</code>
       * @return The readWrite.
       */
      @java.lang.Override
      public boolean getReadWrite() {
        return readWrite_;
      }
      /**
       * <pre>
       * Indicates if a device has read-write access. Most devices are read-write so this is assumed to be true and can therefore be omitted where this is the case.
       * </pre>
       *
       * <code>bool read_write = 5;</code>
       * @param value The readWrite to set.
       * @return This builder for chaining.
       */
      public Builder setReadWrite(boolean value) {

        readWrite_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Indicates if a device has read-write access. Most devices are read-write so this is assumed to be true and can therefore be omitted where this is the case.
       * </pre>
       *
       * <code>bool read_write = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearReadWrite() {
        bitField0_ = (bitField0_ & ~0x00000010);
        readWrite_ = false;
        onChanged();
        return this;
      }

      private int capacity_ ;
      /**
       * <pre>
       * The capacity of the media in bytes.
       * </pre>
       *
       * <code>uint32 capacity = 6 [(.buf.validate.field) = { ... }</code>
       * @return The capacity.
       */
      @java.lang.Override
      public int getCapacity() {
        return capacity_;
      }
      /**
       * <pre>
       * The capacity of the media in bytes.
       * </pre>
       *
       * <code>uint32 capacity = 6 [(.buf.validate.field) = { ... }</code>
       * @param value The capacity to set.
       * @return This builder for chaining.
       */
      public Builder setCapacity(int value) {

        capacity_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The capacity of the media in bytes.
       * </pre>
       *
       * <code>uint32 capacity = 6 [(.buf.validate.field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearCapacity() {
        bitField0_ = (bitField0_ & ~0x00000020);
        capacity_ = 0;
        onChanged();
        return this;
      }

      private event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType classification_;
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType, event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType.Builder, event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexTypeOrBuilder> classificationBuilder_;
      /**
       * <pre>
       * The classification of the media.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
       * @return Whether the classification field is set.
       */
      public boolean hasClassification() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * The classification of the media.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
       * @return The classification.
       */
      public event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType getClassification() {
        if (classificationBuilder_ == null) {
          return classification_ == null ? event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType.getDefaultInstance() : classification_;
        } else {
          return classificationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The classification of the media.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
       */
      public Builder setClassification(event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType value) {
        if (classificationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          classification_ = value;
        } else {
          classificationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The classification of the media.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
       */
      public Builder setClassification(
          event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType.Builder builderForValue) {
        if (classificationBuilder_ == null) {
          classification_ = builderForValue.build();
        } else {
          classificationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The classification of the media.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
       */
      public Builder mergeClassification(event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType value) {
        if (classificationBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0) &&
            classification_ != null &&
            classification_ != event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType.getDefaultInstance()) {
            getClassificationBuilder().mergeFrom(value);
          } else {
            classification_ = value;
          }
        } else {
          classificationBuilder_.mergeFrom(value);
        }
        if (classification_ != null) {
          bitField0_ |= 0x00000040;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The classification of the media.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
       */
      public Builder clearClassification() {
        bitField0_ = (bitField0_ & ~0x00000040);
        classification_ = null;
        if (classificationBuilder_ != null) {
          classificationBuilder_.dispose();
          classificationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The classification of the media.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
       */
      public event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType.Builder getClassificationBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getClassificationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The classification of the media.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
       */
      public event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexTypeOrBuilder getClassificationOrBuilder() {
        if (classificationBuilder_ != null) {
          return classificationBuilder_.getMessageOrBuilder();
        } else {
          return classification_ == null ?
              event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType.getDefaultInstance() : classification_;
        }
      }
      /**
       * <pre>
       * The classification of the media.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType, event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType.Builder, event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexTypeOrBuilder> 
          getClassificationFieldBuilder() {
        if (classificationBuilder_ == null) {
          classificationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType, event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexType.Builder, event_logging.v4.ClassificationComplexTypeOuterClass.ClassificationComplexTypeOrBuilder>(
                  getClassification(),
                  getParentForChildren(),
                  isClean());
          classification_ = null;
        }
        return classificationBuilder_;
      }

      private java.util.List<event_logging.v4.DataComplexTypeOuterClass.DataComplexType> data_ =
        java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          data_ = new java.util.ArrayList<event_logging.v4.DataComplexTypeOuterClass.DataComplexType>(data_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          event_logging.v4.DataComplexTypeOuterClass.DataComplexType, event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder, event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder> dataBuilder_;

      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<event_logging.v4.DataComplexTypeOuterClass.DataComplexType> getDataList() {
        if (dataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(data_);
        } else {
          return dataBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public int getDataCount() {
        if (dataBuilder_ == null) {
          return data_.size();
        } else {
          return dataBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.DataComplexTypeOuterClass.DataComplexType getData(int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);
        } else {
          return dataBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setData(
          int index, event_logging.v4.DataComplexTypeOuterClass.DataComplexType value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.set(index, value);
          onChanged();
        } else {
          dataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public Builder setData(
          int index, event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addData(event_logging.v4.DataComplexTypeOuterClass.DataComplexType value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(value);
          onChanged();
        } else {
          dataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addData(
          int index, event_logging.v4.DataComplexTypeOuterClass.DataComplexType value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(index, value);
          onChanged();
        } else {
          dataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addData(
          event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addData(
          int index, event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends event_logging.v4.DataComplexTypeOuterClass.DataComplexType> values) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, data_);
          onChanged();
        } else {
          dataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public Builder clearData() {
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          dataBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public Builder removeData(int index) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.remove(index);
          onChanged();
        } else {
          dataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder getDataBuilder(
          int index) {
        return getDataFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder getDataOrBuilder(
          int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);  } else {
          return dataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<? extends event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder> 
           getDataOrBuilderList() {
        if (dataBuilder_ != null) {
          return dataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(data_);
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder addDataBuilder() {
        return getDataFieldBuilder().addBuilder(
            event_logging.v4.DataComplexTypeOuterClass.DataComplexType.getDefaultInstance());
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder addDataBuilder(
          int index) {
        return getDataFieldBuilder().addBuilder(
            index, event_logging.v4.DataComplexTypeOuterClass.DataComplexType.getDefaultInstance());
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [(.buf.validate.field) = { ... }</code>
       */
      public java.util.List<event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder> 
           getDataBuilderList() {
        return getDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          event_logging.v4.DataComplexTypeOuterClass.DataComplexType, event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder, event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder> 
          getDataFieldBuilder() {
        if (dataBuilder_ == null) {
          dataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              event_logging.v4.DataComplexTypeOuterClass.DataComplexType, event_logging.v4.DataComplexTypeOuterClass.DataComplexType.Builder, event_logging.v4.DataComplexTypeOuterClass.DataComplexTypeOrBuilder>(
                  data_,
                  ((bitField0_ & 0x00000080) != 0),
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        return dataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:event_logging.v4.MediaComplexType)
    }

    // @@protoc_insertion_point(class_scope:event_logging.v4.MediaComplexType)
    private static final event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType();
    }

    public static event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MediaComplexType>
        PARSER = new com.google.protobuf.AbstractParser<MediaComplexType>() {
      @java.lang.Override
      public MediaComplexType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<MediaComplexType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MediaComplexType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public event_logging.v4.MediaComplexTypeOuterClass.MediaComplexType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_event_logging_v4_MediaComplexType_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_event_logging_v4_MediaComplexType_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)event_logging/v4/media_complex_type.pr" +
      "oto\022\020event_logging.v4\0322event_logging/v4/" +
      "classification_complex_type.proto\032(event" +
      "_logging/v4/data_complex_type.proto\032-eve" +
      "nt_logging/v4/media_type_simple_type.pro" +
      "to\032\033buf/validate/validate.proto\"\251\002\n\020Medi" +
      "aComplexType\022;\n\004type\030\001 \001(\0162%.event_loggi" +
      "ng.v4.MediaTypeSimpleTypeB\006\272H\003\310\001\001\022\n\n\002id\030" +
      "\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\021\n\tremovable\030\004 \001(\010\022\022" +
      "\n\nread_write\030\005 \001(\010\022\031\n\010capacity\030\006 \001(\rB\007\272H" +
      "\004*\002 \000\022C\n\016classification\030\007 \001(\0132+.event_lo" +
      "gging.v4.ClassificationComplexType\0227\n\004da" +
      "ta\030\010 \003(\0132!.event_logging.v4.DataComplexT" +
      "ypeB\006\272H\003\222\001\000b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          event_logging.v4.ClassificationComplexTypeOuterClass.getDescriptor(),
          event_logging.v4.DataComplexTypeOuterClass.getDescriptor(),
          event_logging.v4.MediaTypeSimpleTypeOuterClass.getDescriptor(),
          build.buf.validate.ValidateProto.getDescriptor(),
        });
    internal_static_event_logging_v4_MediaComplexType_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_event_logging_v4_MediaComplexType_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_event_logging_v4_MediaComplexType_descriptor,
        new java.lang.String[] { "Type", "Id", "Name", "Removable", "ReadWrite", "Capacity", "Classification", "Data", });
    descriptor.resolveAllFeaturesImmutable();
    event_logging.v4.ClassificationComplexTypeOuterClass.getDescriptor();
    event_logging.v4.DataComplexTypeOuterClass.getDescriptor();
    event_logging.v4.MediaTypeSimpleTypeOuterClass.getDescriptor();
    build.buf.validate.ValidateProto.getDescriptor();
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(build.buf.validate.ValidateProto.field);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
