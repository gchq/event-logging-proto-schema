// event_logging/v4/resource_complex_type.proto at 0:0
syntax = "proto3";
package event_logging.v4;

import "event_logging/v4/any_content_complex_type.proto";
import "event_logging/v4/classification_complex_type.proto";
import "event_logging/v4/data_complex_type.proto";
import "event_logging/v4/meta_data_tags_complex_type.proto";
import "event_logging/v4/permission_attribute_simple_type.proto";
import "event_logging/v4/user_complex_type.proto";
import "buf/validate/validate.proto";

// Describes a resource within a website or web application, such as an HTML file, image file or script, along with the details of that resource such as size or response codes. It can represent both successful and failed access to the resource object.
message ResourceComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1 [
    (buf.validate.field).repeated = {
      min_items: 0
    }
  ];
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The title of the resource or of the object the resource presents.
  string title = 11;
  // The URL of the resource the event relates to
  string url = 12;
  // The URL of the resource that referred to the URL of this event
  string referrer = 13;
  // The session identifier or token used to identify a session or series of related message exchanges.
  string session_id = 14;
  // The HTTP method, e.g. GET, POST, DELETE, PUT etc
  string http_method = 15;
  // The HTTP version, e.g. 1.1
  string http_version = 16;
  // This is a string provided by the initiating software agent used to identify itself, its application type, operating system, software vendor or software version. This string typically appears as a field in a request message with a field header name of 'User-Agent'.
  string user_agent = 17;
  // The size in bytes received, including the request and HTTP headers.
  uint32 inbound_size = 18 [
    (buf.validate.field).uint32.gte = 0
  ];
  // The size in bytes of the incoming data, EXCLUDING HTTP headers.
  uint32 inbound_content_size = 19 [
    (buf.validate.field).uint32.gte = 0
  ];
  // The HTTP request header.
  string inbound_header = 20;
  // The size in bytes of the outgoing data, including HTTP headers.
  uint32 outbound_size = 21 [
    (buf.validate.field).uint32.gte = 0
  ];
  // The size in bytes of the outgoing data, EXCLUDING HTTP headers.
  uint32 outbound_content_size = 22 [
    (buf.validate.field).uint32.gte = 0
  ];
  // The HTTP response header.
  string outbound_header = 23;
  // The number of microseconds the server took to handle the request.
  uint32 request_time = 24 [
    (buf.validate.field).uint32.gte = 0
  ];
  // The connection status of the client connection.
  string connection_status = 25;
  // The status code of the original request.
  string initial_response_code = 26;
  // The final status code of the request, after any internal redirections may have taken place.
  string response_code = 27;
  // The Internet Media Type identifying the file format of the resource provided (format of request or response body). This string typically appears in the 'Content-Type' field of a Request or Response Header.
  string mime_type = 28;
  // The category of a web page or resource where a categorisation engine is used, e.g. News, Search Engine, Social Media, etc.
  string category = 29;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 30 [
    (buf.validate.field).repeated = {
      min_items: 0
    }
  ];

  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  message PermissionsType {
    // A permission rule associated with an object, e.g. read and write access being granted to a user.
    repeated PermissionType permission = 1 [
      (buf.validate.field).repeated = {
        min_items: 1
      }
    ];
  
    // A permission rule associated with an object, e.g. read and write access being granted to a user.
    message PermissionType {
      // A user that has been granted (or is prevented from having) some form of permission.
      UserComplexType user = 1 [
        (buf.validate.field).required = true
      ];
      // A named group of users that has been granted (or is prevented from having) some form of permission.
      GroupComplexType group = 2 [
        (buf.validate.field).required = true
      ];
      // The permission attributes that have been explicitly allowed.
      repeated PermissionAttributeSimpleType allow = 11 [
        (buf.validate.field).repeated = {
          min_items: 0
        }
      ];
      // The permission attributes that have been explicitly denied.
      repeated PermissionAttributeSimpleType deny = 12 [
        (buf.validate.field).repeated = {
          min_items: 0
        }
      ];
    }
  }
}
