// event_logging/v4/document_complex_type.proto at 0:0
syntax = "proto3";
package event_logging.v4;

import "event_logging/v4/any_content_complex_type.proto";
import "event_logging/v4/classification_complex_type.proto";
import "event_logging/v4/data_complex_type.proto";
import "event_logging/v4/meta_data_tags_complex_type.proto";
import "event_logging/v4/permission_attribute_simple_type.proto";
import "event_logging/v4/user_complex_type.proto";
import "buf/validate/validate.proto";

// Describes a document that may be stored electronically or in hard-copy form.
message DocumentComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1 [
    (buf.validate.field).repeated = {
      min_items: 0
    }
  ];
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The title or name of the document.
  string title = 11;
  // A unique code or ID that can be used to reference the document.
  string reference = 12;
  // The version or iteration of the document, e.g. v13 or v1.3.
  string version = 13;
  // The path that defines the location of the document on a file system or document management system, e.g. '/some/path/to/the/document.pdf'
  string path = 14;
  // The date that the document was created.
  uint64 created = 15;
  // The date that the document was last modified.
  uint64 modified = 16;
  // The date that the document was last accessed.
  uint64 accessed = 17;
  // The number of pages in the document.
  uint32 pages = 18 [
    (buf.validate.field).uint32.gte = 0
  ];
  // The size of the document in bytes.
  uint32 size = 19 [
    (buf.validate.field).uint32.gte = 0
  ];
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 20 [
    (buf.validate.field).repeated = {
      min_items: 0
    }
  ];

  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  message PermissionsType {
    // A permission rule associated with an object, e.g. read and write access being granted to a user.
    repeated PermissionType permission = 1 [
      (buf.validate.field).repeated = {
        min_items: 1
      }
    ];
  
    // A permission rule associated with an object, e.g. read and write access being granted to a user.
    message PermissionType {
      // A user that has been granted (or is prevented from having) some form of permission.
      UserComplexType user = 1 [
        (buf.validate.field).required = true
      ];
      // A named group of users that has been granted (or is prevented from having) some form of permission.
      GroupComplexType group = 2 [
        (buf.validate.field).required = true
      ];
      // The permission attributes that have been explicitly allowed.
      repeated PermissionAttributeSimpleType allow = 11 [
        (buf.validate.field).repeated = {
          min_items: 0
        }
      ];
      // The permission attributes that have been explicitly denied.
      repeated PermissionAttributeSimpleType deny = 12 [
        (buf.validate.field).repeated = {
          min_items: 0
        }
      ];
    }
  }
}
