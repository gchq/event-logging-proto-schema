// event_logging/v4/logic_complex_type.proto at 0:0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: event_logging/v4/logic_complex_type.proto

package event_loggingv4

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All of the enclosed items are to be treated as being AND together.
type AndComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChoiceWrapper []*AndComplexType_ChoiceWrapperAndComplexType `protobuf:"bytes,1,rep,name=choice_wrapper,json=choiceWrapper,proto3" json:"choice_wrapper,omitempty"`
}

func (x *AndComplexType) Reset() {
	*x = AndComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_logic_complex_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndComplexType) ProtoMessage() {}

func (x *AndComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_logic_complex_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndComplexType.ProtoReflect.Descriptor instead.
func (*AndComplexType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_logic_complex_type_proto_rawDescGZIP(), []int{0}
}

func (x *AndComplexType) GetChoiceWrapper() []*AndComplexType_ChoiceWrapperAndComplexType {
	if x != nil {
		return x.ChoiceWrapper
	}
	return nil
}

// The enclosed structure operators and terms are negated.
type NotComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChoiceWrapper []*NotComplexType_ChoiceWrapperNotComplexType `protobuf:"bytes,1,rep,name=choice_wrapper,json=choiceWrapper,proto3" json:"choice_wrapper,omitempty"`
}

func (x *NotComplexType) Reset() {
	*x = NotComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_logic_complex_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotComplexType) ProtoMessage() {}

func (x *NotComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_logic_complex_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotComplexType.ProtoReflect.Descriptor instead.
func (*NotComplexType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_logic_complex_type_proto_rawDescGZIP(), []int{1}
}

func (x *NotComplexType) GetChoiceWrapper() []*NotComplexType_ChoiceWrapperNotComplexType {
	if x != nil {
		return x.ChoiceWrapper
	}
	return nil
}

// All of the enclosed items are to be treated as being OR together.
type OrComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChoiceWrapper []*OrComplexType_ChoiceWrapperOrComplexType `protobuf:"bytes,1,rep,name=choice_wrapper,json=choiceWrapper,proto3" json:"choice_wrapper,omitempty"`
}

func (x *OrComplexType) Reset() {
	*x = OrComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_logic_complex_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrComplexType) ProtoMessage() {}

func (x *OrComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_logic_complex_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrComplexType.ProtoReflect.Descriptor instead.
func (*OrComplexType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_logic_complex_type_proto_rawDescGZIP(), []int{2}
}

func (x *OrComplexType) GetChoiceWrapper() []*OrComplexType_ChoiceWrapperOrComplexType {
	if x != nil {
		return x.ChoiceWrapper
	}
	return nil
}

type AndComplexType_ChoiceWrapperAndComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
	Term *TermComplexType `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	// All of the enclosed items are to be treated as being AND'd together.
	And *AndComplexType `protobuf:"bytes,2,opt,name=and,proto3" json:"and,omitempty"`
	// All of the enclosed items are to be treated as being OR'd together.
	Or *OrComplexType `protobuf:"bytes,3,opt,name=or,proto3" json:"or,omitempty"`
	// The enclosed structure operators and terms are negated.
	Not *NotComplexType `protobuf:"bytes,4,opt,name=not,proto3" json:"not,omitempty"`
}

func (x *AndComplexType_ChoiceWrapperAndComplexType) Reset() {
	*x = AndComplexType_ChoiceWrapperAndComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_logic_complex_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AndComplexType_ChoiceWrapperAndComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AndComplexType_ChoiceWrapperAndComplexType) ProtoMessage() {}

func (x *AndComplexType_ChoiceWrapperAndComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_logic_complex_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AndComplexType_ChoiceWrapperAndComplexType.ProtoReflect.Descriptor instead.
func (*AndComplexType_ChoiceWrapperAndComplexType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_logic_complex_type_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AndComplexType_ChoiceWrapperAndComplexType) GetTerm() *TermComplexType {
	if x != nil {
		return x.Term
	}
	return nil
}

func (x *AndComplexType_ChoiceWrapperAndComplexType) GetAnd() *AndComplexType {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *AndComplexType_ChoiceWrapperAndComplexType) GetOr() *OrComplexType {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *AndComplexType_ChoiceWrapperAndComplexType) GetNot() *NotComplexType {
	if x != nil {
		return x.Not
	}
	return nil
}

type NotComplexType_ChoiceWrapperNotComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
	Term *TermComplexType `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	// All of the enclosed items are to be treated as being AND'd together.
	And *AndComplexType `protobuf:"bytes,2,opt,name=and,proto3" json:"and,omitempty"`
	// All of the enclosed items are to be treated as being OR'd together.
	Or *OrComplexType `protobuf:"bytes,3,opt,name=or,proto3" json:"or,omitempty"`
	// The enclosed structure operators and terms are negated.
	Not *NotComplexType `protobuf:"bytes,4,opt,name=not,proto3" json:"not,omitempty"`
}

func (x *NotComplexType_ChoiceWrapperNotComplexType) Reset() {
	*x = NotComplexType_ChoiceWrapperNotComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_logic_complex_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotComplexType_ChoiceWrapperNotComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotComplexType_ChoiceWrapperNotComplexType) ProtoMessage() {}

func (x *NotComplexType_ChoiceWrapperNotComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_logic_complex_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotComplexType_ChoiceWrapperNotComplexType.ProtoReflect.Descriptor instead.
func (*NotComplexType_ChoiceWrapperNotComplexType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_logic_complex_type_proto_rawDescGZIP(), []int{1, 0}
}

func (x *NotComplexType_ChoiceWrapperNotComplexType) GetTerm() *TermComplexType {
	if x != nil {
		return x.Term
	}
	return nil
}

func (x *NotComplexType_ChoiceWrapperNotComplexType) GetAnd() *AndComplexType {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *NotComplexType_ChoiceWrapperNotComplexType) GetOr() *OrComplexType {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *NotComplexType_ChoiceWrapperNotComplexType) GetNot() *NotComplexType {
	if x != nil {
		return x.Not
	}
	return nil
}

type OrComplexType_ChoiceWrapperOrComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
	Term *TermComplexType `protobuf:"bytes,1,opt,name=term,proto3" json:"term,omitempty"`
	// All of the enclosed items are to be treated as being AND'd together.
	And *AndComplexType `protobuf:"bytes,2,opt,name=and,proto3" json:"and,omitempty"`
	// All of the enclosed items are to be treated as being OR'd together.
	Or *OrComplexType `protobuf:"bytes,3,opt,name=or,proto3" json:"or,omitempty"`
	// The enclosed structure operators and terms are negated.
	Not *NotComplexType `protobuf:"bytes,4,opt,name=not,proto3" json:"not,omitempty"`
}

func (x *OrComplexType_ChoiceWrapperOrComplexType) Reset() {
	*x = OrComplexType_ChoiceWrapperOrComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_logic_complex_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrComplexType_ChoiceWrapperOrComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrComplexType_ChoiceWrapperOrComplexType) ProtoMessage() {}

func (x *OrComplexType_ChoiceWrapperOrComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_logic_complex_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrComplexType_ChoiceWrapperOrComplexType.ProtoReflect.Descriptor instead.
func (*OrComplexType_ChoiceWrapperOrComplexType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_logic_complex_type_proto_rawDescGZIP(), []int{2, 0}
}

func (x *OrComplexType_ChoiceWrapperOrComplexType) GetTerm() *TermComplexType {
	if x != nil {
		return x.Term
	}
	return nil
}

func (x *OrComplexType_ChoiceWrapperOrComplexType) GetAnd() *AndComplexType {
	if x != nil {
		return x.And
	}
	return nil
}

func (x *OrComplexType_ChoiceWrapperOrComplexType) GetOr() *OrComplexType {
	if x != nil {
		return x.Or
	}
	return nil
}

func (x *OrComplexType_ChoiceWrapperOrComplexType) GetNot() *NotComplexType {
	if x != nil {
		return x.Not
	}
	return nil
}

var File_event_logging_v4_logic_complex_type_proto protoreflect.FileDescriptor

var file_event_logging_v4_logic_complex_type_proto_rawDesc = []byte{
	0x0a, 0x29, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x34, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x1a, 0x28, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x2f,
	0x74, 0x65, 0x72, 0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xef, 0x02, 0x0a, 0x0e, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x0e, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41,
	0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0xed, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x32, 0x0a,
	0x03, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x61, 0x6e,
	0x64, 0x12, 0x2f, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02,
	0x6f, 0x72, 0x12, 0x32, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x22, 0xef, 0x02, 0x0a, 0x0e, 0x4e, 0x6f, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6d, 0x0a, 0x0e, 0x63, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42,
	0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0xed, 0x01, 0x0a, 0x1b, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12,
	0x32, 0x0a, 0x03, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e,
	0x41, 0x6e, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03,
	0x61, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x02, 0x6f, 0x72, 0x12, 0x32, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x22, 0xeb, 0x02, 0x0a, 0x0d, 0x4f, 0x72, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6b, 0x0a, 0x0e, 0x63, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08,
	0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0x52, 0x0d, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x1a, 0xec, 0x01, 0x0a, 0x1a, 0x43, 0x68, 0x6f, 0x69,
	0x63, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x65, 0x72, 0x6d, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x32, 0x0a,
	0x03, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6e,
	0x64, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x61, 0x6e,
	0x64, 0x12, 0x2f, 0x0a, 0x02, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x4f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x02,
	0x6f, 0x72, 0x12, 0x32, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x4e, 0x6f, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x42, 0xd9, 0x01, 0x0a, 0x1c, 0x75, 0x6b, 0x2e, 0x67, 0x6f,
	0x76, 0x2e, 0x67, 0x63, 0x68, 0x71, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x42, 0x15, 0x4c, 0x6f, 0x67, 0x69, 0x63, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x63, 0x68,
	0x71, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2d,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x76, 0x34, 0xa2, 0x02, 0x03, 0x45, 0x58, 0x58, 0xaa, 0x02, 0x0f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x34, 0xca,
	0x02, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5c, 0x56,
	0x34, 0xe2, 0x02, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x5c, 0x56, 0x34, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x3a, 0x3a,
	0x56, 0x34, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_logging_v4_logic_complex_type_proto_rawDescOnce sync.Once
	file_event_logging_v4_logic_complex_type_proto_rawDescData = file_event_logging_v4_logic_complex_type_proto_rawDesc
)

func file_event_logging_v4_logic_complex_type_proto_rawDescGZIP() []byte {
	file_event_logging_v4_logic_complex_type_proto_rawDescOnce.Do(func() {
		file_event_logging_v4_logic_complex_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_logging_v4_logic_complex_type_proto_rawDescData)
	})
	return file_event_logging_v4_logic_complex_type_proto_rawDescData
}

var file_event_logging_v4_logic_complex_type_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_event_logging_v4_logic_complex_type_proto_goTypes = []interface{}{
	(*AndComplexType)(nil),                             // 0: event_logging.v4.AndComplexType
	(*NotComplexType)(nil),                             // 1: event_logging.v4.NotComplexType
	(*OrComplexType)(nil),                              // 2: event_logging.v4.OrComplexType
	(*AndComplexType_ChoiceWrapperAndComplexType)(nil), // 3: event_logging.v4.AndComplexType.ChoiceWrapperAndComplexType
	(*NotComplexType_ChoiceWrapperNotComplexType)(nil), // 4: event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType
	(*OrComplexType_ChoiceWrapperOrComplexType)(nil),   // 5: event_logging.v4.OrComplexType.ChoiceWrapperOrComplexType
	(*TermComplexType)(nil),                            // 6: event_logging.v4.TermComplexType
}
var file_event_logging_v4_logic_complex_type_proto_depIdxs = []int32{
	3,  // 0: event_logging.v4.AndComplexType.choice_wrapper:type_name -> event_logging.v4.AndComplexType.ChoiceWrapperAndComplexType
	4,  // 1: event_logging.v4.NotComplexType.choice_wrapper:type_name -> event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType
	5,  // 2: event_logging.v4.OrComplexType.choice_wrapper:type_name -> event_logging.v4.OrComplexType.ChoiceWrapperOrComplexType
	6,  // 3: event_logging.v4.AndComplexType.ChoiceWrapperAndComplexType.term:type_name -> event_logging.v4.TermComplexType
	0,  // 4: event_logging.v4.AndComplexType.ChoiceWrapperAndComplexType.and:type_name -> event_logging.v4.AndComplexType
	2,  // 5: event_logging.v4.AndComplexType.ChoiceWrapperAndComplexType.or:type_name -> event_logging.v4.OrComplexType
	1,  // 6: event_logging.v4.AndComplexType.ChoiceWrapperAndComplexType.not:type_name -> event_logging.v4.NotComplexType
	6,  // 7: event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.term:type_name -> event_logging.v4.TermComplexType
	0,  // 8: event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.and:type_name -> event_logging.v4.AndComplexType
	2,  // 9: event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.or:type_name -> event_logging.v4.OrComplexType
	1,  // 10: event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.not:type_name -> event_logging.v4.NotComplexType
	6,  // 11: event_logging.v4.OrComplexType.ChoiceWrapperOrComplexType.term:type_name -> event_logging.v4.TermComplexType
	0,  // 12: event_logging.v4.OrComplexType.ChoiceWrapperOrComplexType.and:type_name -> event_logging.v4.AndComplexType
	2,  // 13: event_logging.v4.OrComplexType.ChoiceWrapperOrComplexType.or:type_name -> event_logging.v4.OrComplexType
	1,  // 14: event_logging.v4.OrComplexType.ChoiceWrapperOrComplexType.not:type_name -> event_logging.v4.NotComplexType
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_event_logging_v4_logic_complex_type_proto_init() }
func file_event_logging_v4_logic_complex_type_proto_init() {
	if File_event_logging_v4_logic_complex_type_proto != nil {
		return
	}
	file_event_logging_v4_term_complex_type_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_event_logging_v4_logic_complex_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_logic_complex_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_logic_complex_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_logic_complex_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AndComplexType_ChoiceWrapperAndComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_logic_complex_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotComplexType_ChoiceWrapperNotComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_logic_complex_type_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrComplexType_ChoiceWrapperOrComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_logging_v4_logic_complex_type_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_logging_v4_logic_complex_type_proto_goTypes,
		DependencyIndexes: file_event_logging_v4_logic_complex_type_proto_depIdxs,
		MessageInfos:      file_event_logging_v4_logic_complex_type_proto_msgTypes,
	}.Build()
	File_event_logging_v4_logic_complex_type_proto = out.File
	file_event_logging_v4_logic_complex_type_proto_rawDesc = nil
	file_event_logging_v4_logic_complex_type_proto_goTypes = nil
	file_event_logging_v4_logic_complex_type_proto_depIdxs = nil
}
