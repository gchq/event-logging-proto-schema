// event_logging/v4/user_complex_type.proto at 0:0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: event_logging/v4/user_complex_type.proto

package event_loggingv4

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A group entity, e.g. a user group, an access control group or a named group of some kind that ties together a collection of entities/objects of some kind.
type GroupComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
	Meta []*AnyContentComplexType `protobuf:"bytes,1,rep,name=meta,proto3" json:"meta,omitempty"`
	// The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the object, e.g. a filename.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable description of what the object is.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
	Classification *ClassificationComplexType `protobuf:"bytes,6,opt,name=classification,proto3" json:"classification,omitempty"`
	// Any state information about the object, e.g. 'Archived'.
	State string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	// Any groups associated with the object, e.g. group membership of a user account.
	Groups *GroupsComplexType `protobuf:"bytes,8,opt,name=groups,proto3" json:"groups,omitempty"`
	// The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
	Permissions *GroupComplexType_PermissionsType `protobuf:"bytes,9,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
	Tags *MetaDataTagsComplexType `protobuf:"bytes,10,opt,name=tags,proto3" json:"tags,omitempty"`
	// Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
	Data []*DataComplexType `protobuf:"bytes,11,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *GroupComplexType) Reset() {
	*x = GroupComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupComplexType) ProtoMessage() {}

func (x *GroupComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupComplexType.ProtoReflect.Descriptor instead.
func (*GroupComplexType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_user_complex_type_proto_rawDescGZIP(), []int{0}
}

func (x *GroupComplexType) GetMeta() []*AnyContentComplexType {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *GroupComplexType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *GroupComplexType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GroupComplexType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GroupComplexType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GroupComplexType) GetClassification() *ClassificationComplexType {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *GroupComplexType) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *GroupComplexType) GetGroups() *GroupsComplexType {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *GroupComplexType) GetPermissions() *GroupComplexType_PermissionsType {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *GroupComplexType) GetTags() *MetaDataTagsComplexType {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *GroupComplexType) GetData() []*DataComplexType {
	if x != nil {
		return x.Data
	}
	return nil
}

// Describes a collection of group entities, e.g. user groups or access control groups.
type GroupsComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more group entities, e.g. user groups or access control groups.
	Group []*GroupComplexType `protobuf:"bytes,1,rep,name=group,proto3" json:"group,omitempty"`
}

func (x *GroupsComplexType) Reset() {
	*x = GroupsComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupsComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupsComplexType) ProtoMessage() {}

func (x *GroupsComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupsComplexType.ProtoReflect.Descriptor instead.
func (*GroupsComplexType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_user_complex_type_proto_rawDescGZIP(), []int{1}
}

func (x *GroupsComplexType) GetGroup() []*GroupComplexType {
	if x != nil {
		return x.Group
	}
	return nil
}

// Describes a user entity that may represent a human or be a processing user account.
type UserComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
	Meta []*AnyContentComplexType `protobuf:"bytes,1,rep,name=meta,proto3" json:"meta,omitempty"`
	// The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
	Id string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	// The name of the object, e.g. a filename.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// Human readable description of what the object is.
	Description string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	// Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
	Classification *ClassificationComplexType `protobuf:"bytes,6,opt,name=classification,proto3" json:"classification,omitempty"`
	// Any state information about the object, e.g. 'Archived'.
	State string `protobuf:"bytes,7,opt,name=state,proto3" json:"state,omitempty"`
	// Any groups associated with the object, e.g. group membership of a user account.
	Groups *GroupsComplexType `protobuf:"bytes,8,opt,name=groups,proto3" json:"groups,omitempty"`
	// The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
	Permissions *UserComplexType_PermissionsType `protobuf:"bytes,9,opt,name=permissions,proto3" json:"permissions,omitempty"`
	// Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
	Tags *MetaDataTagsComplexType `protobuf:"bytes,10,opt,name=tags,proto3" json:"tags,omitempty"`
	// The security domain that the user exists within, e.g. an Active Directory or OpenLDAP domain.
	Domain string `protobuf:"bytes,11,opt,name=domain,proto3" json:"domain,omitempty"`
	// The email address of the user.
	EmailAddress string `protobuf:"bytes,12,opt,name=email_address,json=emailAddress,proto3" json:"email_address,omitempty"`
	// The details of the person represented by the user account or identity.
	UserDetails *UserDetailsComplexType `protobuf:"bytes,13,opt,name=user_details,json=userDetails,proto3" json:"user_details,omitempty"`
	// Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
	Data []*DataComplexType `protobuf:"bytes,14,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *UserComplexType) Reset() {
	*x = UserComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserComplexType) ProtoMessage() {}

func (x *UserComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserComplexType.ProtoReflect.Descriptor instead.
func (*UserComplexType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_user_complex_type_proto_rawDescGZIP(), []int{2}
}

func (x *UserComplexType) GetMeta() []*AnyContentComplexType {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *UserComplexType) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *UserComplexType) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *UserComplexType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserComplexType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UserComplexType) GetClassification() *ClassificationComplexType {
	if x != nil {
		return x.Classification
	}
	return nil
}

func (x *UserComplexType) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *UserComplexType) GetGroups() *GroupsComplexType {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *UserComplexType) GetPermissions() *UserComplexType_PermissionsType {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *UserComplexType) GetTags() *MetaDataTagsComplexType {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *UserComplexType) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UserComplexType) GetEmailAddress() string {
	if x != nil {
		return x.EmailAddress
	}
	return ""
}

func (x *UserComplexType) GetUserDetails() *UserDetailsComplexType {
	if x != nil {
		return x.UserDetails
	}
	return nil
}

func (x *UserComplexType) GetData() []*DataComplexType {
	if x != nil {
		return x.Data
	}
	return nil
}

// The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
type GroupComplexType_PermissionsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A permission rule associated with an object, e.g. read and write access being granted to a user.
	Permission []*GroupComplexType_PermissionsType_PermissionType `protobuf:"bytes,1,rep,name=permission,proto3" json:"permission,omitempty"`
}

func (x *GroupComplexType_PermissionsType) Reset() {
	*x = GroupComplexType_PermissionsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupComplexType_PermissionsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupComplexType_PermissionsType) ProtoMessage() {}

func (x *GroupComplexType_PermissionsType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupComplexType_PermissionsType.ProtoReflect.Descriptor instead.
func (*GroupComplexType_PermissionsType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_user_complex_type_proto_rawDescGZIP(), []int{0, 0}
}

func (x *GroupComplexType_PermissionsType) GetPermission() []*GroupComplexType_PermissionsType_PermissionType {
	if x != nil {
		return x.Permission
	}
	return nil
}

// A permission rule associated with an object, e.g. read and write access being granted to a user.
type GroupComplexType_PermissionsType_PermissionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user that has been granted (or is prevented from having) some form of permission.
	User *UserComplexType `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// A named group of users that has been granted (or is prevented from having) some form of permission.
	Group *GroupComplexType `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	// The permission attributes that have been explicitly allowed.
	Allow []PermissionAttributeSimpleType `protobuf:"varint,11,rep,packed,name=allow,proto3,enum=event_logging.v4.PermissionAttributeSimpleType" json:"allow,omitempty"`
	// The permission attributes that have been explicitly denied.
	Deny []PermissionAttributeSimpleType `protobuf:"varint,12,rep,packed,name=deny,proto3,enum=event_logging.v4.PermissionAttributeSimpleType" json:"deny,omitempty"`
}

func (x *GroupComplexType_PermissionsType_PermissionType) Reset() {
	*x = GroupComplexType_PermissionsType_PermissionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupComplexType_PermissionsType_PermissionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupComplexType_PermissionsType_PermissionType) ProtoMessage() {}

func (x *GroupComplexType_PermissionsType_PermissionType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupComplexType_PermissionsType_PermissionType.ProtoReflect.Descriptor instead.
func (*GroupComplexType_PermissionsType_PermissionType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_user_complex_type_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *GroupComplexType_PermissionsType_PermissionType) GetUser() *UserComplexType {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *GroupComplexType_PermissionsType_PermissionType) GetGroup() *GroupComplexType {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *GroupComplexType_PermissionsType_PermissionType) GetAllow() []PermissionAttributeSimpleType {
	if x != nil {
		return x.Allow
	}
	return nil
}

func (x *GroupComplexType_PermissionsType_PermissionType) GetDeny() []PermissionAttributeSimpleType {
	if x != nil {
		return x.Deny
	}
	return nil
}

// The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
type UserComplexType_PermissionsType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A permission rule associated with an object, e.g. read and write access being granted to a user.
	Permission []*UserComplexType_PermissionsType_PermissionType `protobuf:"bytes,1,rep,name=permission,proto3" json:"permission,omitempty"`
}

func (x *UserComplexType_PermissionsType) Reset() {
	*x = UserComplexType_PermissionsType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserComplexType_PermissionsType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserComplexType_PermissionsType) ProtoMessage() {}

func (x *UserComplexType_PermissionsType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserComplexType_PermissionsType.ProtoReflect.Descriptor instead.
func (*UserComplexType_PermissionsType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_user_complex_type_proto_rawDescGZIP(), []int{2, 0}
}

func (x *UserComplexType_PermissionsType) GetPermission() []*UserComplexType_PermissionsType_PermissionType {
	if x != nil {
		return x.Permission
	}
	return nil
}

// A permission rule associated with an object, e.g. read and write access being granted to a user.
type UserComplexType_PermissionsType_PermissionType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A user that has been granted (or is prevented from having) some form of permission.
	User *UserComplexType `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// A named group of users that has been granted (or is prevented from having) some form of permission.
	Group *GroupComplexType `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	// The permission attributes that have been explicitly allowed.
	Allow []PermissionAttributeSimpleType `protobuf:"varint,11,rep,packed,name=allow,proto3,enum=event_logging.v4.PermissionAttributeSimpleType" json:"allow,omitempty"`
	// The permission attributes that have been explicitly denied.
	Deny []PermissionAttributeSimpleType `protobuf:"varint,12,rep,packed,name=deny,proto3,enum=event_logging.v4.PermissionAttributeSimpleType" json:"deny,omitempty"`
}

func (x *UserComplexType_PermissionsType_PermissionType) Reset() {
	*x = UserComplexType_PermissionsType_PermissionType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserComplexType_PermissionsType_PermissionType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserComplexType_PermissionsType_PermissionType) ProtoMessage() {}

func (x *UserComplexType_PermissionsType_PermissionType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_user_complex_type_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserComplexType_PermissionsType_PermissionType.ProtoReflect.Descriptor instead.
func (*UserComplexType_PermissionsType_PermissionType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_user_complex_type_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *UserComplexType_PermissionsType_PermissionType) GetUser() *UserComplexType {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *UserComplexType_PermissionsType_PermissionType) GetGroup() *GroupComplexType {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *UserComplexType_PermissionsType_PermissionType) GetAllow() []PermissionAttributeSimpleType {
	if x != nil {
		return x.Allow
	}
	return nil
}

func (x *UserComplexType_PermissionsType_PermissionType) GetDeny() []PermissionAttributeSimpleType {
	if x != nil {
		return x.Deny
	}
	return nil
}

var File_event_logging_v4_user_complex_type_proto protoreflect.FileDescriptor

var file_event_logging_v4_user_complex_type_proto_rawDesc = []byte{
	0x0a, 0x28, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x34, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x1a, 0x2f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x2f, 0x61,
	0x6e, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x2f,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x28, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x34, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x2f, 0x6d, 0x65,
	0x74, 0x61, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x37, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76,
	0x34, 0x2f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x5f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x30, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf4, 0x07, 0x0a, 0x10, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x04,
	0x6d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6e,
	0x79, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0x52, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a,
	0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x54, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x44, 0x61, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x00, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xc0, 0x03, 0x0a, 0x0f,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x6b, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0xbf, 0x02, 0x0a,
	0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x40,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x12, 0x56, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x0f, 0xba, 0x48, 0x0c, 0x92, 0x01, 0x09, 0x08, 0x00, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x54, 0x0a, 0x04, 0x64, 0x65, 0x6e, 0x79,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0x92, 0x01, 0x09, 0x08,
	0x00, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x22, 0x57,
	0x0a, 0x11, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xfb, 0x08, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x04, 0x6d,
	0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6e, 0x79,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0x52, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x53, 0x0a, 0x0e,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0e, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x53, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4b, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x1a, 0xbf, 0x03, 0x0a, 0x0f, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x6a, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba,
	0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x1a, 0xbf, 0x02, 0x0a, 0x0e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x56, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x53, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f, 0xba, 0x48, 0x0c, 0x92, 0x01, 0x09, 0x08,
	0x00, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x12,
	0x54, 0x0a, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2f, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x42, 0x0f,
	0xba, 0x48, 0x0c, 0x92, 0x01, 0x09, 0x08, 0x00, 0x22, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52,
	0x04, 0x64, 0x65, 0x6e, 0x79, 0x42, 0xd8, 0x01, 0x0a, 0x1c, 0x75, 0x6b, 0x2e, 0x67, 0x6f, 0x76,
	0x2e, 0x67, 0x63, 0x68, 0x71, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x42, 0x14, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x63, 0x68, 0x71, 0x2f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x34, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x76, 0x34, 0xa2, 0x02, 0x03, 0x45, 0x58, 0x58, 0xaa, 0x02, 0x0f, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x34, 0xca, 0x02, 0x0f,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x34, 0xe2,
	0x02, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5c, 0x56,
	0x34, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x34,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_logging_v4_user_complex_type_proto_rawDescOnce sync.Once
	file_event_logging_v4_user_complex_type_proto_rawDescData = file_event_logging_v4_user_complex_type_proto_rawDesc
)

func file_event_logging_v4_user_complex_type_proto_rawDescGZIP() []byte {
	file_event_logging_v4_user_complex_type_proto_rawDescOnce.Do(func() {
		file_event_logging_v4_user_complex_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_logging_v4_user_complex_type_proto_rawDescData)
	})
	return file_event_logging_v4_user_complex_type_proto_rawDescData
}

var file_event_logging_v4_user_complex_type_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_event_logging_v4_user_complex_type_proto_goTypes = []interface{}{
	(*GroupComplexType)(nil),                                // 0: event_logging.v4.GroupComplexType
	(*GroupsComplexType)(nil),                               // 1: event_logging.v4.GroupsComplexType
	(*UserComplexType)(nil),                                 // 2: event_logging.v4.UserComplexType
	(*GroupComplexType_PermissionsType)(nil),                // 3: event_logging.v4.GroupComplexType.PermissionsType
	(*GroupComplexType_PermissionsType_PermissionType)(nil), // 4: event_logging.v4.GroupComplexType.PermissionsType.PermissionType
	(*UserComplexType_PermissionsType)(nil),                 // 5: event_logging.v4.UserComplexType.PermissionsType
	(*UserComplexType_PermissionsType_PermissionType)(nil),  // 6: event_logging.v4.UserComplexType.PermissionsType.PermissionType
	(*AnyContentComplexType)(nil),                           // 7: event_logging.v4.AnyContentComplexType
	(*ClassificationComplexType)(nil),                       // 8: event_logging.v4.ClassificationComplexType
	(*MetaDataTagsComplexType)(nil),                         // 9: event_logging.v4.MetaDataTagsComplexType
	(*DataComplexType)(nil),                                 // 10: event_logging.v4.DataComplexType
	(*UserDetailsComplexType)(nil),                          // 11: event_logging.v4.UserDetailsComplexType
	(PermissionAttributeSimpleType)(0),                      // 12: event_logging.v4.PermissionAttributeSimpleType
}
var file_event_logging_v4_user_complex_type_proto_depIdxs = []int32{
	7,  // 0: event_logging.v4.GroupComplexType.meta:type_name -> event_logging.v4.AnyContentComplexType
	8,  // 1: event_logging.v4.GroupComplexType.classification:type_name -> event_logging.v4.ClassificationComplexType
	1,  // 2: event_logging.v4.GroupComplexType.groups:type_name -> event_logging.v4.GroupsComplexType
	3,  // 3: event_logging.v4.GroupComplexType.permissions:type_name -> event_logging.v4.GroupComplexType.PermissionsType
	9,  // 4: event_logging.v4.GroupComplexType.tags:type_name -> event_logging.v4.MetaDataTagsComplexType
	10, // 5: event_logging.v4.GroupComplexType.data:type_name -> event_logging.v4.DataComplexType
	0,  // 6: event_logging.v4.GroupsComplexType.group:type_name -> event_logging.v4.GroupComplexType
	7,  // 7: event_logging.v4.UserComplexType.meta:type_name -> event_logging.v4.AnyContentComplexType
	8,  // 8: event_logging.v4.UserComplexType.classification:type_name -> event_logging.v4.ClassificationComplexType
	1,  // 9: event_logging.v4.UserComplexType.groups:type_name -> event_logging.v4.GroupsComplexType
	5,  // 10: event_logging.v4.UserComplexType.permissions:type_name -> event_logging.v4.UserComplexType.PermissionsType
	9,  // 11: event_logging.v4.UserComplexType.tags:type_name -> event_logging.v4.MetaDataTagsComplexType
	11, // 12: event_logging.v4.UserComplexType.user_details:type_name -> event_logging.v4.UserDetailsComplexType
	10, // 13: event_logging.v4.UserComplexType.data:type_name -> event_logging.v4.DataComplexType
	4,  // 14: event_logging.v4.GroupComplexType.PermissionsType.permission:type_name -> event_logging.v4.GroupComplexType.PermissionsType.PermissionType
	2,  // 15: event_logging.v4.GroupComplexType.PermissionsType.PermissionType.user:type_name -> event_logging.v4.UserComplexType
	0,  // 16: event_logging.v4.GroupComplexType.PermissionsType.PermissionType.group:type_name -> event_logging.v4.GroupComplexType
	12, // 17: event_logging.v4.GroupComplexType.PermissionsType.PermissionType.allow:type_name -> event_logging.v4.PermissionAttributeSimpleType
	12, // 18: event_logging.v4.GroupComplexType.PermissionsType.PermissionType.deny:type_name -> event_logging.v4.PermissionAttributeSimpleType
	6,  // 19: event_logging.v4.UserComplexType.PermissionsType.permission:type_name -> event_logging.v4.UserComplexType.PermissionsType.PermissionType
	2,  // 20: event_logging.v4.UserComplexType.PermissionsType.PermissionType.user:type_name -> event_logging.v4.UserComplexType
	0,  // 21: event_logging.v4.UserComplexType.PermissionsType.PermissionType.group:type_name -> event_logging.v4.GroupComplexType
	12, // 22: event_logging.v4.UserComplexType.PermissionsType.PermissionType.allow:type_name -> event_logging.v4.PermissionAttributeSimpleType
	12, // 23: event_logging.v4.UserComplexType.PermissionsType.PermissionType.deny:type_name -> event_logging.v4.PermissionAttributeSimpleType
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_event_logging_v4_user_complex_type_proto_init() }
func file_event_logging_v4_user_complex_type_proto_init() {
	if File_event_logging_v4_user_complex_type_proto != nil {
		return
	}
	file_event_logging_v4_any_content_complex_type_proto_init()
	file_event_logging_v4_classification_complex_type_proto_init()
	file_event_logging_v4_data_complex_type_proto_init()
	file_event_logging_v4_meta_data_tags_complex_type_proto_init()
	file_event_logging_v4_permission_attribute_simple_type_proto_init()
	file_event_logging_v4_user_details_complex_type_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_event_logging_v4_user_complex_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_user_complex_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupsComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_user_complex_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_user_complex_type_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupComplexType_PermissionsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_user_complex_type_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupComplexType_PermissionsType_PermissionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_user_complex_type_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserComplexType_PermissionsType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_user_complex_type_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserComplexType_PermissionsType_PermissionType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_logging_v4_user_complex_type_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_logging_v4_user_complex_type_proto_goTypes,
		DependencyIndexes: file_event_logging_v4_user_complex_type_proto_depIdxs,
		MessageInfos:      file_event_logging_v4_user_complex_type_proto_msgTypes,
	}.Build()
	File_event_logging_v4_user_complex_type_proto = out.File
	file_event_logging_v4_user_complex_type_proto_rawDesc = nil
	file_event_logging_v4_user_complex_type_proto_goTypes = nil
	file_event_logging_v4_user_complex_type_proto_depIdxs = nil
}
