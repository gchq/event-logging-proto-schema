// event_logging/v4/anti_malware_threat_complex_type.proto at 0:0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: event_logging/v4/anti_malware_threat_complex_type.proto

package event_loggingv4

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type that describes a threat identified by an anti-malware scanner.
type AntiMalwareThreatComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes the anti-malware product used.
	Product *SoftwareComplexType `protobuf:"bytes,1,opt,name=product,proto3" json:"product,omitempty"`
	// Describes the anti-malware signature used.
	Signature *AntiMalwareThreatComplexType_SignatureType `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// Describes the threat if one has been found.
	Threat *AntiMalwareThreatComplexType_ThreatType `protobuf:"bytes,3,opt,name=threat,proto3" json:"threat,omitempty"`
	// Describes the infected item if one has been found.
	Infected *MultiObjectComplexType `protobuf:"bytes,4,opt,name=infected,proto3" json:"infected,omitempty"`
}

func (x *AntiMalwareThreatComplexType) Reset() {
	*x = AntiMalwareThreatComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_anti_malware_threat_complex_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntiMalwareThreatComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiMalwareThreatComplexType) ProtoMessage() {}

func (x *AntiMalwareThreatComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_anti_malware_threat_complex_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiMalwareThreatComplexType.ProtoReflect.Descriptor instead.
func (*AntiMalwareThreatComplexType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDescGZIP(), []int{0}
}

func (x *AntiMalwareThreatComplexType) GetProduct() *SoftwareComplexType {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *AntiMalwareThreatComplexType) GetSignature() *AntiMalwareThreatComplexType_SignatureType {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *AntiMalwareThreatComplexType) GetThreat() *AntiMalwareThreatComplexType_ThreatType {
	if x != nil {
		return x.Threat
	}
	return nil
}

func (x *AntiMalwareThreatComplexType) GetInfected() *MultiObjectComplexType {
	if x != nil {
		return x.Infected
	}
	return nil
}

// Describes the anti-malware signature used.
type AntiMalwareThreatComplexType_SignatureType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the signature.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// When the signature was last updated.
	Updated *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=updated,proto3" json:"updated,omitempty"`
}

func (x *AntiMalwareThreatComplexType_SignatureType) Reset() {
	*x = AntiMalwareThreatComplexType_SignatureType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_anti_malware_threat_complex_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntiMalwareThreatComplexType_SignatureType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiMalwareThreatComplexType_SignatureType) ProtoMessage() {}

func (x *AntiMalwareThreatComplexType_SignatureType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_anti_malware_threat_complex_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiMalwareThreatComplexType_SignatureType.ProtoReflect.Descriptor instead.
func (*AntiMalwareThreatComplexType_SignatureType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDescGZIP(), []int{0, 0}
}

func (x *AntiMalwareThreatComplexType_SignatureType) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AntiMalwareThreatComplexType_SignatureType) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

// Describes the threat if one has been found.
type AntiMalwareThreatComplexType_ThreatType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The category of the threat, e.g. Worm, Virus, etc.
	Category ThreatCategorySimpleType `protobuf:"varint,1,opt,name=category,proto3,enum=event_logging.v4.ThreatCategorySimpleType" json:"category,omitempty"`
	// The name of the threat, e.g. a virus name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *AntiMalwareThreatComplexType_ThreatType) Reset() {
	*x = AntiMalwareThreatComplexType_ThreatType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_anti_malware_threat_complex_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AntiMalwareThreatComplexType_ThreatType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiMalwareThreatComplexType_ThreatType) ProtoMessage() {}

func (x *AntiMalwareThreatComplexType_ThreatType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_anti_malware_threat_complex_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiMalwareThreatComplexType_ThreatType.ProtoReflect.Descriptor instead.
func (*AntiMalwareThreatComplexType_ThreatType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDescGZIP(), []int{0, 1}
}

func (x *AntiMalwareThreatComplexType_ThreatType) GetCategory() ThreatCategorySimpleType {
	if x != nil {
		return x.Category
	}
	return ThreatCategorySimpleType_THREAT_CATEGORY_SIMPLE_TYPE_UNSPECIFIED
}

func (x *AntiMalwareThreatComplexType_ThreatType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_event_logging_v4_anti_malware_threat_complex_type_proto protoreflect.FileDescriptor

var file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDesc = []byte{
	0x0a, 0x37, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x34, 0x2f, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x6d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x1a, 0x30, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x2f, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x2f,
	0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x32, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x2f, 0x74, 0x68,
	0x72, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x73, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x04,
	0x0a, 0x1c, 0x41, 0x6e, 0x74, 0x69, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12,
	0x5a, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72,
	0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x51, 0x0a, 0x06, 0x74,
	0x68, 0x72, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x41,
	0x6e, 0x74, 0x69, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x68, 0x72, 0x65,
	0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x74, 0x68, 0x72, 0x65, 0x61, 0x74, 0x12, 0x44,
	0x0a, 0x08, 0x69, 0x6e, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x69, 0x6e, 0x66, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x1a, 0x5f, 0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x1a, 0x78, 0x0a, 0x0a, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4e, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x74, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0xe5, 0x01, 0x0a, 0x1c, 0x75, 0x6b, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x67, 0x63, 0x68, 0x71, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x42, 0x21, 0x41, 0x6e, 0x74, 0x69, 0x4d, 0x61, 0x6c, 0x77, 0x61, 0x72, 0x65, 0x54, 0x68, 0x72,
	0x65, 0x61, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x63, 0x68, 0x71, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f, 0x67,
	0x67, 0x69, 0x6e, 0x67, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x3b, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x76, 0x34, 0xa2, 0x02, 0x03, 0x45,
	0x58, 0x58, 0xaa, 0x02, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x56, 0x34, 0xca, 0x02, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x5c, 0x56, 0x34, 0xe2, 0x02, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x5c, 0x56, 0x34, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x3a, 0x3a, 0x56, 0x34, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDescOnce sync.Once
	file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDescData = file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDesc
)

func file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDescGZIP() []byte {
	file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDescOnce.Do(func() {
		file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDescData)
	})
	return file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDescData
}

var file_event_logging_v4_anti_malware_threat_complex_type_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_event_logging_v4_anti_malware_threat_complex_type_proto_goTypes = []interface{}{
	(*AntiMalwareThreatComplexType)(nil),               // 0: event_logging.v4.AntiMalwareThreatComplexType
	(*AntiMalwareThreatComplexType_SignatureType)(nil), // 1: event_logging.v4.AntiMalwareThreatComplexType.SignatureType
	(*AntiMalwareThreatComplexType_ThreatType)(nil),    // 2: event_logging.v4.AntiMalwareThreatComplexType.ThreatType
	(*SoftwareComplexType)(nil),                        // 3: event_logging.v4.SoftwareComplexType
	(*MultiObjectComplexType)(nil),                     // 4: event_logging.v4.MultiObjectComplexType
	(*timestamppb.Timestamp)(nil),                      // 5: google.protobuf.Timestamp
	(ThreatCategorySimpleType)(0),                      // 6: event_logging.v4.ThreatCategorySimpleType
}
var file_event_logging_v4_anti_malware_threat_complex_type_proto_depIdxs = []int32{
	3, // 0: event_logging.v4.AntiMalwareThreatComplexType.product:type_name -> event_logging.v4.SoftwareComplexType
	1, // 1: event_logging.v4.AntiMalwareThreatComplexType.signature:type_name -> event_logging.v4.AntiMalwareThreatComplexType.SignatureType
	2, // 2: event_logging.v4.AntiMalwareThreatComplexType.threat:type_name -> event_logging.v4.AntiMalwareThreatComplexType.ThreatType
	4, // 3: event_logging.v4.AntiMalwareThreatComplexType.infected:type_name -> event_logging.v4.MultiObjectComplexType
	5, // 4: event_logging.v4.AntiMalwareThreatComplexType.SignatureType.updated:type_name -> google.protobuf.Timestamp
	6, // 5: event_logging.v4.AntiMalwareThreatComplexType.ThreatType.category:type_name -> event_logging.v4.ThreatCategorySimpleType
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_event_logging_v4_anti_malware_threat_complex_type_proto_init() }
func file_event_logging_v4_anti_malware_threat_complex_type_proto_init() {
	if File_event_logging_v4_anti_malware_threat_complex_type_proto != nil {
		return
	}
	file_event_logging_v4_multi_object_complex_type_proto_init()
	file_event_logging_v4_software_complex_type_proto_init()
	file_event_logging_v4_threat_category_simple_type_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_event_logging_v4_anti_malware_threat_complex_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntiMalwareThreatComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_anti_malware_threat_complex_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntiMalwareThreatComplexType_SignatureType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_anti_malware_threat_complex_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AntiMalwareThreatComplexType_ThreatType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_logging_v4_anti_malware_threat_complex_type_proto_goTypes,
		DependencyIndexes: file_event_logging_v4_anti_malware_threat_complex_type_proto_depIdxs,
		MessageInfos:      file_event_logging_v4_anti_malware_threat_complex_type_proto_msgTypes,
	}.Build()
	File_event_logging_v4_anti_malware_threat_complex_type_proto = out.File
	file_event_logging_v4_anti_malware_threat_complex_type_proto_rawDesc = nil
	file_event_logging_v4_anti_malware_threat_complex_type_proto_goTypes = nil
	file_event_logging_v4_anti_malware_threat_complex_type_proto_depIdxs = nil
}
