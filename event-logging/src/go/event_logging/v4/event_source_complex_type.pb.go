// event_logging/v4/event_source_complex_type.proto at 0:0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: event_logging/v4/event_source_complex_type.proto

package event_loggingv4

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Details where the event came from, i.e. what generator created the event and on what device.
type EventSourceComplexType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
	EventId string `protobuf:"bytes,1,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
	SessionId string `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	// The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
	System *SystemComplexType `protobuf:"bytes,3,opt,name=system,proto3" json:"system,omitempty"`
	// The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
	Generator string `protobuf:"bytes,4,opt,name=generator,proto3" json:"generator,omitempty"`
	// A description of the device that the event generator is hosted upon.
	Device *DeviceComplexType `protobuf:"bytes,5,opt,name=device,proto3" json:"device,omitempty"`
	// In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
	Client *DeviceComplexType `protobuf:"bytes,6,opt,name=client,proto3" json:"client,omitempty"`
	// In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
	Server *DeviceComplexType `protobuf:"bytes,7,opt,name=server,proto3" json:"server,omitempty"`
	// Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
	Door *EventSourceComplexType_DoorType `protobuf:"bytes,8,opt,name=door,proto3" json:"door,omitempty"`
	// Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the <Id> element in preference to any other user identifier.
	User *UserComplexType `protobuf:"bytes,9,opt,name=user,proto3" json:"user,omitempty"`
	// In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the <User> element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the <Id> element in preference to any other user identifier.
	RunAs *UserComplexType `protobuf:"bytes,10,opt,name=run_as,json=runAs,proto3" json:"run_as,omitempty"`
	// Indicates whether the event was produced as a result of direct interaction, i.e. user was directly responsible for the event being created and was present at the time it was created. This element will be false where an event may have been created after the user was present, e.g. where scheduled processing is performed or an action has been queued for execution later, as is the case when some form of asynchronous processing is used. All interactive events must provide the Id for the user. Can be omitted if true as this is the default.
	Interactive bool `protobuf:"varint,11,opt,name=interactive,proto3" json:"interactive,omitempty"`
	// Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
	Data []*DataComplexType `protobuf:"bytes,12,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *EventSourceComplexType) Reset() {
	*x = EventSourceComplexType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_event_source_complex_type_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSourceComplexType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSourceComplexType) ProtoMessage() {}

func (x *EventSourceComplexType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_event_source_complex_type_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSourceComplexType.ProtoReflect.Descriptor instead.
func (*EventSourceComplexType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_event_source_complex_type_proto_rawDescGZIP(), []int{0}
}

func (x *EventSourceComplexType) GetEventId() string {
	if x != nil {
		return x.EventId
	}
	return ""
}

func (x *EventSourceComplexType) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *EventSourceComplexType) GetSystem() *SystemComplexType {
	if x != nil {
		return x.System
	}
	return nil
}

func (x *EventSourceComplexType) GetGenerator() string {
	if x != nil {
		return x.Generator
	}
	return ""
}

func (x *EventSourceComplexType) GetDevice() *DeviceComplexType {
	if x != nil {
		return x.Device
	}
	return nil
}

func (x *EventSourceComplexType) GetClient() *DeviceComplexType {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *EventSourceComplexType) GetServer() *DeviceComplexType {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *EventSourceComplexType) GetDoor() *EventSourceComplexType_DoorType {
	if x != nil {
		return x.Door
	}
	return nil
}

func (x *EventSourceComplexType) GetUser() *UserComplexType {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *EventSourceComplexType) GetRunAs() *UserComplexType {
	if x != nil {
		return x.RunAs
	}
	return nil
}

func (x *EventSourceComplexType) GetInteractive() bool {
	if x != nil {
		return x.Interactive
	}
	return false
}

func (x *EventSourceComplexType) GetData() []*DataComplexType {
	if x != nil {
		return x.Data
	}
	return nil
}

// Physical access events are generated by doors, barriers, turnstiles, etc. This type provides details of the door and its location and access control properties.
type EventSourceComplexType_DoorType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The site-wide name/identifier for the door.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// A user readable description of the door.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Describes the geographic location of the device.
	Location *LocationComplexType `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	// It is assumed that doors only allow for a single authenticated person to enter at a time, e.g. in the case of turnstiles. Where single entry is true this element can be omitted as this is expected by default.
	SingleEntry bool `protobuf:"varint,4,opt,name=single_entry,json=singleEntry,proto3" json:"single_entry,omitempty"`
	// This element is used to tell us to remove all access zones from the list of currently accessible zones for a user before adding a new one. This is the case whenever a user moves from one zone to another and loses all possible access to the zones they were previously in, i.e. they would need to re-authenticate to regain access rather than just pass back through the door. If not specified this element is considered to be true as most movement through a door removes access to previously accessible zones. Removal of all access zones provides anti pass-back protection.
	RemoveAll bool `protobuf:"varint,5,opt,name=remove_all,json=removeAll,proto3" json:"remove_all,omitempty"`
	// A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
	AddAccess *EventSourceComplexType_DoorType_AddAccessType `protobuf:"bytes,6,opt,name=add_access,json=addAccess,proto3" json:"add_access,omitempty"`
}

func (x *EventSourceComplexType_DoorType) Reset() {
	*x = EventSourceComplexType_DoorType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_event_source_complex_type_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSourceComplexType_DoorType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSourceComplexType_DoorType) ProtoMessage() {}

func (x *EventSourceComplexType_DoorType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_event_source_complex_type_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSourceComplexType_DoorType.ProtoReflect.Descriptor instead.
func (*EventSourceComplexType_DoorType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_event_source_complex_type_proto_rawDescGZIP(), []int{0, 0}
}

func (x *EventSourceComplexType_DoorType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventSourceComplexType_DoorType) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *EventSourceComplexType_DoorType) GetLocation() *LocationComplexType {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *EventSourceComplexType_DoorType) GetSingleEntry() bool {
	if x != nil {
		return x.SingleEntry
	}
	return false
}

func (x *EventSourceComplexType_DoorType) GetRemoveAll() bool {
	if x != nil {
		return x.RemoveAll
	}
	return false
}

func (x *EventSourceComplexType_DoorType) GetAddAccess() *EventSourceComplexType_DoorType_AddAccessType {
	if x != nil {
		return x.AddAccess
	}
	return nil
}

// A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
type EventSourceComplexType_DoorType_AddAccessType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
	AccessZone []string `protobuf:"bytes,1,rep,name=access_zone,json=accessZone,proto3" json:"access_zone,omitempty"`
}

func (x *EventSourceComplexType_DoorType_AddAccessType) Reset() {
	*x = EventSourceComplexType_DoorType_AddAccessType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_logging_v4_event_source_complex_type_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventSourceComplexType_DoorType_AddAccessType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventSourceComplexType_DoorType_AddAccessType) ProtoMessage() {}

func (x *EventSourceComplexType_DoorType_AddAccessType) ProtoReflect() protoreflect.Message {
	mi := &file_event_logging_v4_event_source_complex_type_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventSourceComplexType_DoorType_AddAccessType.ProtoReflect.Descriptor instead.
func (*EventSourceComplexType_DoorType_AddAccessType) Descriptor() ([]byte, []int) {
	return file_event_logging_v4_event_source_complex_type_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *EventSourceComplexType_DoorType_AddAccessType) GetAccessZone() []string {
	if x != nil {
		return x.AccessZone
	}
	return nil
}

var File_event_logging_v4_event_source_complex_type_proto protoreflect.FileDescriptor

var file_event_logging_v4_event_source_complex_type_proto_rawDesc = []byte{
	0x0a, 0x30, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x34, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x1a, 0x28, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x2f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34,
	0x2f, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x2f, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x2f, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x78, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x08, 0x0a, 0x16,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x06, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01,
	0x52, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x43, 0x0a, 0x06, 0x64,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x06, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x3b, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x34, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x3b, 0x0a,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34,
	0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x04, 0x64, 0x6f,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x2e, 0x44, 0x6f, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x64, 0x6f, 0x6f,
	0x72, 0x12, 0x35, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x06, 0x72, 0x75, 0x6e, 0x5f,
	0x61, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6e,
	0x41, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x54, 0x79, 0x70, 0x65, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x08, 0x00, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xf9, 0x02, 0x0a, 0x08, 0x44, 0x6f, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x49, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x34, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01,
	0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1d,
	0x0a, 0x0a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x12, 0x66, 0x0a,
	0x0a, 0x61, 0x64, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3f, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x34, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x44, 0x6f, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x09, 0x61, 0x64, 0x64, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x1a, 0x3a, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x29, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x08, 0xba, 0x48, 0x05,
	0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5a, 0x6f, 0x6e,
	0x65, 0x42, 0xdf, 0x01, 0x0a, 0x1c, 0x75, 0x6b, 0x2e, 0x67, 0x6f, 0x76, 0x2e, 0x67, 0x63, 0x68,
	0x71, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e,
	0x76, 0x34, 0x42, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x63,
	0x68, 0x71, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2d, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67,
	0x2d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x6f,
	0x67, 0x67, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x34, 0x3b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x76, 0x34, 0xa2, 0x02, 0x03, 0x45, 0x58, 0x58, 0xaa, 0x02,
	0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x2e, 0x56, 0x34,
	0xca, 0x02, 0x0f, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x5c,
	0x56, 0x34, 0xe2, 0x02, 0x1b, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x5c, 0x56, 0x34, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0xea, 0x02, 0x10, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x3a,
	0x3a, 0x56, 0x34, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_event_logging_v4_event_source_complex_type_proto_rawDescOnce sync.Once
	file_event_logging_v4_event_source_complex_type_proto_rawDescData = file_event_logging_v4_event_source_complex_type_proto_rawDesc
)

func file_event_logging_v4_event_source_complex_type_proto_rawDescGZIP() []byte {
	file_event_logging_v4_event_source_complex_type_proto_rawDescOnce.Do(func() {
		file_event_logging_v4_event_source_complex_type_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_logging_v4_event_source_complex_type_proto_rawDescData)
	})
	return file_event_logging_v4_event_source_complex_type_proto_rawDescData
}

var file_event_logging_v4_event_source_complex_type_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_event_logging_v4_event_source_complex_type_proto_goTypes = []interface{}{
	(*EventSourceComplexType)(nil),                        // 0: event_logging.v4.EventSourceComplexType
	(*EventSourceComplexType_DoorType)(nil),               // 1: event_logging.v4.EventSourceComplexType.DoorType
	(*EventSourceComplexType_DoorType_AddAccessType)(nil), // 2: event_logging.v4.EventSourceComplexType.DoorType.AddAccessType
	(*SystemComplexType)(nil),                             // 3: event_logging.v4.SystemComplexType
	(*DeviceComplexType)(nil),                             // 4: event_logging.v4.DeviceComplexType
	(*UserComplexType)(nil),                               // 5: event_logging.v4.UserComplexType
	(*DataComplexType)(nil),                               // 6: event_logging.v4.DataComplexType
	(*LocationComplexType)(nil),                           // 7: event_logging.v4.LocationComplexType
}
var file_event_logging_v4_event_source_complex_type_proto_depIdxs = []int32{
	3,  // 0: event_logging.v4.EventSourceComplexType.system:type_name -> event_logging.v4.SystemComplexType
	4,  // 1: event_logging.v4.EventSourceComplexType.device:type_name -> event_logging.v4.DeviceComplexType
	4,  // 2: event_logging.v4.EventSourceComplexType.client:type_name -> event_logging.v4.DeviceComplexType
	4,  // 3: event_logging.v4.EventSourceComplexType.server:type_name -> event_logging.v4.DeviceComplexType
	1,  // 4: event_logging.v4.EventSourceComplexType.door:type_name -> event_logging.v4.EventSourceComplexType.DoorType
	5,  // 5: event_logging.v4.EventSourceComplexType.user:type_name -> event_logging.v4.UserComplexType
	5,  // 6: event_logging.v4.EventSourceComplexType.run_as:type_name -> event_logging.v4.UserComplexType
	6,  // 7: event_logging.v4.EventSourceComplexType.data:type_name -> event_logging.v4.DataComplexType
	7,  // 8: event_logging.v4.EventSourceComplexType.DoorType.location:type_name -> event_logging.v4.LocationComplexType
	2,  // 9: event_logging.v4.EventSourceComplexType.DoorType.add_access:type_name -> event_logging.v4.EventSourceComplexType.DoorType.AddAccessType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_event_logging_v4_event_source_complex_type_proto_init() }
func file_event_logging_v4_event_source_complex_type_proto_init() {
	if File_event_logging_v4_event_source_complex_type_proto != nil {
		return
	}
	file_event_logging_v4_data_complex_type_proto_init()
	file_event_logging_v4_device_complex_type_proto_init()
	file_event_logging_v4_location_complex_type_proto_init()
	file_event_logging_v4_system_complex_type_proto_init()
	file_event_logging_v4_user_complex_type_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_event_logging_v4_event_source_complex_type_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSourceComplexType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_event_source_complex_type_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSourceComplexType_DoorType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_logging_v4_event_source_complex_type_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventSourceComplexType_DoorType_AddAccessType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_logging_v4_event_source_complex_type_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_logging_v4_event_source_complex_type_proto_goTypes,
		DependencyIndexes: file_event_logging_v4_event_source_complex_type_proto_depIdxs,
		MessageInfos:      file_event_logging_v4_event_source_complex_type_proto_msgTypes,
	}.Build()
	File_event_logging_v4_event_source_complex_type_proto = out.File
	file_event_logging_v4_event_source_complex_type_proto_rawDesc = nil
	file_event_logging_v4_event_source_complex_type_proto_goTypes = nil
	file_event_logging_v4_event_source_complex_type_proto_depIdxs = nil
}
