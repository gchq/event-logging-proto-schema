// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/process_complex_type.proto

// Protobuf Java Version: 4.26.1
package uk.gov.gchq.event_logging.v4;

public interface ProcessComplexTypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:event_logging.v4.ProcessComplexType)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The action that the process event is capturing, e.g. Startup, Shutdown.
   * </pre>
   *
   * <code>.event_logging.v4.ProcessActionSimpleType action = 1 [json_name = "action", (.buf.validate.field) = { ... }</code>
   * @return The enum numeric value on the wire for action.
   */
  int getActionValue();
  /**
   * <pre>
   * The action that the process event is capturing, e.g. Startup, Shutdown.
   * </pre>
   *
   * <code>.event_logging.v4.ProcessActionSimpleType action = 1 [json_name = "action", (.buf.validate.field) = { ... }</code>
   * @return The action.
   */
  uk.gov.gchq.event_logging.v4.ProcessActionSimpleType getAction();

  /**
   * <pre>
   * The type of process, e.g. Application, OS, Service.
   * </pre>
   *
   * <code>.event_logging.v4.ProcessTypeSimpleType type = 2 [json_name = "type", (.buf.validate.field) = { ... }</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * The type of process, e.g. Application, OS, Service.
   * </pre>
   *
   * <code>.event_logging.v4.ProcessTypeSimpleType type = 2 [json_name = "type", (.buf.validate.field) = { ... }</code>
   * @return The type.
   */
  uk.gov.gchq.event_logging.v4.ProcessTypeSimpleType getType();

  /**
   * <pre>
   * The name of the process.
   * </pre>
   *
   * <code>string command = 3 [json_name = "command", (.buf.validate.field) = { ... }</code>
   * @return The command.
   */
  java.lang.String getCommand();
  /**
   * <pre>
   * The name of the process.
   * </pre>
   *
   * <code>string command = 3 [json_name = "command", (.buf.validate.field) = { ... }</code>
   * @return The bytes for command.
   */
  com.google.protobuf.ByteString
      getCommandBytes();

  /**
   * <pre>
   * The process command arguments/parameters.
   * </pre>
   *
   * <code>string arguments = 4 [json_name = "arguments"];</code>
   * @return The arguments.
   */
  java.lang.String getArguments();
  /**
   * <pre>
   * The process command arguments/parameters.
   * </pre>
   *
   * <code>string arguments = 4 [json_name = "arguments"];</code>
   * @return The bytes for arguments.
   */
  com.google.protobuf.ByteString
      getArgumentsBytes();

  /**
   * <pre>
   * The system identifier for the process.
   * </pre>
   *
   * <code>string process_id = 5 [json_name = "processId"];</code>
   * @return The processId.
   */
  java.lang.String getProcessId();
  /**
   * <pre>
   * The system identifier for the process.
   * </pre>
   *
   * <code>string process_id = 5 [json_name = "processId"];</code>
   * @return The bytes for processId.
   */
  com.google.protobuf.ByteString
      getProcessIdBytes();

  /**
   * <pre>
   * The thread identifier for the process.
   * </pre>
   *
   * <code>uint32 thread_id = 6 [json_name = "threadId", (.buf.validate.field) = { ... }</code>
   * @return The threadId.
   */
  int getThreadId();

  /**
   * <pre>
   * The rule that was triggered when this process event happened.
   * </pre>
   *
   * <code>string rule = 7 [json_name = "rule"];</code>
   * @return The rule.
   */
  java.lang.String getRule();
  /**
   * <pre>
   * The rule that was triggered when this process event happened.
   * </pre>
   *
   * <code>string rule = 7 [json_name = "rule"];</code>
   * @return The bytes for rule.
   */
  com.google.protobuf.ByteString
      getRuleBytes();

  /**
   * <pre>
   * Any objects used as input to the process.
   * </pre>
   *
   * <code>.event_logging.v4.MultiObjectComplexType input = 8 [json_name = "input"];</code>
   * @return Whether the input field is set.
   */
  boolean hasInput();
  /**
   * <pre>
   * Any objects used as input to the process.
   * </pre>
   *
   * <code>.event_logging.v4.MultiObjectComplexType input = 8 [json_name = "input"];</code>
   * @return The input.
   */
  uk.gov.gchq.event_logging.v4.MultiObjectComplexType getInput();
  /**
   * <pre>
   * Any objects used as input to the process.
   * </pre>
   *
   * <code>.event_logging.v4.MultiObjectComplexType input = 8 [json_name = "input"];</code>
   */
  uk.gov.gchq.event_logging.v4.MultiObjectComplexTypeOrBuilder getInputOrBuilder();

  /**
   * <pre>
   * Any objects output by the process
   * </pre>
   *
   * <code>.event_logging.v4.MultiObjectComplexType output = 9 [json_name = "output"];</code>
   * @return Whether the output field is set.
   */
  boolean hasOutput();
  /**
   * <pre>
   * Any objects output by the process
   * </pre>
   *
   * <code>.event_logging.v4.MultiObjectComplexType output = 9 [json_name = "output"];</code>
   * @return The output.
   */
  uk.gov.gchq.event_logging.v4.MultiObjectComplexType getOutput();
  /**
   * <pre>
   * Any objects output by the process
   * </pre>
   *
   * <code>.event_logging.v4.MultiObjectComplexType output = 9 [json_name = "output"];</code>
   */
  uk.gov.gchq.event_logging.v4.MultiObjectComplexTypeOrBuilder getOutputOrBuilder();

  /**
   * <pre>
   * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
   * </pre>
   *
   * <code>.event_logging.v4.OutcomeComplexType outcome = 10 [json_name = "outcome"];</code>
   * @return Whether the outcome field is set.
   */
  boolean hasOutcome();
  /**
   * <pre>
   * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
   * </pre>
   *
   * <code>.event_logging.v4.OutcomeComplexType outcome = 10 [json_name = "outcome"];</code>
   * @return The outcome.
   */
  uk.gov.gchq.event_logging.v4.OutcomeComplexType getOutcome();
  /**
   * <pre>
   * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
   * </pre>
   *
   * <code>.event_logging.v4.OutcomeComplexType outcome = 10 [json_name = "outcome"];</code>
   */
  uk.gov.gchq.event_logging.v4.OutcomeComplexTypeOrBuilder getOutcomeOrBuilder();

  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 11 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> 
      getDataList();
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 11 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.DataComplexType getData(int index);
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 11 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  int getDataCount();
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 11 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  java.util.List<? extends uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
      getDataOrBuilderList();
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 11 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder getDataOrBuilder(
      int index);
}
