// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/event_source_complex_type.proto

// Protobuf Java Version: 4.26.1
package uk.gov.gchq.event_logging.v4;

public interface EventSourceComplexTypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:event_logging.v4.EventSourceComplexType)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
   * </pre>
   *
   * <code>string event_id = 1 [json_name = "eventId"];</code>
   * @return The eventId.
   */
  java.lang.String getEventId();
  /**
   * <pre>
   * A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
   * </pre>
   *
   * <code>string event_id = 1 [json_name = "eventId"];</code>
   * @return The bytes for eventId.
   */
  com.google.protobuf.ByteString
      getEventIdBytes();

  /**
   * <pre>
   * Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
   * </pre>
   *
   * <code>string session_id = 2 [json_name = "sessionId"];</code>
   * @return The sessionId.
   */
  java.lang.String getSessionId();
  /**
   * <pre>
   * Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
   * </pre>
   *
   * <code>string session_id = 2 [json_name = "sessionId"];</code>
   * @return The bytes for sessionId.
   */
  com.google.protobuf.ByteString
      getSessionIdBytes();

  /**
   * <pre>
   * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
   * </pre>
   *
   * <code>.event_logging.v4.SystemComplexType system = 3 [json_name = "system", (.buf.validate.field) = { ... }</code>
   * @return Whether the system field is set.
   */
  boolean hasSystem();
  /**
   * <pre>
   * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
   * </pre>
   *
   * <code>.event_logging.v4.SystemComplexType system = 3 [json_name = "system", (.buf.validate.field) = { ... }</code>
   * @return The system.
   */
  uk.gov.gchq.event_logging.v4.SystemComplexType getSystem();
  /**
   * <pre>
   * The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
   * </pre>
   *
   * <code>.event_logging.v4.SystemComplexType system = 3 [json_name = "system", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.SystemComplexTypeOrBuilder getSystemOrBuilder();

  /**
   * <pre>
   * The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
   * </pre>
   *
   * <code>string generator = 4 [json_name = "generator", (.buf.validate.field) = { ... }</code>
   * @return The generator.
   */
  java.lang.String getGenerator();
  /**
   * <pre>
   * The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
   * </pre>
   *
   * <code>string generator = 4 [json_name = "generator", (.buf.validate.field) = { ... }</code>
   * @return The bytes for generator.
   */
  com.google.protobuf.ByteString
      getGeneratorBytes();

  /**
   * <pre>
   * A description of the device that the event generator is hosted upon.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType device = 5 [json_name = "device", (.buf.validate.field) = { ... }</code>
   * @return Whether the device field is set.
   */
  boolean hasDevice();
  /**
   * <pre>
   * A description of the device that the event generator is hosted upon.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType device = 5 [json_name = "device", (.buf.validate.field) = { ... }</code>
   * @return The device.
   */
  uk.gov.gchq.event_logging.v4.DeviceComplexType getDevice();
  /**
   * <pre>
   * A description of the device that the event generator is hosted upon.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType device = 5 [json_name = "device", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.DeviceComplexTypeOrBuilder getDeviceOrBuilder();

  /**
   * <pre>
   * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType client = 6 [json_name = "client"];</code>
   * @return Whether the client field is set.
   */
  boolean hasClient();
  /**
   * <pre>
   * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType client = 6 [json_name = "client"];</code>
   * @return The client.
   */
  uk.gov.gchq.event_logging.v4.DeviceComplexType getClient();
  /**
   * <pre>
   * In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType client = 6 [json_name = "client"];</code>
   */
  uk.gov.gchq.event_logging.v4.DeviceComplexTypeOrBuilder getClientOrBuilder();

  /**
   * <pre>
   * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType server = 7 [json_name = "server"];</code>
   * @return Whether the server field is set.
   */
  boolean hasServer();
  /**
   * <pre>
   * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType server = 7 [json_name = "server"];</code>
   * @return The server.
   */
  uk.gov.gchq.event_logging.v4.DeviceComplexType getServer();
  /**
   * <pre>
   * In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType server = 7 [json_name = "server"];</code>
   */
  uk.gov.gchq.event_logging.v4.DeviceComplexTypeOrBuilder getServerOrBuilder();

  /**
   * <pre>
   * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
   * </pre>
   *
   * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8 [json_name = "door"];</code>
   * @return Whether the door field is set.
   */
  boolean hasDoor();
  /**
   * <pre>
   * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
   * </pre>
   *
   * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8 [json_name = "door"];</code>
   * @return The door.
   */
  uk.gov.gchq.event_logging.v4.EventSourceComplexType.DoorType getDoor();
  /**
   * <pre>
   * Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
   * </pre>
   *
   * <code>.event_logging.v4.EventSourceComplexType.DoorType door = 8 [json_name = "door"];</code>
   */
  uk.gov.gchq.event_logging.v4.EventSourceComplexType.DoorTypeOrBuilder getDoorOrBuilder();

  /**
   * <pre>
   * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
   * </pre>
   *
   * <code>.event_logging.v4.UserComplexType user = 9 [json_name = "user"];</code>
   * @return Whether the user field is set.
   */
  boolean hasUser();
  /**
   * <pre>
   * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
   * </pre>
   *
   * <code>.event_logging.v4.UserComplexType user = 9 [json_name = "user"];</code>
   * @return The user.
   */
  uk.gov.gchq.event_logging.v4.UserComplexType getUser();
  /**
   * <pre>
   * Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
   * </pre>
   *
   * <code>.event_logging.v4.UserComplexType user = 9 [json_name = "user"];</code>
   */
  uk.gov.gchq.event_logging.v4.UserComplexTypeOrBuilder getUserOrBuilder();

  /**
   * <pre>
   * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
   * </pre>
   *
   * <code>.event_logging.v4.UserComplexType run_as = 10 [json_name = "runAs"];</code>
   * @return Whether the runAs field is set.
   */
  boolean hasRunAs();
  /**
   * <pre>
   * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
   * </pre>
   *
   * <code>.event_logging.v4.UserComplexType run_as = 10 [json_name = "runAs"];</code>
   * @return The runAs.
   */
  uk.gov.gchq.event_logging.v4.UserComplexType getRunAs();
  /**
   * <pre>
   * In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the &lt;User&gt; element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the &lt;Id&gt; element in preference to any other user identifier.
   * </pre>
   *
   * <code>.event_logging.v4.UserComplexType run_as = 10 [json_name = "runAs"];</code>
   */
  uk.gov.gchq.event_logging.v4.UserComplexTypeOrBuilder getRunAsOrBuilder();

  /**
   * <pre>
   * Indicates whether the event was produced as a result of direct interaction, i.e. user was directly responsible for the event being created and was present at the time it was created. This element will be false where an event may have been created after the user was present, e.g. where scheduled processing is performed or an action has been queued for execution later, as is the case when some form of asynchronous processing is used. All interactive events must provide the Id for the user. Can be omitted if true as this is the default.
   * </pre>
   *
   * <code>bool interactive = 11 [json_name = "interactive"];</code>
   * @return The interactive.
   */
  boolean getInteractive();

  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> 
      getDataList();
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.DataComplexType getData(int index);
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  int getDataCount();
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  java.util.List<? extends uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
      getDataOrBuilderList();
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder getDataOrBuilder(
      int index);
}
