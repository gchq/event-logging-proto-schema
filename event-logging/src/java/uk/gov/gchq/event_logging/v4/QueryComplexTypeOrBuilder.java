// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/query_complex_type.proto

// Protobuf Java Version: 4.26.1
package uk.gov.gchq.event_logging.v4;

public interface QueryComplexTypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:event_logging.v4.QueryComplexType)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * An identifier to uniquely identify the query that was executed. This may be used to link the execution of a query (i.e. Search/Query/Id) with the results that are persisted and viewed at another time (i.e. View/SearchResults/Query/Id).
   * </pre>
   *
   * <code>string id = 1 [json_name = "id"];</code>
   * @return The id.
   */
  java.lang.String getId();
  /**
   * <pre>
   * An identifier to uniquely identify the query that was executed. This may be used to link the execution of a query (i.e. Search/Query/Id) with the results that are persisted and viewed at another time (i.e. View/SearchResults/Query/Id).
   * </pre>
   *
   * <code>string id = 1 [json_name = "id"];</code>
   * @return The bytes for id.
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <pre>
   * The name of the query that was executed. This may be used to link the execution of a query with the results that are persisted and viewed at another time.
   * </pre>
   *
   * <code>string name = 2 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * The name of the query that was executed. This may be used to link the execution of a query with the results that are persisted and viewed at another time.
   * </pre>
   *
   * <code>string name = 2 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * A human-readable description of what the query is searching for.
   * </pre>
   *
   * <code>string description = 3 [json_name = "description"];</code>
   * @return The description.
   */
  java.lang.String getDescription();
  /**
   * <pre>
   * A human-readable description of what the query is searching for.
   * </pre>
   *
   * <code>string description = 3 [json_name = "description"];</code>
   * @return The bytes for description.
   */
  com.google.protobuf.ByteString
      getDescriptionBytes();

  /**
   * <pre>
   * A complex boolean tree or operators and terms that describes the query.
   * </pre>
   *
   * <code>.event_logging.v4.QueryComplexType.AdvancedType advanced = 4 [json_name = "advanced"];</code>
   * @return Whether the advanced field is set.
   */
  boolean hasAdvanced();
  /**
   * <pre>
   * A complex boolean tree or operators and terms that describes the query.
   * </pre>
   *
   * <code>.event_logging.v4.QueryComplexType.AdvancedType advanced = 4 [json_name = "advanced"];</code>
   * @return The advanced.
   */
  uk.gov.gchq.event_logging.v4.QueryComplexType.AdvancedType getAdvanced();
  /**
   * <pre>
   * A complex boolean tree or operators and terms that describes the query.
   * </pre>
   *
   * <code>.event_logging.v4.QueryComplexType.AdvancedType advanced = 4 [json_name = "advanced"];</code>
   */
  uk.gov.gchq.event_logging.v4.QueryComplexType.AdvancedTypeOrBuilder getAdvancedOrBuilder();

  /**
   * <pre>
   * A simple representation of a query using includes and excludes terms. This is suitable for simple filtered lists, e.g. for a list of names excluding "John,Bob".
   * </pre>
   *
   * <code>.event_logging.v4.QueryComplexType.SimpleType simple = 5 [json_name = "simple"];</code>
   * @return Whether the simple field is set.
   */
  boolean hasSimple();
  /**
   * <pre>
   * A simple representation of a query using includes and excludes terms. This is suitable for simple filtered lists, e.g. for a list of names excluding "John,Bob".
   * </pre>
   *
   * <code>.event_logging.v4.QueryComplexType.SimpleType simple = 5 [json_name = "simple"];</code>
   * @return The simple.
   */
  uk.gov.gchq.event_logging.v4.QueryComplexType.SimpleType getSimple();
  /**
   * <pre>
   * A simple representation of a query using includes and excludes terms. This is suitable for simple filtered lists, e.g. for a list of names excluding "John,Bob".
   * </pre>
   *
   * <code>.event_logging.v4.QueryComplexType.SimpleType simple = 5 [json_name = "simple"];</code>
   */
  uk.gov.gchq.event_logging.v4.QueryComplexType.SimpleTypeOrBuilder getSimpleOrBuilder();

  /**
   * <pre>
   * The raw query in the query language used by the application executing the query, e.g. SQL, xpath, etc.
   * </pre>
   *
   * <code>string raw = 6 [json_name = "raw"];</code>
   * @return The raw.
   */
  java.lang.String getRaw();
  /**
   * <pre>
   * The raw query in the query language used by the application executing the query, e.g. SQL, xpath, etc.
   * </pre>
   *
   * <code>string raw = 6 [json_name = "raw"];</code>
   * @return The bytes for raw.
   */
  com.google.protobuf.ByteString
      getRawBytes();
}
