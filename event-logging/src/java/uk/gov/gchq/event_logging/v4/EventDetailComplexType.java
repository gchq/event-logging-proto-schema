// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/event_detail_complex_type.proto

// Protobuf Java Version: 4.26.1
package uk.gov.gchq.event_logging.v4;

/**
 * <pre>
 * This type describes the details of what happened in the event: the type of the event, why it happened and the event action.
 * </pre>
 *
 * Protobuf type {@code event_logging.v4.EventDetailComplexType}
 */
public final class EventDetailComplexType extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:event_logging.v4.EventDetailComplexType)
    EventDetailComplexTypeOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      EventDetailComplexType.class.getName());
  }
  // Use EventDetailComplexType.newBuilder() to construct.
  private EventDetailComplexType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private EventDetailComplexType() {
    typeId_ = "";
    description_ = "";
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return uk.gov.gchq.event_logging.v4.EventDetailComplexTypeProto.internal_static_event_logging_v4_EventDetailComplexType_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return uk.gov.gchq.event_logging.v4.EventDetailComplexTypeProto.internal_static_event_logging_v4_EventDetailComplexType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            uk.gov.gchq.event_logging.v4.EventDetailComplexType.class, uk.gov.gchq.event_logging.v4.EventDetailComplexType.Builder.class);
  }

  public interface UnknownTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:event_logging.v4.EventDetailComplexType.UnknownType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> 
        getDataList();
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    uk.gov.gchq.event_logging.v4.DataComplexType getData(int index);
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    int getDataCount();
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    java.util.List<? extends uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
        getDataOrBuilderList();
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder getDataOrBuilder(
        int index);
  }
  /**
   * <pre>
   * This type should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
   * </pre>
   *
   * Protobuf type {@code event_logging.v4.EventDetailComplexType.UnknownType}
   */
  public static final class UnknownType extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:event_logging.v4.EventDetailComplexType.UnknownType)
      UnknownTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        UnknownType.class.getName());
    }
    // Use UnknownType.newBuilder() to construct.
    private UnknownType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private UnknownType() {
      data_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return uk.gov.gchq.event_logging.v4.EventDetailComplexTypeProto.internal_static_event_logging_v4_EventDetailComplexType_UnknownType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return uk.gov.gchq.event_logging.v4.EventDetailComplexTypeProto.internal_static_event_logging_v4_EventDetailComplexType_UnknownType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.class, uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.Builder.class);
    }

    public static final int DATA_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> data_;
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> getDataList() {
      return data_;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
        getDataOrBuilderList() {
      return data_;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.DataComplexType getData(int index) {
      return data_.get(index);
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder getDataOrBuilder(
        int index) {
      return data_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < data_.size(); i++) {
        output.writeMessage(1, data_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < data_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, data_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType)) {
        return super.equals(obj);
      }
      uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType other = (uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType) obj;

      if (!getDataList()
          .equals(other.getDataList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getDataCount() > 0) {
        hash = (37 * hash) + DATA_FIELD_NUMBER;
        hash = (53 * hash) + getDataList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * This type should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
     * </pre>
     *
     * Protobuf type {@code event_logging.v4.EventDetailComplexType.UnknownType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:event_logging.v4.EventDetailComplexType.UnknownType)
        uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return uk.gov.gchq.event_logging.v4.EventDetailComplexTypeProto.internal_static_event_logging_v4_EventDetailComplexType_UnknownType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return uk.gov.gchq.event_logging.v4.EventDetailComplexTypeProto.internal_static_event_logging_v4_EventDetailComplexType_UnknownType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.class, uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.Builder.class);
      }

      // Construct using uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
        } else {
          data_ = null;
          dataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return uk.gov.gchq.event_logging.v4.EventDetailComplexTypeProto.internal_static_event_logging_v4_EventDetailComplexType_UnknownType_descriptor;
      }

      @java.lang.Override
      public uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType getDefaultInstanceForType() {
        return uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.getDefaultInstance();
      }

      @java.lang.Override
      public uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType build() {
        uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType buildPartial() {
        uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType result = new uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType result) {
        if (dataBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            data_ = java.util.Collections.unmodifiableList(data_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.data_ = data_;
        } else {
          result.data_ = dataBuilder_.build();
        }
      }

      private void buildPartial0(uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType result) {
        int from_bitField0_ = bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType) {
          return mergeFrom((uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType other) {
        if (other == uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.getDefaultInstance()) return this;
        if (dataBuilder_ == null) {
          if (!other.data_.isEmpty()) {
            if (data_.isEmpty()) {
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureDataIsMutable();
              data_.addAll(other.data_);
            }
            onChanged();
          }
        } else {
          if (!other.data_.isEmpty()) {
            if (dataBuilder_.isEmpty()) {
              dataBuilder_.dispose();
              dataBuilder_ = null;
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000001);
              dataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDataFieldBuilder() : null;
            } else {
              dataBuilder_.addAllMessages(other.data_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                uk.gov.gchq.event_logging.v4.DataComplexType m =
                    input.readMessage(
                        uk.gov.gchq.event_logging.v4.DataComplexType.parser(),
                        extensionRegistry);
                if (dataBuilder_ == null) {
                  ensureDataIsMutable();
                  data_.add(m);
                } else {
                  dataBuilder_.addMessage(m);
                }
                break;
              } // case 10
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> data_ =
        java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          data_ = new java.util.ArrayList<uk.gov.gchq.event_logging.v4.DataComplexType>(data_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          uk.gov.gchq.event_logging.v4.DataComplexType, uk.gov.gchq.event_logging.v4.DataComplexType.Builder, uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> dataBuilder_;

      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> getDataList() {
        if (dataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(data_);
        } else {
          return dataBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public int getDataCount() {
        if (dataBuilder_ == null) {
          return data_.size();
        } else {
          return dataBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.DataComplexType getData(int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);
        } else {
          return dataBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder setData(
          int index, uk.gov.gchq.event_logging.v4.DataComplexType value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.set(index, value);
          onChanged();
        } else {
          dataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder setData(
          int index, uk.gov.gchq.event_logging.v4.DataComplexType.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder addData(uk.gov.gchq.event_logging.v4.DataComplexType value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(value);
          onChanged();
        } else {
          dataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder addData(
          int index, uk.gov.gchq.event_logging.v4.DataComplexType value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(index, value);
          onChanged();
        } else {
          dataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder addData(
          uk.gov.gchq.event_logging.v4.DataComplexType.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder addData(
          int index, uk.gov.gchq.event_logging.v4.DataComplexType.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends uk.gov.gchq.event_logging.v4.DataComplexType> values) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, data_);
          onChanged();
        } else {
          dataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder clearData() {
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          dataBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder removeData(int index) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.remove(index);
          onChanged();
        } else {
          dataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.DataComplexType.Builder getDataBuilder(
          int index) {
        return getDataFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder getDataOrBuilder(
          int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);  } else {
          return dataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public java.util.List<? extends uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
           getDataOrBuilderList() {
        if (dataBuilder_ != null) {
          return dataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(data_);
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.DataComplexType.Builder addDataBuilder() {
        return getDataFieldBuilder().addBuilder(
            uk.gov.gchq.event_logging.v4.DataComplexType.getDefaultInstance());
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.DataComplexType.Builder addDataBuilder(
          int index) {
        return getDataFieldBuilder().addBuilder(
            index, uk.gov.gchq.event_logging.v4.DataComplexType.getDefaultInstance());
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 1 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType.Builder> 
           getDataBuilderList() {
        return getDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          uk.gov.gchq.event_logging.v4.DataComplexType, uk.gov.gchq.event_logging.v4.DataComplexType.Builder, uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
          getDataFieldBuilder() {
        if (dataBuilder_ == null) {
          dataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              uk.gov.gchq.event_logging.v4.DataComplexType, uk.gov.gchq.event_logging.v4.DataComplexType.Builder, uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder>(
                  data_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        return dataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:event_logging.v4.EventDetailComplexType.UnknownType)
    }

    // @@protoc_insertion_point(class_scope:event_logging.v4.EventDetailComplexType.UnknownType)
    private static final uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType();
    }

    public static uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<UnknownType>
        PARSER = new com.google.protobuf.AbstractParser<UnknownType>() {
      @java.lang.Override
      public UnknownType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<UnknownType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<UnknownType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int TYPE_ID_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private volatile java.lang.Object typeId_ = "";
  /**
   * <pre>
   * A name/code/ID to uniquely identify the logical event type within the service providing the events. E.g. a Windows eventId (i.e. representing 'Failed logon', 'Change password attempt', etc.) or for application logging: SaveRecord, ViewUserRecord, ViewSearchResults, etc. The granularity will depend on the application. Typically, the number of unique TypeIds will be in the 10s. Note, the values of the TypeId are not meant to be globally consistent, they will only be relevant within that service providing the events.
   * </pre>
   *
   * <code>string type_id = 1 [json_name = "typeId", (.buf.validate.field) = { ... }</code>
   * @return The typeId.
   */
  @java.lang.Override
  public java.lang.String getTypeId() {
    java.lang.Object ref = typeId_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      typeId_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * A name/code/ID to uniquely identify the logical event type within the service providing the events. E.g. a Windows eventId (i.e. representing 'Failed logon', 'Change password attempt', etc.) or for application logging: SaveRecord, ViewUserRecord, ViewSearchResults, etc. The granularity will depend on the application. Typically, the number of unique TypeIds will be in the 10s. Note, the values of the TypeId are not meant to be globally consistent, they will only be relevant within that service providing the events.
   * </pre>
   *
   * <code>string type_id = 1 [json_name = "typeId", (.buf.validate.field) = { ... }</code>
   * @return The bytes for typeId.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTypeIdBytes() {
    java.lang.Object ref = typeId_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      typeId_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DESCRIPTION_FIELD_NUMBER = 2;
  @SuppressWarnings("serial")
  private volatile java.lang.Object description_ = "";
  /**
   * <pre>
   * Some human-readable descriptive text for the event type.
   * </pre>
   *
   * <code>string description = 2 [json_name = "description"];</code>
   * @return The description.
   */
  @java.lang.Override
  public java.lang.String getDescription() {
    java.lang.Object ref = description_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      description_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Some human-readable descriptive text for the event type.
   * </pre>
   *
   * <code>string description = 2 [json_name = "description"];</code>
   * @return The bytes for description.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getDescriptionBytes() {
    java.lang.Object ref = description_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      description_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int PURPOSE_FIELD_NUMBER = 3;
  private uk.gov.gchq.event_logging.v4.PurposeComplexType purpose_;
  /**
   * <pre>
   * The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
   * </pre>
   *
   * <code>.event_logging.v4.PurposeComplexType purpose = 3 [json_name = "purpose"];</code>
   * @return Whether the purpose field is set.
   */
  @java.lang.Override
  public boolean hasPurpose() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
   * </pre>
   *
   * <code>.event_logging.v4.PurposeComplexType purpose = 3 [json_name = "purpose"];</code>
   * @return The purpose.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.PurposeComplexType getPurpose() {
    return purpose_ == null ? uk.gov.gchq.event_logging.v4.PurposeComplexType.getDefaultInstance() : purpose_;
  }
  /**
   * <pre>
   * The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
   * </pre>
   *
   * <code>.event_logging.v4.PurposeComplexType purpose = 3 [json_name = "purpose"];</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.PurposeComplexTypeOrBuilder getPurposeOrBuilder() {
    return purpose_ == null ? uk.gov.gchq.event_logging.v4.PurposeComplexType.getDefaultInstance() : purpose_;
  }

  public static final int AUTHENTICATE_FIELD_NUMBER = 4;
  private uk.gov.gchq.event_logging.v4.AuthenticateComplexType authenticate_;
  /**
   * <pre>
   * Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateComplexType authenticate = 4 [json_name = "authenticate", (.buf.validate.field) = { ... }</code>
   * @return Whether the authenticate field is set.
   */
  @java.lang.Override
  public boolean hasAuthenticate() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateComplexType authenticate = 4 [json_name = "authenticate", (.buf.validate.field) = { ... }</code>
   * @return The authenticate.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.AuthenticateComplexType getAuthenticate() {
    return authenticate_ == null ? uk.gov.gchq.event_logging.v4.AuthenticateComplexType.getDefaultInstance() : authenticate_;
  }
  /**
   * <pre>
   * Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateComplexType authenticate = 4 [json_name = "authenticate", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.AuthenticateComplexTypeOrBuilder getAuthenticateOrBuilder() {
    return authenticate_ == null ? uk.gov.gchq.event_logging.v4.AuthenticateComplexType.getDefaultInstance() : authenticate_;
  }

  public static final int AUTHORISE_FIELD_NUMBER = 5;
  private uk.gov.gchq.event_logging.v4.AuthoriseComplexType authorise_;
  /**
   * <pre>
   * All events related to account management such as adding and removing user and system accounts.
   * </pre>
   *
   * <code>.event_logging.v4.AuthoriseComplexType authorise = 5 [json_name = "authorise", (.buf.validate.field) = { ... }</code>
   * @return Whether the authorise field is set.
   */
  @java.lang.Override
  public boolean hasAuthorise() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * All events related to account management such as adding and removing user and system accounts.
   * </pre>
   *
   * <code>.event_logging.v4.AuthoriseComplexType authorise = 5 [json_name = "authorise", (.buf.validate.field) = { ... }</code>
   * @return The authorise.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.AuthoriseComplexType getAuthorise() {
    return authorise_ == null ? uk.gov.gchq.event_logging.v4.AuthoriseComplexType.getDefaultInstance() : authorise_;
  }
  /**
   * <pre>
   * All events related to account management such as adding and removing user and system accounts.
   * </pre>
   *
   * <code>.event_logging.v4.AuthoriseComplexType authorise = 5 [json_name = "authorise", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.AuthoriseComplexTypeOrBuilder getAuthoriseOrBuilder() {
    return authorise_ == null ? uk.gov.gchq.event_logging.v4.AuthoriseComplexType.getDefaultInstance() : authorise_;
  }

  public static final int SEARCH_FIELD_NUMBER = 6;
  private uk.gov.gchq.event_logging.v4.SearchComplexType search_;
  /**
   * <pre>
   * Any events related to searching for data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.SearchComplexType search = 6 [json_name = "search", (.buf.validate.field) = { ... }</code>
   * @return Whether the search field is set.
   */
  @java.lang.Override
  public boolean hasSearch() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Any events related to searching for data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.SearchComplexType search = 6 [json_name = "search", (.buf.validate.field) = { ... }</code>
   * @return The search.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.SearchComplexType getSearch() {
    return search_ == null ? uk.gov.gchq.event_logging.v4.SearchComplexType.getDefaultInstance() : search_;
  }
  /**
   * <pre>
   * Any events related to searching for data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.SearchComplexType search = 6 [json_name = "search", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.SearchComplexTypeOrBuilder getSearchOrBuilder() {
    return search_ == null ? uk.gov.gchq.event_logging.v4.SearchComplexType.getDefaultInstance() : search_;
  }

  public static final int COPY_FIELD_NUMBER = 7;
  private uk.gov.gchq.event_logging.v4.CopyComplexType copy_;
  /**
   * <pre>
   * All events related to copying data, files, documents, etc. should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.CopyComplexType copy = 7 [json_name = "copy", (.buf.validate.field) = { ... }</code>
   * @return Whether the copy field is set.
   */
  @java.lang.Override
  public boolean hasCopy() {
    return ((bitField0_ & 0x00000010) != 0);
  }
  /**
   * <pre>
   * All events related to copying data, files, documents, etc. should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.CopyComplexType copy = 7 [json_name = "copy", (.buf.validate.field) = { ... }</code>
   * @return The copy.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.CopyComplexType getCopy() {
    return copy_ == null ? uk.gov.gchq.event_logging.v4.CopyComplexType.getDefaultInstance() : copy_;
  }
  /**
   * <pre>
   * All events related to copying data, files, documents, etc. should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.CopyComplexType copy = 7 [json_name = "copy", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.CopyComplexTypeOrBuilder getCopyOrBuilder() {
    return copy_ == null ? uk.gov.gchq.event_logging.v4.CopyComplexType.getDefaultInstance() : copy_;
  }

  public static final int MOVE_FIELD_NUMBER = 8;
  private uk.gov.gchq.event_logging.v4.MoveComplexType move_;
  /**
   * <pre>
   * All events related to moving data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.MoveComplexType move = 8 [json_name = "move", (.buf.validate.field) = { ... }</code>
   * @return Whether the move field is set.
   */
  @java.lang.Override
  public boolean hasMove() {
    return ((bitField0_ & 0x00000020) != 0);
  }
  /**
   * <pre>
   * All events related to moving data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.MoveComplexType move = 8 [json_name = "move", (.buf.validate.field) = { ... }</code>
   * @return The move.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.MoveComplexType getMove() {
    return move_ == null ? uk.gov.gchq.event_logging.v4.MoveComplexType.getDefaultInstance() : move_;
  }
  /**
   * <pre>
   * All events related to moving data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.MoveComplexType move = 8 [json_name = "move", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.MoveComplexTypeOrBuilder getMoveOrBuilder() {
    return move_ == null ? uk.gov.gchq.event_logging.v4.MoveComplexType.getDefaultInstance() : move_;
  }

  public static final int CREATE_FIELD_NUMBER = 9;
  private uk.gov.gchq.event_logging.v4.CreateComplexType create_;
  /**
   * <pre>
   * All events related to creating data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.CreateComplexType create = 9 [json_name = "create", (.buf.validate.field) = { ... }</code>
   * @return Whether the create field is set.
   */
  @java.lang.Override
  public boolean hasCreate() {
    return ((bitField0_ & 0x00000040) != 0);
  }
  /**
   * <pre>
   * All events related to creating data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.CreateComplexType create = 9 [json_name = "create", (.buf.validate.field) = { ... }</code>
   * @return The create.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.CreateComplexType getCreate() {
    return create_ == null ? uk.gov.gchq.event_logging.v4.CreateComplexType.getDefaultInstance() : create_;
  }
  /**
   * <pre>
   * All events related to creating data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.CreateComplexType create = 9 [json_name = "create", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.CreateComplexTypeOrBuilder getCreateOrBuilder() {
    return create_ == null ? uk.gov.gchq.event_logging.v4.CreateComplexType.getDefaultInstance() : create_;
  }

  public static final int VIEW_FIELD_NUMBER = 10;
  private uk.gov.gchq.event_logging.v4.ViewComplexType view_;
  /**
   * <pre>
   * All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
   * </pre>
   *
   * <code>.event_logging.v4.ViewComplexType view = 10 [json_name = "view", (.buf.validate.field) = { ... }</code>
   * @return Whether the view field is set.
   */
  @java.lang.Override
  public boolean hasView() {
    return ((bitField0_ & 0x00000080) != 0);
  }
  /**
   * <pre>
   * All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
   * </pre>
   *
   * <code>.event_logging.v4.ViewComplexType view = 10 [json_name = "view", (.buf.validate.field) = { ... }</code>
   * @return The view.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.ViewComplexType getView() {
    return view_ == null ? uk.gov.gchq.event_logging.v4.ViewComplexType.getDefaultInstance() : view_;
  }
  /**
   * <pre>
   * All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
   * </pre>
   *
   * <code>.event_logging.v4.ViewComplexType view = 10 [json_name = "view", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.ViewComplexTypeOrBuilder getViewOrBuilder() {
    return view_ == null ? uk.gov.gchq.event_logging.v4.ViewComplexType.getDefaultInstance() : view_;
  }

  public static final int IMPORT_FIELD_FIELD_NUMBER = 11;
  private uk.gov.gchq.event_logging.v4.ImportComplexType importField_;
  /**
   * <pre>
   * All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
   * </pre>
   *
   * <code>.event_logging.v4.ImportComplexType import_field = 11 [json_name = "importField", (.buf.validate.field) = { ... }</code>
   * @return Whether the importField field is set.
   */
  @java.lang.Override
  public boolean hasImportField() {
    return ((bitField0_ & 0x00000100) != 0);
  }
  /**
   * <pre>
   * All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
   * </pre>
   *
   * <code>.event_logging.v4.ImportComplexType import_field = 11 [json_name = "importField", (.buf.validate.field) = { ... }</code>
   * @return The importField.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.ImportComplexType getImportField() {
    return importField_ == null ? uk.gov.gchq.event_logging.v4.ImportComplexType.getDefaultInstance() : importField_;
  }
  /**
   * <pre>
   * All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
   * </pre>
   *
   * <code>.event_logging.v4.ImportComplexType import_field = 11 [json_name = "importField", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.ImportComplexTypeOrBuilder getImportFieldOrBuilder() {
    return importField_ == null ? uk.gov.gchq.event_logging.v4.ImportComplexType.getDefaultInstance() : importField_;
  }

  public static final int EXPORT_FIELD_NUMBER = 12;
  private uk.gov.gchq.event_logging.v4.ExportComplexType export_;
  /**
   * <pre>
   * All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
   * </pre>
   *
   * <code>.event_logging.v4.ExportComplexType export = 12 [json_name = "export", (.buf.validate.field) = { ... }</code>
   * @return Whether the export field is set.
   */
  @java.lang.Override
  public boolean hasExport() {
    return ((bitField0_ & 0x00000200) != 0);
  }
  /**
   * <pre>
   * All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
   * </pre>
   *
   * <code>.event_logging.v4.ExportComplexType export = 12 [json_name = "export", (.buf.validate.field) = { ... }</code>
   * @return The export.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.ExportComplexType getExport() {
    return export_ == null ? uk.gov.gchq.event_logging.v4.ExportComplexType.getDefaultInstance() : export_;
  }
  /**
   * <pre>
   * All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
   * </pre>
   *
   * <code>.event_logging.v4.ExportComplexType export = 12 [json_name = "export", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.ExportComplexTypeOrBuilder getExportOrBuilder() {
    return export_ == null ? uk.gov.gchq.event_logging.v4.ExportComplexType.getDefaultInstance() : export_;
  }

  public static final int UPDATE_FIELD_NUMBER = 13;
  private uk.gov.gchq.event_logging.v4.UpdateComplexType update_;
  /**
   * <pre>
   * All events related to updating data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.UpdateComplexType update = 13 [json_name = "update", (.buf.validate.field) = { ... }</code>
   * @return Whether the update field is set.
   */
  @java.lang.Override
  public boolean hasUpdate() {
    return ((bitField0_ & 0x00000400) != 0);
  }
  /**
   * <pre>
   * All events related to updating data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.UpdateComplexType update = 13 [json_name = "update", (.buf.validate.field) = { ... }</code>
   * @return The update.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.UpdateComplexType getUpdate() {
    return update_ == null ? uk.gov.gchq.event_logging.v4.UpdateComplexType.getDefaultInstance() : update_;
  }
  /**
   * <pre>
   * All events related to updating data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.UpdateComplexType update = 13 [json_name = "update", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.UpdateComplexTypeOrBuilder getUpdateOrBuilder() {
    return update_ == null ? uk.gov.gchq.event_logging.v4.UpdateComplexType.getDefaultInstance() : update_;
  }

  public static final int DELETE_FIELD_NUMBER = 14;
  private uk.gov.gchq.event_logging.v4.DeleteComplexType delete_;
  /**
   * <pre>
   * All events related to deleting data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.DeleteComplexType delete = 14 [json_name = "delete", (.buf.validate.field) = { ... }</code>
   * @return Whether the delete field is set.
   */
  @java.lang.Override
  public boolean hasDelete() {
    return ((bitField0_ & 0x00000800) != 0);
  }
  /**
   * <pre>
   * All events related to deleting data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.DeleteComplexType delete = 14 [json_name = "delete", (.buf.validate.field) = { ... }</code>
   * @return The delete.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.DeleteComplexType getDelete() {
    return delete_ == null ? uk.gov.gchq.event_logging.v4.DeleteComplexType.getDefaultInstance() : delete_;
  }
  /**
   * <pre>
   * All events related to deleting data should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.DeleteComplexType delete = 14 [json_name = "delete", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.DeleteComplexTypeOrBuilder getDeleteOrBuilder() {
    return delete_ == null ? uk.gov.gchq.event_logging.v4.DeleteComplexType.getDefaultInstance() : delete_;
  }

  public static final int PROCESS_FIELD_NUMBER = 15;
  private uk.gov.gchq.event_logging.v4.ProcessComplexType process_;
  /**
   * <pre>
   * Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
   * </pre>
   *
   * <code>.event_logging.v4.ProcessComplexType process = 15 [json_name = "process", (.buf.validate.field) = { ... }</code>
   * @return Whether the process field is set.
   */
  @java.lang.Override
  public boolean hasProcess() {
    return ((bitField0_ & 0x00001000) != 0);
  }
  /**
   * <pre>
   * Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
   * </pre>
   *
   * <code>.event_logging.v4.ProcessComplexType process = 15 [json_name = "process", (.buf.validate.field) = { ... }</code>
   * @return The process.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.ProcessComplexType getProcess() {
    return process_ == null ? uk.gov.gchq.event_logging.v4.ProcessComplexType.getDefaultInstance() : process_;
  }
  /**
   * <pre>
   * Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
   * </pre>
   *
   * <code>.event_logging.v4.ProcessComplexType process = 15 [json_name = "process", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.ProcessComplexTypeOrBuilder getProcessOrBuilder() {
    return process_ == null ? uk.gov.gchq.event_logging.v4.ProcessComplexType.getDefaultInstance() : process_;
  }

  public static final int PRINT_FIELD_NUMBER = 16;
  private uk.gov.gchq.event_logging.v4.PrintComplexType print_;
  /**
   * <pre>
   * All events related to printing should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.PrintComplexType print = 16 [json_name = "print", (.buf.validate.field) = { ... }</code>
   * @return Whether the print field is set.
   */
  @java.lang.Override
  public boolean hasPrint() {
    return ((bitField0_ & 0x00002000) != 0);
  }
  /**
   * <pre>
   * All events related to printing should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.PrintComplexType print = 16 [json_name = "print", (.buf.validate.field) = { ... }</code>
   * @return The print.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.PrintComplexType getPrint() {
    return print_ == null ? uk.gov.gchq.event_logging.v4.PrintComplexType.getDefaultInstance() : print_;
  }
  /**
   * <pre>
   * All events related to printing should use this element.
   * </pre>
   *
   * <code>.event_logging.v4.PrintComplexType print = 16 [json_name = "print", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.PrintComplexTypeOrBuilder getPrintOrBuilder() {
    return print_ == null ? uk.gov.gchq.event_logging.v4.PrintComplexType.getDefaultInstance() : print_;
  }

  public static final int INSTALL_FIELD_NUMBER = 17;
  private uk.gov.gchq.event_logging.v4.InstallComplexType install_;
  /**
   * <pre>
   * Details about installation of either hardware or software.
   * </pre>
   *
   * <code>.event_logging.v4.InstallComplexType install = 17 [json_name = "install", (.buf.validate.field) = { ... }</code>
   * @return Whether the install field is set.
   */
  @java.lang.Override
  public boolean hasInstall() {
    return ((bitField0_ & 0x00004000) != 0);
  }
  /**
   * <pre>
   * Details about installation of either hardware or software.
   * </pre>
   *
   * <code>.event_logging.v4.InstallComplexType install = 17 [json_name = "install", (.buf.validate.field) = { ... }</code>
   * @return The install.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.InstallComplexType getInstall() {
    return install_ == null ? uk.gov.gchq.event_logging.v4.InstallComplexType.getDefaultInstance() : install_;
  }
  /**
   * <pre>
   * Details about installation of either hardware or software.
   * </pre>
   *
   * <code>.event_logging.v4.InstallComplexType install = 17 [json_name = "install", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.InstallComplexTypeOrBuilder getInstallOrBuilder() {
    return install_ == null ? uk.gov.gchq.event_logging.v4.InstallComplexType.getDefaultInstance() : install_;
  }

  public static final int UNINSTALL_FIELD_NUMBER = 18;
  private uk.gov.gchq.event_logging.v4.UninstallComplexType uninstall_;
  /**
   * <pre>
   * Details about removal of either hardware or software.
   * </pre>
   *
   * <code>.event_logging.v4.UninstallComplexType uninstall = 18 [json_name = "uninstall", (.buf.validate.field) = { ... }</code>
   * @return Whether the uninstall field is set.
   */
  @java.lang.Override
  public boolean hasUninstall() {
    return ((bitField0_ & 0x00008000) != 0);
  }
  /**
   * <pre>
   * Details about removal of either hardware or software.
   * </pre>
   *
   * <code>.event_logging.v4.UninstallComplexType uninstall = 18 [json_name = "uninstall", (.buf.validate.field) = { ... }</code>
   * @return The uninstall.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.UninstallComplexType getUninstall() {
    return uninstall_ == null ? uk.gov.gchq.event_logging.v4.UninstallComplexType.getDefaultInstance() : uninstall_;
  }
  /**
   * <pre>
   * Details about removal of either hardware or software.
   * </pre>
   *
   * <code>.event_logging.v4.UninstallComplexType uninstall = 18 [json_name = "uninstall", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.UninstallComplexTypeOrBuilder getUninstallOrBuilder() {
    return uninstall_ == null ? uk.gov.gchq.event_logging.v4.UninstallComplexType.getDefaultInstance() : uninstall_;
  }

  public static final int NETWORK_FIELD_NUMBER = 19;
  private uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType network_;
  /**
   * <pre>
   * Any events related to network traffic, filtering or access should be recorded using this element.
   * </pre>
   *
   * <code>.event_logging.v4.NetworkEventActionComplexType network = 19 [json_name = "network", (.buf.validate.field) = { ... }</code>
   * @return Whether the network field is set.
   */
  @java.lang.Override
  public boolean hasNetwork() {
    return ((bitField0_ & 0x00010000) != 0);
  }
  /**
   * <pre>
   * Any events related to network traffic, filtering or access should be recorded using this element.
   * </pre>
   *
   * <code>.event_logging.v4.NetworkEventActionComplexType network = 19 [json_name = "network", (.buf.validate.field) = { ... }</code>
   * @return The network.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType getNetwork() {
    return network_ == null ? uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType.getDefaultInstance() : network_;
  }
  /**
   * <pre>
   * Any events related to network traffic, filtering or access should be recorded using this element.
   * </pre>
   *
   * <code>.event_logging.v4.NetworkEventActionComplexType network = 19 [json_name = "network", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.NetworkEventActionComplexTypeOrBuilder getNetworkOrBuilder() {
    return network_ == null ? uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType.getDefaultInstance() : network_;
  }

  public static final int ALERT_FIELD_NUMBER = 20;
  private uk.gov.gchq.event_logging.v4.AlertComplexType alert_;
  /**
   * <pre>
   * An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
   * </pre>
   *
   * <code>.event_logging.v4.AlertComplexType alert = 20 [json_name = "alert", (.buf.validate.field) = { ... }</code>
   * @return Whether the alert field is set.
   */
  @java.lang.Override
  public boolean hasAlert() {
    return ((bitField0_ & 0x00020000) != 0);
  }
  /**
   * <pre>
   * An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
   * </pre>
   *
   * <code>.event_logging.v4.AlertComplexType alert = 20 [json_name = "alert", (.buf.validate.field) = { ... }</code>
   * @return The alert.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.AlertComplexType getAlert() {
    return alert_ == null ? uk.gov.gchq.event_logging.v4.AlertComplexType.getDefaultInstance() : alert_;
  }
  /**
   * <pre>
   * An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
   * </pre>
   *
   * <code>.event_logging.v4.AlertComplexType alert = 20 [json_name = "alert", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.AlertComplexTypeOrBuilder getAlertOrBuilder() {
    return alert_ == null ? uk.gov.gchq.event_logging.v4.AlertComplexType.getDefaultInstance() : alert_;
  }

  public static final int SEND_FIELD_NUMBER = 21;
  private uk.gov.gchq.event_logging.v4.SendComplexType send_;
  /**
   * <pre>
   * Used for send events that are at a higher level than a network/send event, e.g. sending an email
   * </pre>
   *
   * <code>.event_logging.v4.SendComplexType send = 21 [json_name = "send", (.buf.validate.field) = { ... }</code>
   * @return Whether the send field is set.
   */
  @java.lang.Override
  public boolean hasSend() {
    return ((bitField0_ & 0x00040000) != 0);
  }
  /**
   * <pre>
   * Used for send events that are at a higher level than a network/send event, e.g. sending an email
   * </pre>
   *
   * <code>.event_logging.v4.SendComplexType send = 21 [json_name = "send", (.buf.validate.field) = { ... }</code>
   * @return The send.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.SendComplexType getSend() {
    return send_ == null ? uk.gov.gchq.event_logging.v4.SendComplexType.getDefaultInstance() : send_;
  }
  /**
   * <pre>
   * Used for send events that are at a higher level than a network/send event, e.g. sending an email
   * </pre>
   *
   * <code>.event_logging.v4.SendComplexType send = 21 [json_name = "send", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.SendComplexTypeOrBuilder getSendOrBuilder() {
    return send_ == null ? uk.gov.gchq.event_logging.v4.SendComplexType.getDefaultInstance() : send_;
  }

  public static final int RECEIVE_FIELD_NUMBER = 22;
  private uk.gov.gchq.event_logging.v4.ReceiveComplexType receive_;
  /**
   * <pre>
   * Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
   * </pre>
   *
   * <code>.event_logging.v4.ReceiveComplexType receive = 22 [json_name = "receive", (.buf.validate.field) = { ... }</code>
   * @return Whether the receive field is set.
   */
  @java.lang.Override
  public boolean hasReceive() {
    return ((bitField0_ & 0x00080000) != 0);
  }
  /**
   * <pre>
   * Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
   * </pre>
   *
   * <code>.event_logging.v4.ReceiveComplexType receive = 22 [json_name = "receive", (.buf.validate.field) = { ... }</code>
   * @return The receive.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.ReceiveComplexType getReceive() {
    return receive_ == null ? uk.gov.gchq.event_logging.v4.ReceiveComplexType.getDefaultInstance() : receive_;
  }
  /**
   * <pre>
   * Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
   * </pre>
   *
   * <code>.event_logging.v4.ReceiveComplexType receive = 22 [json_name = "receive", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.ReceiveComplexTypeOrBuilder getReceiveOrBuilder() {
    return receive_ == null ? uk.gov.gchq.event_logging.v4.ReceiveComplexType.getDefaultInstance() : receive_;
  }

  public static final int APPROVAL_FIELD_NUMBER = 23;
  private uk.gov.gchq.event_logging.v4.ApprovalComplexType approval_;
  /**
   * <pre>
   * Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
   * </pre>
   *
   * <code>.event_logging.v4.ApprovalComplexType approval = 23 [json_name = "approval", (.buf.validate.field) = { ... }</code>
   * @return Whether the approval field is set.
   */
  @java.lang.Override
  public boolean hasApproval() {
    return ((bitField0_ & 0x00100000) != 0);
  }
  /**
   * <pre>
   * Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
   * </pre>
   *
   * <code>.event_logging.v4.ApprovalComplexType approval = 23 [json_name = "approval", (.buf.validate.field) = { ... }</code>
   * @return The approval.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.ApprovalComplexType getApproval() {
    return approval_ == null ? uk.gov.gchq.event_logging.v4.ApprovalComplexType.getDefaultInstance() : approval_;
  }
  /**
   * <pre>
   * Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
   * </pre>
   *
   * <code>.event_logging.v4.ApprovalComplexType approval = 23 [json_name = "approval", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.ApprovalComplexTypeOrBuilder getApprovalOrBuilder() {
    return approval_ == null ? uk.gov.gchq.event_logging.v4.ApprovalComplexType.getDefaultInstance() : approval_;
  }

  public static final int UNKNOWN_FIELD_NUMBER = 24;
  private uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType unknown_;
  /**
   * <pre>
   * This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
   * </pre>
   *
   * <code>.event_logging.v4.EventDetailComplexType.UnknownType unknown = 24 [json_name = "unknown", (.buf.validate.field) = { ... }</code>
   * @return Whether the unknown field is set.
   */
  @java.lang.Override
  public boolean hasUnknown() {
    return ((bitField0_ & 0x00200000) != 0);
  }
  /**
   * <pre>
   * This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
   * </pre>
   *
   * <code>.event_logging.v4.EventDetailComplexType.UnknownType unknown = 24 [json_name = "unknown", (.buf.validate.field) = { ... }</code>
   * @return The unknown.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType getUnknown() {
    return unknown_ == null ? uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.getDefaultInstance() : unknown_;
  }
  /**
   * <pre>
   * This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
   * </pre>
   *
   * <code>.event_logging.v4.EventDetailComplexType.UnknownType unknown = 24 [json_name = "unknown", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownTypeOrBuilder getUnknownOrBuilder() {
    return unknown_ == null ? uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.getDefaultInstance() : unknown_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(typeId_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 1, typeId_);
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(description_)) {
      com.google.protobuf.GeneratedMessage.writeString(output, 2, description_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(3, getPurpose());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(4, getAuthenticate());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(5, getAuthorise());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(6, getSearch());
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      output.writeMessage(7, getCopy());
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      output.writeMessage(8, getMove());
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      output.writeMessage(9, getCreate());
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      output.writeMessage(10, getView());
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      output.writeMessage(11, getImportField());
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      output.writeMessage(12, getExport());
    }
    if (((bitField0_ & 0x00000400) != 0)) {
      output.writeMessage(13, getUpdate());
    }
    if (((bitField0_ & 0x00000800) != 0)) {
      output.writeMessage(14, getDelete());
    }
    if (((bitField0_ & 0x00001000) != 0)) {
      output.writeMessage(15, getProcess());
    }
    if (((bitField0_ & 0x00002000) != 0)) {
      output.writeMessage(16, getPrint());
    }
    if (((bitField0_ & 0x00004000) != 0)) {
      output.writeMessage(17, getInstall());
    }
    if (((bitField0_ & 0x00008000) != 0)) {
      output.writeMessage(18, getUninstall());
    }
    if (((bitField0_ & 0x00010000) != 0)) {
      output.writeMessage(19, getNetwork());
    }
    if (((bitField0_ & 0x00020000) != 0)) {
      output.writeMessage(20, getAlert());
    }
    if (((bitField0_ & 0x00040000) != 0)) {
      output.writeMessage(21, getSend());
    }
    if (((bitField0_ & 0x00080000) != 0)) {
      output.writeMessage(22, getReceive());
    }
    if (((bitField0_ & 0x00100000) != 0)) {
      output.writeMessage(23, getApproval());
    }
    if (((bitField0_ & 0x00200000) != 0)) {
      output.writeMessage(24, getUnknown());
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(typeId_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(1, typeId_);
    }
    if (!com.google.protobuf.GeneratedMessage.isStringEmpty(description_)) {
      size += com.google.protobuf.GeneratedMessage.computeStringSize(2, description_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getPurpose());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getAuthenticate());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getAuthorise());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, getSearch());
    }
    if (((bitField0_ & 0x00000010) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, getCopy());
    }
    if (((bitField0_ & 0x00000020) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, getMove());
    }
    if (((bitField0_ & 0x00000040) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, getCreate());
    }
    if (((bitField0_ & 0x00000080) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, getView());
    }
    if (((bitField0_ & 0x00000100) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getImportField());
    }
    if (((bitField0_ & 0x00000200) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, getExport());
    }
    if (((bitField0_ & 0x00000400) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, getUpdate());
    }
    if (((bitField0_ & 0x00000800) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, getDelete());
    }
    if (((bitField0_ & 0x00001000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, getProcess());
    }
    if (((bitField0_ & 0x00002000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, getPrint());
    }
    if (((bitField0_ & 0x00004000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, getInstall());
    }
    if (((bitField0_ & 0x00008000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(18, getUninstall());
    }
    if (((bitField0_ & 0x00010000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, getNetwork());
    }
    if (((bitField0_ & 0x00020000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, getAlert());
    }
    if (((bitField0_ & 0x00040000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, getSend());
    }
    if (((bitField0_ & 0x00080000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(22, getReceive());
    }
    if (((bitField0_ & 0x00100000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(23, getApproval());
    }
    if (((bitField0_ & 0x00200000) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(24, getUnknown());
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof uk.gov.gchq.event_logging.v4.EventDetailComplexType)) {
      return super.equals(obj);
    }
    uk.gov.gchq.event_logging.v4.EventDetailComplexType other = (uk.gov.gchq.event_logging.v4.EventDetailComplexType) obj;

    if (!getTypeId()
        .equals(other.getTypeId())) return false;
    if (!getDescription()
        .equals(other.getDescription())) return false;
    if (hasPurpose() != other.hasPurpose()) return false;
    if (hasPurpose()) {
      if (!getPurpose()
          .equals(other.getPurpose())) return false;
    }
    if (hasAuthenticate() != other.hasAuthenticate()) return false;
    if (hasAuthenticate()) {
      if (!getAuthenticate()
          .equals(other.getAuthenticate())) return false;
    }
    if (hasAuthorise() != other.hasAuthorise()) return false;
    if (hasAuthorise()) {
      if (!getAuthorise()
          .equals(other.getAuthorise())) return false;
    }
    if (hasSearch() != other.hasSearch()) return false;
    if (hasSearch()) {
      if (!getSearch()
          .equals(other.getSearch())) return false;
    }
    if (hasCopy() != other.hasCopy()) return false;
    if (hasCopy()) {
      if (!getCopy()
          .equals(other.getCopy())) return false;
    }
    if (hasMove() != other.hasMove()) return false;
    if (hasMove()) {
      if (!getMove()
          .equals(other.getMove())) return false;
    }
    if (hasCreate() != other.hasCreate()) return false;
    if (hasCreate()) {
      if (!getCreate()
          .equals(other.getCreate())) return false;
    }
    if (hasView() != other.hasView()) return false;
    if (hasView()) {
      if (!getView()
          .equals(other.getView())) return false;
    }
    if (hasImportField() != other.hasImportField()) return false;
    if (hasImportField()) {
      if (!getImportField()
          .equals(other.getImportField())) return false;
    }
    if (hasExport() != other.hasExport()) return false;
    if (hasExport()) {
      if (!getExport()
          .equals(other.getExport())) return false;
    }
    if (hasUpdate() != other.hasUpdate()) return false;
    if (hasUpdate()) {
      if (!getUpdate()
          .equals(other.getUpdate())) return false;
    }
    if (hasDelete() != other.hasDelete()) return false;
    if (hasDelete()) {
      if (!getDelete()
          .equals(other.getDelete())) return false;
    }
    if (hasProcess() != other.hasProcess()) return false;
    if (hasProcess()) {
      if (!getProcess()
          .equals(other.getProcess())) return false;
    }
    if (hasPrint() != other.hasPrint()) return false;
    if (hasPrint()) {
      if (!getPrint()
          .equals(other.getPrint())) return false;
    }
    if (hasInstall() != other.hasInstall()) return false;
    if (hasInstall()) {
      if (!getInstall()
          .equals(other.getInstall())) return false;
    }
    if (hasUninstall() != other.hasUninstall()) return false;
    if (hasUninstall()) {
      if (!getUninstall()
          .equals(other.getUninstall())) return false;
    }
    if (hasNetwork() != other.hasNetwork()) return false;
    if (hasNetwork()) {
      if (!getNetwork()
          .equals(other.getNetwork())) return false;
    }
    if (hasAlert() != other.hasAlert()) return false;
    if (hasAlert()) {
      if (!getAlert()
          .equals(other.getAlert())) return false;
    }
    if (hasSend() != other.hasSend()) return false;
    if (hasSend()) {
      if (!getSend()
          .equals(other.getSend())) return false;
    }
    if (hasReceive() != other.hasReceive()) return false;
    if (hasReceive()) {
      if (!getReceive()
          .equals(other.getReceive())) return false;
    }
    if (hasApproval() != other.hasApproval()) return false;
    if (hasApproval()) {
      if (!getApproval()
          .equals(other.getApproval())) return false;
    }
    if (hasUnknown() != other.hasUnknown()) return false;
    if (hasUnknown()) {
      if (!getUnknown()
          .equals(other.getUnknown())) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + TYPE_ID_FIELD_NUMBER;
    hash = (53 * hash) + getTypeId().hashCode();
    hash = (37 * hash) + DESCRIPTION_FIELD_NUMBER;
    hash = (53 * hash) + getDescription().hashCode();
    if (hasPurpose()) {
      hash = (37 * hash) + PURPOSE_FIELD_NUMBER;
      hash = (53 * hash) + getPurpose().hashCode();
    }
    if (hasAuthenticate()) {
      hash = (37 * hash) + AUTHENTICATE_FIELD_NUMBER;
      hash = (53 * hash) + getAuthenticate().hashCode();
    }
    if (hasAuthorise()) {
      hash = (37 * hash) + AUTHORISE_FIELD_NUMBER;
      hash = (53 * hash) + getAuthorise().hashCode();
    }
    if (hasSearch()) {
      hash = (37 * hash) + SEARCH_FIELD_NUMBER;
      hash = (53 * hash) + getSearch().hashCode();
    }
    if (hasCopy()) {
      hash = (37 * hash) + COPY_FIELD_NUMBER;
      hash = (53 * hash) + getCopy().hashCode();
    }
    if (hasMove()) {
      hash = (37 * hash) + MOVE_FIELD_NUMBER;
      hash = (53 * hash) + getMove().hashCode();
    }
    if (hasCreate()) {
      hash = (37 * hash) + CREATE_FIELD_NUMBER;
      hash = (53 * hash) + getCreate().hashCode();
    }
    if (hasView()) {
      hash = (37 * hash) + VIEW_FIELD_NUMBER;
      hash = (53 * hash) + getView().hashCode();
    }
    if (hasImportField()) {
      hash = (37 * hash) + IMPORT_FIELD_FIELD_NUMBER;
      hash = (53 * hash) + getImportField().hashCode();
    }
    if (hasExport()) {
      hash = (37 * hash) + EXPORT_FIELD_NUMBER;
      hash = (53 * hash) + getExport().hashCode();
    }
    if (hasUpdate()) {
      hash = (37 * hash) + UPDATE_FIELD_NUMBER;
      hash = (53 * hash) + getUpdate().hashCode();
    }
    if (hasDelete()) {
      hash = (37 * hash) + DELETE_FIELD_NUMBER;
      hash = (53 * hash) + getDelete().hashCode();
    }
    if (hasProcess()) {
      hash = (37 * hash) + PROCESS_FIELD_NUMBER;
      hash = (53 * hash) + getProcess().hashCode();
    }
    if (hasPrint()) {
      hash = (37 * hash) + PRINT_FIELD_NUMBER;
      hash = (53 * hash) + getPrint().hashCode();
    }
    if (hasInstall()) {
      hash = (37 * hash) + INSTALL_FIELD_NUMBER;
      hash = (53 * hash) + getInstall().hashCode();
    }
    if (hasUninstall()) {
      hash = (37 * hash) + UNINSTALL_FIELD_NUMBER;
      hash = (53 * hash) + getUninstall().hashCode();
    }
    if (hasNetwork()) {
      hash = (37 * hash) + NETWORK_FIELD_NUMBER;
      hash = (53 * hash) + getNetwork().hashCode();
    }
    if (hasAlert()) {
      hash = (37 * hash) + ALERT_FIELD_NUMBER;
      hash = (53 * hash) + getAlert().hashCode();
    }
    if (hasSend()) {
      hash = (37 * hash) + SEND_FIELD_NUMBER;
      hash = (53 * hash) + getSend().hashCode();
    }
    if (hasReceive()) {
      hash = (37 * hash) + RECEIVE_FIELD_NUMBER;
      hash = (53 * hash) + getReceive().hashCode();
    }
    if (hasApproval()) {
      hash = (37 * hash) + APPROVAL_FIELD_NUMBER;
      hash = (53 * hash) + getApproval().hashCode();
    }
    if (hasUnknown()) {
      hash = (37 * hash) + UNKNOWN_FIELD_NUMBER;
      hash = (53 * hash) + getUnknown().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(uk.gov.gchq.event_logging.v4.EventDetailComplexType prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * This type describes the details of what happened in the event: the type of the event, why it happened and the event action.
   * </pre>
   *
   * Protobuf type {@code event_logging.v4.EventDetailComplexType}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:event_logging.v4.EventDetailComplexType)
      uk.gov.gchq.event_logging.v4.EventDetailComplexTypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return uk.gov.gchq.event_logging.v4.EventDetailComplexTypeProto.internal_static_event_logging_v4_EventDetailComplexType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return uk.gov.gchq.event_logging.v4.EventDetailComplexTypeProto.internal_static_event_logging_v4_EventDetailComplexType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              uk.gov.gchq.event_logging.v4.EventDetailComplexType.class, uk.gov.gchq.event_logging.v4.EventDetailComplexType.Builder.class);
    }

    // Construct using uk.gov.gchq.event_logging.v4.EventDetailComplexType.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getPurposeFieldBuilder();
        getAuthenticateFieldBuilder();
        getAuthoriseFieldBuilder();
        getSearchFieldBuilder();
        getCopyFieldBuilder();
        getMoveFieldBuilder();
        getCreateFieldBuilder();
        getViewFieldBuilder();
        getImportFieldFieldBuilder();
        getExportFieldBuilder();
        getUpdateFieldBuilder();
        getDeleteFieldBuilder();
        getProcessFieldBuilder();
        getPrintFieldBuilder();
        getInstallFieldBuilder();
        getUninstallFieldBuilder();
        getNetworkFieldBuilder();
        getAlertFieldBuilder();
        getSendFieldBuilder();
        getReceiveFieldBuilder();
        getApprovalFieldBuilder();
        getUnknownFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      typeId_ = "";
      description_ = "";
      purpose_ = null;
      if (purposeBuilder_ != null) {
        purposeBuilder_.dispose();
        purposeBuilder_ = null;
      }
      authenticate_ = null;
      if (authenticateBuilder_ != null) {
        authenticateBuilder_.dispose();
        authenticateBuilder_ = null;
      }
      authorise_ = null;
      if (authoriseBuilder_ != null) {
        authoriseBuilder_.dispose();
        authoriseBuilder_ = null;
      }
      search_ = null;
      if (searchBuilder_ != null) {
        searchBuilder_.dispose();
        searchBuilder_ = null;
      }
      copy_ = null;
      if (copyBuilder_ != null) {
        copyBuilder_.dispose();
        copyBuilder_ = null;
      }
      move_ = null;
      if (moveBuilder_ != null) {
        moveBuilder_.dispose();
        moveBuilder_ = null;
      }
      create_ = null;
      if (createBuilder_ != null) {
        createBuilder_.dispose();
        createBuilder_ = null;
      }
      view_ = null;
      if (viewBuilder_ != null) {
        viewBuilder_.dispose();
        viewBuilder_ = null;
      }
      importField_ = null;
      if (importFieldBuilder_ != null) {
        importFieldBuilder_.dispose();
        importFieldBuilder_ = null;
      }
      export_ = null;
      if (exportBuilder_ != null) {
        exportBuilder_.dispose();
        exportBuilder_ = null;
      }
      update_ = null;
      if (updateBuilder_ != null) {
        updateBuilder_.dispose();
        updateBuilder_ = null;
      }
      delete_ = null;
      if (deleteBuilder_ != null) {
        deleteBuilder_.dispose();
        deleteBuilder_ = null;
      }
      process_ = null;
      if (processBuilder_ != null) {
        processBuilder_.dispose();
        processBuilder_ = null;
      }
      print_ = null;
      if (printBuilder_ != null) {
        printBuilder_.dispose();
        printBuilder_ = null;
      }
      install_ = null;
      if (installBuilder_ != null) {
        installBuilder_.dispose();
        installBuilder_ = null;
      }
      uninstall_ = null;
      if (uninstallBuilder_ != null) {
        uninstallBuilder_.dispose();
        uninstallBuilder_ = null;
      }
      network_ = null;
      if (networkBuilder_ != null) {
        networkBuilder_.dispose();
        networkBuilder_ = null;
      }
      alert_ = null;
      if (alertBuilder_ != null) {
        alertBuilder_.dispose();
        alertBuilder_ = null;
      }
      send_ = null;
      if (sendBuilder_ != null) {
        sendBuilder_.dispose();
        sendBuilder_ = null;
      }
      receive_ = null;
      if (receiveBuilder_ != null) {
        receiveBuilder_.dispose();
        receiveBuilder_ = null;
      }
      approval_ = null;
      if (approvalBuilder_ != null) {
        approvalBuilder_.dispose();
        approvalBuilder_ = null;
      }
      unknown_ = null;
      if (unknownBuilder_ != null) {
        unknownBuilder_.dispose();
        unknownBuilder_ = null;
      }
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return uk.gov.gchq.event_logging.v4.EventDetailComplexTypeProto.internal_static_event_logging_v4_EventDetailComplexType_descriptor;
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventDetailComplexType getDefaultInstanceForType() {
      return uk.gov.gchq.event_logging.v4.EventDetailComplexType.getDefaultInstance();
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventDetailComplexType build() {
      uk.gov.gchq.event_logging.v4.EventDetailComplexType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventDetailComplexType buildPartial() {
      uk.gov.gchq.event_logging.v4.EventDetailComplexType result = new uk.gov.gchq.event_logging.v4.EventDetailComplexType(this);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartial0(uk.gov.gchq.event_logging.v4.EventDetailComplexType result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.typeId_ = typeId_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.description_ = description_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.purpose_ = purposeBuilder_ == null
            ? purpose_
            : purposeBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.authenticate_ = authenticateBuilder_ == null
            ? authenticate_
            : authenticateBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.authorise_ = authoriseBuilder_ == null
            ? authorise_
            : authoriseBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.search_ = searchBuilder_ == null
            ? search_
            : searchBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      if (((from_bitField0_ & 0x00000040) != 0)) {
        result.copy_ = copyBuilder_ == null
            ? copy_
            : copyBuilder_.build();
        to_bitField0_ |= 0x00000010;
      }
      if (((from_bitField0_ & 0x00000080) != 0)) {
        result.move_ = moveBuilder_ == null
            ? move_
            : moveBuilder_.build();
        to_bitField0_ |= 0x00000020;
      }
      if (((from_bitField0_ & 0x00000100) != 0)) {
        result.create_ = createBuilder_ == null
            ? create_
            : createBuilder_.build();
        to_bitField0_ |= 0x00000040;
      }
      if (((from_bitField0_ & 0x00000200) != 0)) {
        result.view_ = viewBuilder_ == null
            ? view_
            : viewBuilder_.build();
        to_bitField0_ |= 0x00000080;
      }
      if (((from_bitField0_ & 0x00000400) != 0)) {
        result.importField_ = importFieldBuilder_ == null
            ? importField_
            : importFieldBuilder_.build();
        to_bitField0_ |= 0x00000100;
      }
      if (((from_bitField0_ & 0x00000800) != 0)) {
        result.export_ = exportBuilder_ == null
            ? export_
            : exportBuilder_.build();
        to_bitField0_ |= 0x00000200;
      }
      if (((from_bitField0_ & 0x00001000) != 0)) {
        result.update_ = updateBuilder_ == null
            ? update_
            : updateBuilder_.build();
        to_bitField0_ |= 0x00000400;
      }
      if (((from_bitField0_ & 0x00002000) != 0)) {
        result.delete_ = deleteBuilder_ == null
            ? delete_
            : deleteBuilder_.build();
        to_bitField0_ |= 0x00000800;
      }
      if (((from_bitField0_ & 0x00004000) != 0)) {
        result.process_ = processBuilder_ == null
            ? process_
            : processBuilder_.build();
        to_bitField0_ |= 0x00001000;
      }
      if (((from_bitField0_ & 0x00008000) != 0)) {
        result.print_ = printBuilder_ == null
            ? print_
            : printBuilder_.build();
        to_bitField0_ |= 0x00002000;
      }
      if (((from_bitField0_ & 0x00010000) != 0)) {
        result.install_ = installBuilder_ == null
            ? install_
            : installBuilder_.build();
        to_bitField0_ |= 0x00004000;
      }
      if (((from_bitField0_ & 0x00020000) != 0)) {
        result.uninstall_ = uninstallBuilder_ == null
            ? uninstall_
            : uninstallBuilder_.build();
        to_bitField0_ |= 0x00008000;
      }
      if (((from_bitField0_ & 0x00040000) != 0)) {
        result.network_ = networkBuilder_ == null
            ? network_
            : networkBuilder_.build();
        to_bitField0_ |= 0x00010000;
      }
      if (((from_bitField0_ & 0x00080000) != 0)) {
        result.alert_ = alertBuilder_ == null
            ? alert_
            : alertBuilder_.build();
        to_bitField0_ |= 0x00020000;
      }
      if (((from_bitField0_ & 0x00100000) != 0)) {
        result.send_ = sendBuilder_ == null
            ? send_
            : sendBuilder_.build();
        to_bitField0_ |= 0x00040000;
      }
      if (((from_bitField0_ & 0x00200000) != 0)) {
        result.receive_ = receiveBuilder_ == null
            ? receive_
            : receiveBuilder_.build();
        to_bitField0_ |= 0x00080000;
      }
      if (((from_bitField0_ & 0x00400000) != 0)) {
        result.approval_ = approvalBuilder_ == null
            ? approval_
            : approvalBuilder_.build();
        to_bitField0_ |= 0x00100000;
      }
      if (((from_bitField0_ & 0x00800000) != 0)) {
        result.unknown_ = unknownBuilder_ == null
            ? unknown_
            : unknownBuilder_.build();
        to_bitField0_ |= 0x00200000;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof uk.gov.gchq.event_logging.v4.EventDetailComplexType) {
        return mergeFrom((uk.gov.gchq.event_logging.v4.EventDetailComplexType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(uk.gov.gchq.event_logging.v4.EventDetailComplexType other) {
      if (other == uk.gov.gchq.event_logging.v4.EventDetailComplexType.getDefaultInstance()) return this;
      if (!other.getTypeId().isEmpty()) {
        typeId_ = other.typeId_;
        bitField0_ |= 0x00000001;
        onChanged();
      }
      if (!other.getDescription().isEmpty()) {
        description_ = other.description_;
        bitField0_ |= 0x00000002;
        onChanged();
      }
      if (other.hasPurpose()) {
        mergePurpose(other.getPurpose());
      }
      if (other.hasAuthenticate()) {
        mergeAuthenticate(other.getAuthenticate());
      }
      if (other.hasAuthorise()) {
        mergeAuthorise(other.getAuthorise());
      }
      if (other.hasSearch()) {
        mergeSearch(other.getSearch());
      }
      if (other.hasCopy()) {
        mergeCopy(other.getCopy());
      }
      if (other.hasMove()) {
        mergeMove(other.getMove());
      }
      if (other.hasCreate()) {
        mergeCreate(other.getCreate());
      }
      if (other.hasView()) {
        mergeView(other.getView());
      }
      if (other.hasImportField()) {
        mergeImportField(other.getImportField());
      }
      if (other.hasExport()) {
        mergeExport(other.getExport());
      }
      if (other.hasUpdate()) {
        mergeUpdate(other.getUpdate());
      }
      if (other.hasDelete()) {
        mergeDelete(other.getDelete());
      }
      if (other.hasProcess()) {
        mergeProcess(other.getProcess());
      }
      if (other.hasPrint()) {
        mergePrint(other.getPrint());
      }
      if (other.hasInstall()) {
        mergeInstall(other.getInstall());
      }
      if (other.hasUninstall()) {
        mergeUninstall(other.getUninstall());
      }
      if (other.hasNetwork()) {
        mergeNetwork(other.getNetwork());
      }
      if (other.hasAlert()) {
        mergeAlert(other.getAlert());
      }
      if (other.hasSend()) {
        mergeSend(other.getSend());
      }
      if (other.hasReceive()) {
        mergeReceive(other.getReceive());
      }
      if (other.hasApproval()) {
        mergeApproval(other.getApproval());
      }
      if (other.hasUnknown()) {
        mergeUnknown(other.getUnknown());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              typeId_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              description_ = input.readStringRequireUtf8();
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              input.readMessage(
                  getPurposeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getAuthenticateFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getAuthoriseFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 50: {
              input.readMessage(
                  getSearchFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 50
            case 58: {
              input.readMessage(
                  getCopyFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000040;
              break;
            } // case 58
            case 66: {
              input.readMessage(
                  getMoveFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000080;
              break;
            } // case 66
            case 74: {
              input.readMessage(
                  getCreateFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000100;
              break;
            } // case 74
            case 82: {
              input.readMessage(
                  getViewFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000200;
              break;
            } // case 82
            case 90: {
              input.readMessage(
                  getImportFieldFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000400;
              break;
            } // case 90
            case 98: {
              input.readMessage(
                  getExportFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000800;
              break;
            } // case 98
            case 106: {
              input.readMessage(
                  getUpdateFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00001000;
              break;
            } // case 106
            case 114: {
              input.readMessage(
                  getDeleteFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00002000;
              break;
            } // case 114
            case 122: {
              input.readMessage(
                  getProcessFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00004000;
              break;
            } // case 122
            case 130: {
              input.readMessage(
                  getPrintFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00008000;
              break;
            } // case 130
            case 138: {
              input.readMessage(
                  getInstallFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00010000;
              break;
            } // case 138
            case 146: {
              input.readMessage(
                  getUninstallFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00020000;
              break;
            } // case 146
            case 154: {
              input.readMessage(
                  getNetworkFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00040000;
              break;
            } // case 154
            case 162: {
              input.readMessage(
                  getAlertFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00080000;
              break;
            } // case 162
            case 170: {
              input.readMessage(
                  getSendFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00100000;
              break;
            } // case 170
            case 178: {
              input.readMessage(
                  getReceiveFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00200000;
              break;
            } // case 178
            case 186: {
              input.readMessage(
                  getApprovalFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00400000;
              break;
            } // case 186
            case 194: {
              input.readMessage(
                  getUnknownFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00800000;
              break;
            } // case 194
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.lang.Object typeId_ = "";
    /**
     * <pre>
     * A name/code/ID to uniquely identify the logical event type within the service providing the events. E.g. a Windows eventId (i.e. representing 'Failed logon', 'Change password attempt', etc.) or for application logging: SaveRecord, ViewUserRecord, ViewSearchResults, etc. The granularity will depend on the application. Typically, the number of unique TypeIds will be in the 10s. Note, the values of the TypeId are not meant to be globally consistent, they will only be relevant within that service providing the events.
     * </pre>
     *
     * <code>string type_id = 1 [json_name = "typeId", (.buf.validate.field) = { ... }</code>
     * @return The typeId.
     */
    public java.lang.String getTypeId() {
      java.lang.Object ref = typeId_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        typeId_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * A name/code/ID to uniquely identify the logical event type within the service providing the events. E.g. a Windows eventId (i.e. representing 'Failed logon', 'Change password attempt', etc.) or for application logging: SaveRecord, ViewUserRecord, ViewSearchResults, etc. The granularity will depend on the application. Typically, the number of unique TypeIds will be in the 10s. Note, the values of the TypeId are not meant to be globally consistent, they will only be relevant within that service providing the events.
     * </pre>
     *
     * <code>string type_id = 1 [json_name = "typeId", (.buf.validate.field) = { ... }</code>
     * @return The bytes for typeId.
     */
    public com.google.protobuf.ByteString
        getTypeIdBytes() {
      java.lang.Object ref = typeId_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        typeId_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * A name/code/ID to uniquely identify the logical event type within the service providing the events. E.g. a Windows eventId (i.e. representing 'Failed logon', 'Change password attempt', etc.) or for application logging: SaveRecord, ViewUserRecord, ViewSearchResults, etc. The granularity will depend on the application. Typically, the number of unique TypeIds will be in the 10s. Note, the values of the TypeId are not meant to be globally consistent, they will only be relevant within that service providing the events.
     * </pre>
     *
     * <code>string type_id = 1 [json_name = "typeId", (.buf.validate.field) = { ... }</code>
     * @param value The typeId to set.
     * @return This builder for chaining.
     */
    public Builder setTypeId(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      typeId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A name/code/ID to uniquely identify the logical event type within the service providing the events. E.g. a Windows eventId (i.e. representing 'Failed logon', 'Change password attempt', etc.) or for application logging: SaveRecord, ViewUserRecord, ViewSearchResults, etc. The granularity will depend on the application. Typically, the number of unique TypeIds will be in the 10s. Note, the values of the TypeId are not meant to be globally consistent, they will only be relevant within that service providing the events.
     * </pre>
     *
     * <code>string type_id = 1 [json_name = "typeId", (.buf.validate.field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearTypeId() {
      typeId_ = getDefaultInstance().getTypeId();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * A name/code/ID to uniquely identify the logical event type within the service providing the events. E.g. a Windows eventId (i.e. representing 'Failed logon', 'Change password attempt', etc.) or for application logging: SaveRecord, ViewUserRecord, ViewSearchResults, etc. The granularity will depend on the application. Typically, the number of unique TypeIds will be in the 10s. Note, the values of the TypeId are not meant to be globally consistent, they will only be relevant within that service providing the events.
     * </pre>
     *
     * <code>string type_id = 1 [json_name = "typeId", (.buf.validate.field) = { ... }</code>
     * @param value The bytes for typeId to set.
     * @return This builder for chaining.
     */
    public Builder setTypeIdBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      typeId_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }

    private java.lang.Object description_ = "";
    /**
     * <pre>
     * Some human-readable descriptive text for the event type.
     * </pre>
     *
     * <code>string description = 2 [json_name = "description"];</code>
     * @return The description.
     */
    public java.lang.String getDescription() {
      java.lang.Object ref = description_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        description_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Some human-readable descriptive text for the event type.
     * </pre>
     *
     * <code>string description = 2 [json_name = "description"];</code>
     * @return The bytes for description.
     */
    public com.google.protobuf.ByteString
        getDescriptionBytes() {
      java.lang.Object ref = description_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        description_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Some human-readable descriptive text for the event type.
     * </pre>
     *
     * <code>string description = 2 [json_name = "description"];</code>
     * @param value The description to set.
     * @return This builder for chaining.
     */
    public Builder setDescription(
        java.lang.String value) {
      if (value == null) { throw new NullPointerException(); }
      description_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Some human-readable descriptive text for the event type.
     * </pre>
     *
     * <code>string description = 2 [json_name = "description"];</code>
     * @return This builder for chaining.
     */
    public Builder clearDescription() {
      description_ = getDefaultInstance().getDescription();
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Some human-readable descriptive text for the event type.
     * </pre>
     *
     * <code>string description = 2 [json_name = "description"];</code>
     * @param value The bytes for description to set.
     * @return This builder for chaining.
     */
    public Builder setDescriptionBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) { throw new NullPointerException(); }
      checkByteStringIsUtf8(value);
      description_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }

    private uk.gov.gchq.event_logging.v4.PurposeComplexType purpose_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.PurposeComplexType, uk.gov.gchq.event_logging.v4.PurposeComplexType.Builder, uk.gov.gchq.event_logging.v4.PurposeComplexTypeOrBuilder> purposeBuilder_;
    /**
     * <pre>
     * The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
     * </pre>
     *
     * <code>.event_logging.v4.PurposeComplexType purpose = 3 [json_name = "purpose"];</code>
     * @return Whether the purpose field is set.
     */
    public boolean hasPurpose() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
     * </pre>
     *
     * <code>.event_logging.v4.PurposeComplexType purpose = 3 [json_name = "purpose"];</code>
     * @return The purpose.
     */
    public uk.gov.gchq.event_logging.v4.PurposeComplexType getPurpose() {
      if (purposeBuilder_ == null) {
        return purpose_ == null ? uk.gov.gchq.event_logging.v4.PurposeComplexType.getDefaultInstance() : purpose_;
      } else {
        return purposeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
     * </pre>
     *
     * <code>.event_logging.v4.PurposeComplexType purpose = 3 [json_name = "purpose"];</code>
     */
    public Builder setPurpose(uk.gov.gchq.event_logging.v4.PurposeComplexType value) {
      if (purposeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        purpose_ = value;
      } else {
        purposeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
     * </pre>
     *
     * <code>.event_logging.v4.PurposeComplexType purpose = 3 [json_name = "purpose"];</code>
     */
    public Builder setPurpose(
        uk.gov.gchq.event_logging.v4.PurposeComplexType.Builder builderForValue) {
      if (purposeBuilder_ == null) {
        purpose_ = builderForValue.build();
      } else {
        purposeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
     * </pre>
     *
     * <code>.event_logging.v4.PurposeComplexType purpose = 3 [json_name = "purpose"];</code>
     */
    public Builder mergePurpose(uk.gov.gchq.event_logging.v4.PurposeComplexType value) {
      if (purposeBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          purpose_ != null &&
          purpose_ != uk.gov.gchq.event_logging.v4.PurposeComplexType.getDefaultInstance()) {
          getPurposeBuilder().mergeFrom(value);
        } else {
          purpose_ = value;
        }
      } else {
        purposeBuilder_.mergeFrom(value);
      }
      if (purpose_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
     * </pre>
     *
     * <code>.event_logging.v4.PurposeComplexType purpose = 3 [json_name = "purpose"];</code>
     */
    public Builder clearPurpose() {
      bitField0_ = (bitField0_ & ~0x00000004);
      purpose_ = null;
      if (purposeBuilder_ != null) {
        purposeBuilder_.dispose();
        purposeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
     * </pre>
     *
     * <code>.event_logging.v4.PurposeComplexType purpose = 3 [json_name = "purpose"];</code>
     */
    public uk.gov.gchq.event_logging.v4.PurposeComplexType.Builder getPurposeBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getPurposeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
     * </pre>
     *
     * <code>.event_logging.v4.PurposeComplexType purpose = 3 [json_name = "purpose"];</code>
     */
    public uk.gov.gchq.event_logging.v4.PurposeComplexTypeOrBuilder getPurposeOrBuilder() {
      if (purposeBuilder_ != null) {
        return purposeBuilder_.getMessageOrBuilder();
      } else {
        return purpose_ == null ?
            uk.gov.gchq.event_logging.v4.PurposeComplexType.getDefaultInstance() : purpose_;
      }
    }
    /**
     * <pre>
     * The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
     * </pre>
     *
     * <code>.event_logging.v4.PurposeComplexType purpose = 3 [json_name = "purpose"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.PurposeComplexType, uk.gov.gchq.event_logging.v4.PurposeComplexType.Builder, uk.gov.gchq.event_logging.v4.PurposeComplexTypeOrBuilder> 
        getPurposeFieldBuilder() {
      if (purposeBuilder_ == null) {
        purposeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.PurposeComplexType, uk.gov.gchq.event_logging.v4.PurposeComplexType.Builder, uk.gov.gchq.event_logging.v4.PurposeComplexTypeOrBuilder>(
                getPurpose(),
                getParentForChildren(),
                isClean());
        purpose_ = null;
      }
      return purposeBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.AuthenticateComplexType authenticate_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.AuthenticateComplexType, uk.gov.gchq.event_logging.v4.AuthenticateComplexType.Builder, uk.gov.gchq.event_logging.v4.AuthenticateComplexTypeOrBuilder> authenticateBuilder_;
    /**
     * <pre>
     * Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateComplexType authenticate = 4 [json_name = "authenticate", (.buf.validate.field) = { ... }</code>
     * @return Whether the authenticate field is set.
     */
    public boolean hasAuthenticate() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateComplexType authenticate = 4 [json_name = "authenticate", (.buf.validate.field) = { ... }</code>
     * @return The authenticate.
     */
    public uk.gov.gchq.event_logging.v4.AuthenticateComplexType getAuthenticate() {
      if (authenticateBuilder_ == null) {
        return authenticate_ == null ? uk.gov.gchq.event_logging.v4.AuthenticateComplexType.getDefaultInstance() : authenticate_;
      } else {
        return authenticateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateComplexType authenticate = 4 [json_name = "authenticate", (.buf.validate.field) = { ... }</code>
     */
    public Builder setAuthenticate(uk.gov.gchq.event_logging.v4.AuthenticateComplexType value) {
      if (authenticateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        authenticate_ = value;
      } else {
        authenticateBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateComplexType authenticate = 4 [json_name = "authenticate", (.buf.validate.field) = { ... }</code>
     */
    public Builder setAuthenticate(
        uk.gov.gchq.event_logging.v4.AuthenticateComplexType.Builder builderForValue) {
      if (authenticateBuilder_ == null) {
        authenticate_ = builderForValue.build();
      } else {
        authenticateBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateComplexType authenticate = 4 [json_name = "authenticate", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeAuthenticate(uk.gov.gchq.event_logging.v4.AuthenticateComplexType value) {
      if (authenticateBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          authenticate_ != null &&
          authenticate_ != uk.gov.gchq.event_logging.v4.AuthenticateComplexType.getDefaultInstance()) {
          getAuthenticateBuilder().mergeFrom(value);
        } else {
          authenticate_ = value;
        }
      } else {
        authenticateBuilder_.mergeFrom(value);
      }
      if (authenticate_ != null) {
        bitField0_ |= 0x00000008;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateComplexType authenticate = 4 [json_name = "authenticate", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearAuthenticate() {
      bitField0_ = (bitField0_ & ~0x00000008);
      authenticate_ = null;
      if (authenticateBuilder_ != null) {
        authenticateBuilder_.dispose();
        authenticateBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateComplexType authenticate = 4 [json_name = "authenticate", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.AuthenticateComplexType.Builder getAuthenticateBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getAuthenticateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateComplexType authenticate = 4 [json_name = "authenticate", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.AuthenticateComplexTypeOrBuilder getAuthenticateOrBuilder() {
      if (authenticateBuilder_ != null) {
        return authenticateBuilder_.getMessageOrBuilder();
      } else {
        return authenticate_ == null ?
            uk.gov.gchq.event_logging.v4.AuthenticateComplexType.getDefaultInstance() : authenticate_;
      }
    }
    /**
     * <pre>
     * Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateComplexType authenticate = 4 [json_name = "authenticate", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.AuthenticateComplexType, uk.gov.gchq.event_logging.v4.AuthenticateComplexType.Builder, uk.gov.gchq.event_logging.v4.AuthenticateComplexTypeOrBuilder> 
        getAuthenticateFieldBuilder() {
      if (authenticateBuilder_ == null) {
        authenticateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.AuthenticateComplexType, uk.gov.gchq.event_logging.v4.AuthenticateComplexType.Builder, uk.gov.gchq.event_logging.v4.AuthenticateComplexTypeOrBuilder>(
                getAuthenticate(),
                getParentForChildren(),
                isClean());
        authenticate_ = null;
      }
      return authenticateBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.AuthoriseComplexType authorise_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.AuthoriseComplexType, uk.gov.gchq.event_logging.v4.AuthoriseComplexType.Builder, uk.gov.gchq.event_logging.v4.AuthoriseComplexTypeOrBuilder> authoriseBuilder_;
    /**
     * <pre>
     * All events related to account management such as adding and removing user and system accounts.
     * </pre>
     *
     * <code>.event_logging.v4.AuthoriseComplexType authorise = 5 [json_name = "authorise", (.buf.validate.field) = { ... }</code>
     * @return Whether the authorise field is set.
     */
    public boolean hasAuthorise() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * All events related to account management such as adding and removing user and system accounts.
     * </pre>
     *
     * <code>.event_logging.v4.AuthoriseComplexType authorise = 5 [json_name = "authorise", (.buf.validate.field) = { ... }</code>
     * @return The authorise.
     */
    public uk.gov.gchq.event_logging.v4.AuthoriseComplexType getAuthorise() {
      if (authoriseBuilder_ == null) {
        return authorise_ == null ? uk.gov.gchq.event_logging.v4.AuthoriseComplexType.getDefaultInstance() : authorise_;
      } else {
        return authoriseBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * All events related to account management such as adding and removing user and system accounts.
     * </pre>
     *
     * <code>.event_logging.v4.AuthoriseComplexType authorise = 5 [json_name = "authorise", (.buf.validate.field) = { ... }</code>
     */
    public Builder setAuthorise(uk.gov.gchq.event_logging.v4.AuthoriseComplexType value) {
      if (authoriseBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        authorise_ = value;
      } else {
        authoriseBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to account management such as adding and removing user and system accounts.
     * </pre>
     *
     * <code>.event_logging.v4.AuthoriseComplexType authorise = 5 [json_name = "authorise", (.buf.validate.field) = { ... }</code>
     */
    public Builder setAuthorise(
        uk.gov.gchq.event_logging.v4.AuthoriseComplexType.Builder builderForValue) {
      if (authoriseBuilder_ == null) {
        authorise_ = builderForValue.build();
      } else {
        authoriseBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to account management such as adding and removing user and system accounts.
     * </pre>
     *
     * <code>.event_logging.v4.AuthoriseComplexType authorise = 5 [json_name = "authorise", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeAuthorise(uk.gov.gchq.event_logging.v4.AuthoriseComplexType value) {
      if (authoriseBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          authorise_ != null &&
          authorise_ != uk.gov.gchq.event_logging.v4.AuthoriseComplexType.getDefaultInstance()) {
          getAuthoriseBuilder().mergeFrom(value);
        } else {
          authorise_ = value;
        }
      } else {
        authoriseBuilder_.mergeFrom(value);
      }
      if (authorise_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * All events related to account management such as adding and removing user and system accounts.
     * </pre>
     *
     * <code>.event_logging.v4.AuthoriseComplexType authorise = 5 [json_name = "authorise", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearAuthorise() {
      bitField0_ = (bitField0_ & ~0x00000010);
      authorise_ = null;
      if (authoriseBuilder_ != null) {
        authoriseBuilder_.dispose();
        authoriseBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to account management such as adding and removing user and system accounts.
     * </pre>
     *
     * <code>.event_logging.v4.AuthoriseComplexType authorise = 5 [json_name = "authorise", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.AuthoriseComplexType.Builder getAuthoriseBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getAuthoriseFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * All events related to account management such as adding and removing user and system accounts.
     * </pre>
     *
     * <code>.event_logging.v4.AuthoriseComplexType authorise = 5 [json_name = "authorise", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.AuthoriseComplexTypeOrBuilder getAuthoriseOrBuilder() {
      if (authoriseBuilder_ != null) {
        return authoriseBuilder_.getMessageOrBuilder();
      } else {
        return authorise_ == null ?
            uk.gov.gchq.event_logging.v4.AuthoriseComplexType.getDefaultInstance() : authorise_;
      }
    }
    /**
     * <pre>
     * All events related to account management such as adding and removing user and system accounts.
     * </pre>
     *
     * <code>.event_logging.v4.AuthoriseComplexType authorise = 5 [json_name = "authorise", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.AuthoriseComplexType, uk.gov.gchq.event_logging.v4.AuthoriseComplexType.Builder, uk.gov.gchq.event_logging.v4.AuthoriseComplexTypeOrBuilder> 
        getAuthoriseFieldBuilder() {
      if (authoriseBuilder_ == null) {
        authoriseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.AuthoriseComplexType, uk.gov.gchq.event_logging.v4.AuthoriseComplexType.Builder, uk.gov.gchq.event_logging.v4.AuthoriseComplexTypeOrBuilder>(
                getAuthorise(),
                getParentForChildren(),
                isClean());
        authorise_ = null;
      }
      return authoriseBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.SearchComplexType search_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.SearchComplexType, uk.gov.gchq.event_logging.v4.SearchComplexType.Builder, uk.gov.gchq.event_logging.v4.SearchComplexTypeOrBuilder> searchBuilder_;
    /**
     * <pre>
     * Any events related to searching for data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.SearchComplexType search = 6 [json_name = "search", (.buf.validate.field) = { ... }</code>
     * @return Whether the search field is set.
     */
    public boolean hasSearch() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Any events related to searching for data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.SearchComplexType search = 6 [json_name = "search", (.buf.validate.field) = { ... }</code>
     * @return The search.
     */
    public uk.gov.gchq.event_logging.v4.SearchComplexType getSearch() {
      if (searchBuilder_ == null) {
        return search_ == null ? uk.gov.gchq.event_logging.v4.SearchComplexType.getDefaultInstance() : search_;
      } else {
        return searchBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Any events related to searching for data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.SearchComplexType search = 6 [json_name = "search", (.buf.validate.field) = { ... }</code>
     */
    public Builder setSearch(uk.gov.gchq.event_logging.v4.SearchComplexType value) {
      if (searchBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        search_ = value;
      } else {
        searchBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Any events related to searching for data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.SearchComplexType search = 6 [json_name = "search", (.buf.validate.field) = { ... }</code>
     */
    public Builder setSearch(
        uk.gov.gchq.event_logging.v4.SearchComplexType.Builder builderForValue) {
      if (searchBuilder_ == null) {
        search_ = builderForValue.build();
      } else {
        searchBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Any events related to searching for data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.SearchComplexType search = 6 [json_name = "search", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeSearch(uk.gov.gchq.event_logging.v4.SearchComplexType value) {
      if (searchBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          search_ != null &&
          search_ != uk.gov.gchq.event_logging.v4.SearchComplexType.getDefaultInstance()) {
          getSearchBuilder().mergeFrom(value);
        } else {
          search_ = value;
        }
      } else {
        searchBuilder_.mergeFrom(value);
      }
      if (search_ != null) {
        bitField0_ |= 0x00000020;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Any events related to searching for data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.SearchComplexType search = 6 [json_name = "search", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearSearch() {
      bitField0_ = (bitField0_ & ~0x00000020);
      search_ = null;
      if (searchBuilder_ != null) {
        searchBuilder_.dispose();
        searchBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Any events related to searching for data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.SearchComplexType search = 6 [json_name = "search", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.SearchComplexType.Builder getSearchBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getSearchFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Any events related to searching for data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.SearchComplexType search = 6 [json_name = "search", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.SearchComplexTypeOrBuilder getSearchOrBuilder() {
      if (searchBuilder_ != null) {
        return searchBuilder_.getMessageOrBuilder();
      } else {
        return search_ == null ?
            uk.gov.gchq.event_logging.v4.SearchComplexType.getDefaultInstance() : search_;
      }
    }
    /**
     * <pre>
     * Any events related to searching for data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.SearchComplexType search = 6 [json_name = "search", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.SearchComplexType, uk.gov.gchq.event_logging.v4.SearchComplexType.Builder, uk.gov.gchq.event_logging.v4.SearchComplexTypeOrBuilder> 
        getSearchFieldBuilder() {
      if (searchBuilder_ == null) {
        searchBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.SearchComplexType, uk.gov.gchq.event_logging.v4.SearchComplexType.Builder, uk.gov.gchq.event_logging.v4.SearchComplexTypeOrBuilder>(
                getSearch(),
                getParentForChildren(),
                isClean());
        search_ = null;
      }
      return searchBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.CopyComplexType copy_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.CopyComplexType, uk.gov.gchq.event_logging.v4.CopyComplexType.Builder, uk.gov.gchq.event_logging.v4.CopyComplexTypeOrBuilder> copyBuilder_;
    /**
     * <pre>
     * All events related to copying data, files, documents, etc. should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CopyComplexType copy = 7 [json_name = "copy", (.buf.validate.field) = { ... }</code>
     * @return Whether the copy field is set.
     */
    public boolean hasCopy() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <pre>
     * All events related to copying data, files, documents, etc. should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CopyComplexType copy = 7 [json_name = "copy", (.buf.validate.field) = { ... }</code>
     * @return The copy.
     */
    public uk.gov.gchq.event_logging.v4.CopyComplexType getCopy() {
      if (copyBuilder_ == null) {
        return copy_ == null ? uk.gov.gchq.event_logging.v4.CopyComplexType.getDefaultInstance() : copy_;
      } else {
        return copyBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * All events related to copying data, files, documents, etc. should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CopyComplexType copy = 7 [json_name = "copy", (.buf.validate.field) = { ... }</code>
     */
    public Builder setCopy(uk.gov.gchq.event_logging.v4.CopyComplexType value) {
      if (copyBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        copy_ = value;
      } else {
        copyBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to copying data, files, documents, etc. should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CopyComplexType copy = 7 [json_name = "copy", (.buf.validate.field) = { ... }</code>
     */
    public Builder setCopy(
        uk.gov.gchq.event_logging.v4.CopyComplexType.Builder builderForValue) {
      if (copyBuilder_ == null) {
        copy_ = builderForValue.build();
      } else {
        copyBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000040;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to copying data, files, documents, etc. should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CopyComplexType copy = 7 [json_name = "copy", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeCopy(uk.gov.gchq.event_logging.v4.CopyComplexType value) {
      if (copyBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0) &&
          copy_ != null &&
          copy_ != uk.gov.gchq.event_logging.v4.CopyComplexType.getDefaultInstance()) {
          getCopyBuilder().mergeFrom(value);
        } else {
          copy_ = value;
        }
      } else {
        copyBuilder_.mergeFrom(value);
      }
      if (copy_ != null) {
        bitField0_ |= 0x00000040;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * All events related to copying data, files, documents, etc. should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CopyComplexType copy = 7 [json_name = "copy", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearCopy() {
      bitField0_ = (bitField0_ & ~0x00000040);
      copy_ = null;
      if (copyBuilder_ != null) {
        copyBuilder_.dispose();
        copyBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to copying data, files, documents, etc. should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CopyComplexType copy = 7 [json_name = "copy", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.CopyComplexType.Builder getCopyBuilder() {
      bitField0_ |= 0x00000040;
      onChanged();
      return getCopyFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * All events related to copying data, files, documents, etc. should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CopyComplexType copy = 7 [json_name = "copy", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.CopyComplexTypeOrBuilder getCopyOrBuilder() {
      if (copyBuilder_ != null) {
        return copyBuilder_.getMessageOrBuilder();
      } else {
        return copy_ == null ?
            uk.gov.gchq.event_logging.v4.CopyComplexType.getDefaultInstance() : copy_;
      }
    }
    /**
     * <pre>
     * All events related to copying data, files, documents, etc. should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CopyComplexType copy = 7 [json_name = "copy", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.CopyComplexType, uk.gov.gchq.event_logging.v4.CopyComplexType.Builder, uk.gov.gchq.event_logging.v4.CopyComplexTypeOrBuilder> 
        getCopyFieldBuilder() {
      if (copyBuilder_ == null) {
        copyBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.CopyComplexType, uk.gov.gchq.event_logging.v4.CopyComplexType.Builder, uk.gov.gchq.event_logging.v4.CopyComplexTypeOrBuilder>(
                getCopy(),
                getParentForChildren(),
                isClean());
        copy_ = null;
      }
      return copyBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.MoveComplexType move_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.MoveComplexType, uk.gov.gchq.event_logging.v4.MoveComplexType.Builder, uk.gov.gchq.event_logging.v4.MoveComplexTypeOrBuilder> moveBuilder_;
    /**
     * <pre>
     * All events related to moving data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.MoveComplexType move = 8 [json_name = "move", (.buf.validate.field) = { ... }</code>
     * @return Whether the move field is set.
     */
    public boolean hasMove() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <pre>
     * All events related to moving data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.MoveComplexType move = 8 [json_name = "move", (.buf.validate.field) = { ... }</code>
     * @return The move.
     */
    public uk.gov.gchq.event_logging.v4.MoveComplexType getMove() {
      if (moveBuilder_ == null) {
        return move_ == null ? uk.gov.gchq.event_logging.v4.MoveComplexType.getDefaultInstance() : move_;
      } else {
        return moveBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * All events related to moving data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.MoveComplexType move = 8 [json_name = "move", (.buf.validate.field) = { ... }</code>
     */
    public Builder setMove(uk.gov.gchq.event_logging.v4.MoveComplexType value) {
      if (moveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        move_ = value;
      } else {
        moveBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to moving data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.MoveComplexType move = 8 [json_name = "move", (.buf.validate.field) = { ... }</code>
     */
    public Builder setMove(
        uk.gov.gchq.event_logging.v4.MoveComplexType.Builder builderForValue) {
      if (moveBuilder_ == null) {
        move_ = builderForValue.build();
      } else {
        moveBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000080;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to moving data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.MoveComplexType move = 8 [json_name = "move", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeMove(uk.gov.gchq.event_logging.v4.MoveComplexType value) {
      if (moveBuilder_ == null) {
        if (((bitField0_ & 0x00000080) != 0) &&
          move_ != null &&
          move_ != uk.gov.gchq.event_logging.v4.MoveComplexType.getDefaultInstance()) {
          getMoveBuilder().mergeFrom(value);
        } else {
          move_ = value;
        }
      } else {
        moveBuilder_.mergeFrom(value);
      }
      if (move_ != null) {
        bitField0_ |= 0x00000080;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * All events related to moving data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.MoveComplexType move = 8 [json_name = "move", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearMove() {
      bitField0_ = (bitField0_ & ~0x00000080);
      move_ = null;
      if (moveBuilder_ != null) {
        moveBuilder_.dispose();
        moveBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to moving data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.MoveComplexType move = 8 [json_name = "move", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.MoveComplexType.Builder getMoveBuilder() {
      bitField0_ |= 0x00000080;
      onChanged();
      return getMoveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * All events related to moving data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.MoveComplexType move = 8 [json_name = "move", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.MoveComplexTypeOrBuilder getMoveOrBuilder() {
      if (moveBuilder_ != null) {
        return moveBuilder_.getMessageOrBuilder();
      } else {
        return move_ == null ?
            uk.gov.gchq.event_logging.v4.MoveComplexType.getDefaultInstance() : move_;
      }
    }
    /**
     * <pre>
     * All events related to moving data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.MoveComplexType move = 8 [json_name = "move", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.MoveComplexType, uk.gov.gchq.event_logging.v4.MoveComplexType.Builder, uk.gov.gchq.event_logging.v4.MoveComplexTypeOrBuilder> 
        getMoveFieldBuilder() {
      if (moveBuilder_ == null) {
        moveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.MoveComplexType, uk.gov.gchq.event_logging.v4.MoveComplexType.Builder, uk.gov.gchq.event_logging.v4.MoveComplexTypeOrBuilder>(
                getMove(),
                getParentForChildren(),
                isClean());
        move_ = null;
      }
      return moveBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.CreateComplexType create_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.CreateComplexType, uk.gov.gchq.event_logging.v4.CreateComplexType.Builder, uk.gov.gchq.event_logging.v4.CreateComplexTypeOrBuilder> createBuilder_;
    /**
     * <pre>
     * All events related to creating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CreateComplexType create = 9 [json_name = "create", (.buf.validate.field) = { ... }</code>
     * @return Whether the create field is set.
     */
    public boolean hasCreate() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <pre>
     * All events related to creating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CreateComplexType create = 9 [json_name = "create", (.buf.validate.field) = { ... }</code>
     * @return The create.
     */
    public uk.gov.gchq.event_logging.v4.CreateComplexType getCreate() {
      if (createBuilder_ == null) {
        return create_ == null ? uk.gov.gchq.event_logging.v4.CreateComplexType.getDefaultInstance() : create_;
      } else {
        return createBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * All events related to creating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CreateComplexType create = 9 [json_name = "create", (.buf.validate.field) = { ... }</code>
     */
    public Builder setCreate(uk.gov.gchq.event_logging.v4.CreateComplexType value) {
      if (createBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        create_ = value;
      } else {
        createBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to creating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CreateComplexType create = 9 [json_name = "create", (.buf.validate.field) = { ... }</code>
     */
    public Builder setCreate(
        uk.gov.gchq.event_logging.v4.CreateComplexType.Builder builderForValue) {
      if (createBuilder_ == null) {
        create_ = builderForValue.build();
      } else {
        createBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000100;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to creating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CreateComplexType create = 9 [json_name = "create", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeCreate(uk.gov.gchq.event_logging.v4.CreateComplexType value) {
      if (createBuilder_ == null) {
        if (((bitField0_ & 0x00000100) != 0) &&
          create_ != null &&
          create_ != uk.gov.gchq.event_logging.v4.CreateComplexType.getDefaultInstance()) {
          getCreateBuilder().mergeFrom(value);
        } else {
          create_ = value;
        }
      } else {
        createBuilder_.mergeFrom(value);
      }
      if (create_ != null) {
        bitField0_ |= 0x00000100;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * All events related to creating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CreateComplexType create = 9 [json_name = "create", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearCreate() {
      bitField0_ = (bitField0_ & ~0x00000100);
      create_ = null;
      if (createBuilder_ != null) {
        createBuilder_.dispose();
        createBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to creating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CreateComplexType create = 9 [json_name = "create", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.CreateComplexType.Builder getCreateBuilder() {
      bitField0_ |= 0x00000100;
      onChanged();
      return getCreateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * All events related to creating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CreateComplexType create = 9 [json_name = "create", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.CreateComplexTypeOrBuilder getCreateOrBuilder() {
      if (createBuilder_ != null) {
        return createBuilder_.getMessageOrBuilder();
      } else {
        return create_ == null ?
            uk.gov.gchq.event_logging.v4.CreateComplexType.getDefaultInstance() : create_;
      }
    }
    /**
     * <pre>
     * All events related to creating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.CreateComplexType create = 9 [json_name = "create", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.CreateComplexType, uk.gov.gchq.event_logging.v4.CreateComplexType.Builder, uk.gov.gchq.event_logging.v4.CreateComplexTypeOrBuilder> 
        getCreateFieldBuilder() {
      if (createBuilder_ == null) {
        createBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.CreateComplexType, uk.gov.gchq.event_logging.v4.CreateComplexType.Builder, uk.gov.gchq.event_logging.v4.CreateComplexTypeOrBuilder>(
                getCreate(),
                getParentForChildren(),
                isClean());
        create_ = null;
      }
      return createBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.ViewComplexType view_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.ViewComplexType, uk.gov.gchq.event_logging.v4.ViewComplexType.Builder, uk.gov.gchq.event_logging.v4.ViewComplexTypeOrBuilder> viewBuilder_;
    /**
     * <pre>
     * All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
     * </pre>
     *
     * <code>.event_logging.v4.ViewComplexType view = 10 [json_name = "view", (.buf.validate.field) = { ... }</code>
     * @return Whether the view field is set.
     */
    public boolean hasView() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <pre>
     * All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
     * </pre>
     *
     * <code>.event_logging.v4.ViewComplexType view = 10 [json_name = "view", (.buf.validate.field) = { ... }</code>
     * @return The view.
     */
    public uk.gov.gchq.event_logging.v4.ViewComplexType getView() {
      if (viewBuilder_ == null) {
        return view_ == null ? uk.gov.gchq.event_logging.v4.ViewComplexType.getDefaultInstance() : view_;
      } else {
        return viewBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
     * </pre>
     *
     * <code>.event_logging.v4.ViewComplexType view = 10 [json_name = "view", (.buf.validate.field) = { ... }</code>
     */
    public Builder setView(uk.gov.gchq.event_logging.v4.ViewComplexType value) {
      if (viewBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        view_ = value;
      } else {
        viewBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
     * </pre>
     *
     * <code>.event_logging.v4.ViewComplexType view = 10 [json_name = "view", (.buf.validate.field) = { ... }</code>
     */
    public Builder setView(
        uk.gov.gchq.event_logging.v4.ViewComplexType.Builder builderForValue) {
      if (viewBuilder_ == null) {
        view_ = builderForValue.build();
      } else {
        viewBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000200;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
     * </pre>
     *
     * <code>.event_logging.v4.ViewComplexType view = 10 [json_name = "view", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeView(uk.gov.gchq.event_logging.v4.ViewComplexType value) {
      if (viewBuilder_ == null) {
        if (((bitField0_ & 0x00000200) != 0) &&
          view_ != null &&
          view_ != uk.gov.gchq.event_logging.v4.ViewComplexType.getDefaultInstance()) {
          getViewBuilder().mergeFrom(value);
        } else {
          view_ = value;
        }
      } else {
        viewBuilder_.mergeFrom(value);
      }
      if (view_ != null) {
        bitField0_ |= 0x00000200;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
     * </pre>
     *
     * <code>.event_logging.v4.ViewComplexType view = 10 [json_name = "view", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearView() {
      bitField0_ = (bitField0_ & ~0x00000200);
      view_ = null;
      if (viewBuilder_ != null) {
        viewBuilder_.dispose();
        viewBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
     * </pre>
     *
     * <code>.event_logging.v4.ViewComplexType view = 10 [json_name = "view", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.ViewComplexType.Builder getViewBuilder() {
      bitField0_ |= 0x00000200;
      onChanged();
      return getViewFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
     * </pre>
     *
     * <code>.event_logging.v4.ViewComplexType view = 10 [json_name = "view", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.ViewComplexTypeOrBuilder getViewOrBuilder() {
      if (viewBuilder_ != null) {
        return viewBuilder_.getMessageOrBuilder();
      } else {
        return view_ == null ?
            uk.gov.gchq.event_logging.v4.ViewComplexType.getDefaultInstance() : view_;
      }
    }
    /**
     * <pre>
     * All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
     * </pre>
     *
     * <code>.event_logging.v4.ViewComplexType view = 10 [json_name = "view", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.ViewComplexType, uk.gov.gchq.event_logging.v4.ViewComplexType.Builder, uk.gov.gchq.event_logging.v4.ViewComplexTypeOrBuilder> 
        getViewFieldBuilder() {
      if (viewBuilder_ == null) {
        viewBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.ViewComplexType, uk.gov.gchq.event_logging.v4.ViewComplexType.Builder, uk.gov.gchq.event_logging.v4.ViewComplexTypeOrBuilder>(
                getView(),
                getParentForChildren(),
                isClean());
        view_ = null;
      }
      return viewBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.ImportComplexType importField_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.ImportComplexType, uk.gov.gchq.event_logging.v4.ImportComplexType.Builder, uk.gov.gchq.event_logging.v4.ImportComplexTypeOrBuilder> importFieldBuilder_;
    /**
     * <pre>
     * All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
     * </pre>
     *
     * <code>.event_logging.v4.ImportComplexType import_field = 11 [json_name = "importField", (.buf.validate.field) = { ... }</code>
     * @return Whether the importField field is set.
     */
    public boolean hasImportField() {
      return ((bitField0_ & 0x00000400) != 0);
    }
    /**
     * <pre>
     * All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
     * </pre>
     *
     * <code>.event_logging.v4.ImportComplexType import_field = 11 [json_name = "importField", (.buf.validate.field) = { ... }</code>
     * @return The importField.
     */
    public uk.gov.gchq.event_logging.v4.ImportComplexType getImportField() {
      if (importFieldBuilder_ == null) {
        return importField_ == null ? uk.gov.gchq.event_logging.v4.ImportComplexType.getDefaultInstance() : importField_;
      } else {
        return importFieldBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
     * </pre>
     *
     * <code>.event_logging.v4.ImportComplexType import_field = 11 [json_name = "importField", (.buf.validate.field) = { ... }</code>
     */
    public Builder setImportField(uk.gov.gchq.event_logging.v4.ImportComplexType value) {
      if (importFieldBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        importField_ = value;
      } else {
        importFieldBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
     * </pre>
     *
     * <code>.event_logging.v4.ImportComplexType import_field = 11 [json_name = "importField", (.buf.validate.field) = { ... }</code>
     */
    public Builder setImportField(
        uk.gov.gchq.event_logging.v4.ImportComplexType.Builder builderForValue) {
      if (importFieldBuilder_ == null) {
        importField_ = builderForValue.build();
      } else {
        importFieldBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000400;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
     * </pre>
     *
     * <code>.event_logging.v4.ImportComplexType import_field = 11 [json_name = "importField", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeImportField(uk.gov.gchq.event_logging.v4.ImportComplexType value) {
      if (importFieldBuilder_ == null) {
        if (((bitField0_ & 0x00000400) != 0) &&
          importField_ != null &&
          importField_ != uk.gov.gchq.event_logging.v4.ImportComplexType.getDefaultInstance()) {
          getImportFieldBuilder().mergeFrom(value);
        } else {
          importField_ = value;
        }
      } else {
        importFieldBuilder_.mergeFrom(value);
      }
      if (importField_ != null) {
        bitField0_ |= 0x00000400;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
     * </pre>
     *
     * <code>.event_logging.v4.ImportComplexType import_field = 11 [json_name = "importField", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearImportField() {
      bitField0_ = (bitField0_ & ~0x00000400);
      importField_ = null;
      if (importFieldBuilder_ != null) {
        importFieldBuilder_.dispose();
        importFieldBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
     * </pre>
     *
     * <code>.event_logging.v4.ImportComplexType import_field = 11 [json_name = "importField", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.ImportComplexType.Builder getImportFieldBuilder() {
      bitField0_ |= 0x00000400;
      onChanged();
      return getImportFieldFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
     * </pre>
     *
     * <code>.event_logging.v4.ImportComplexType import_field = 11 [json_name = "importField", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.ImportComplexTypeOrBuilder getImportFieldOrBuilder() {
      if (importFieldBuilder_ != null) {
        return importFieldBuilder_.getMessageOrBuilder();
      } else {
        return importField_ == null ?
            uk.gov.gchq.event_logging.v4.ImportComplexType.getDefaultInstance() : importField_;
      }
    }
    /**
     * <pre>
     * All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
     * </pre>
     *
     * <code>.event_logging.v4.ImportComplexType import_field = 11 [json_name = "importField", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.ImportComplexType, uk.gov.gchq.event_logging.v4.ImportComplexType.Builder, uk.gov.gchq.event_logging.v4.ImportComplexTypeOrBuilder> 
        getImportFieldFieldBuilder() {
      if (importFieldBuilder_ == null) {
        importFieldBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.ImportComplexType, uk.gov.gchq.event_logging.v4.ImportComplexType.Builder, uk.gov.gchq.event_logging.v4.ImportComplexTypeOrBuilder>(
                getImportField(),
                getParentForChildren(),
                isClean());
        importField_ = null;
      }
      return importFieldBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.ExportComplexType export_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.ExportComplexType, uk.gov.gchq.event_logging.v4.ExportComplexType.Builder, uk.gov.gchq.event_logging.v4.ExportComplexTypeOrBuilder> exportBuilder_;
    /**
     * <pre>
     * All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
     * </pre>
     *
     * <code>.event_logging.v4.ExportComplexType export = 12 [json_name = "export", (.buf.validate.field) = { ... }</code>
     * @return Whether the export field is set.
     */
    public boolean hasExport() {
      return ((bitField0_ & 0x00000800) != 0);
    }
    /**
     * <pre>
     * All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
     * </pre>
     *
     * <code>.event_logging.v4.ExportComplexType export = 12 [json_name = "export", (.buf.validate.field) = { ... }</code>
     * @return The export.
     */
    public uk.gov.gchq.event_logging.v4.ExportComplexType getExport() {
      if (exportBuilder_ == null) {
        return export_ == null ? uk.gov.gchq.event_logging.v4.ExportComplexType.getDefaultInstance() : export_;
      } else {
        return exportBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
     * </pre>
     *
     * <code>.event_logging.v4.ExportComplexType export = 12 [json_name = "export", (.buf.validate.field) = { ... }</code>
     */
    public Builder setExport(uk.gov.gchq.event_logging.v4.ExportComplexType value) {
      if (exportBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        export_ = value;
      } else {
        exportBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
     * </pre>
     *
     * <code>.event_logging.v4.ExportComplexType export = 12 [json_name = "export", (.buf.validate.field) = { ... }</code>
     */
    public Builder setExport(
        uk.gov.gchq.event_logging.v4.ExportComplexType.Builder builderForValue) {
      if (exportBuilder_ == null) {
        export_ = builderForValue.build();
      } else {
        exportBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000800;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
     * </pre>
     *
     * <code>.event_logging.v4.ExportComplexType export = 12 [json_name = "export", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeExport(uk.gov.gchq.event_logging.v4.ExportComplexType value) {
      if (exportBuilder_ == null) {
        if (((bitField0_ & 0x00000800) != 0) &&
          export_ != null &&
          export_ != uk.gov.gchq.event_logging.v4.ExportComplexType.getDefaultInstance()) {
          getExportBuilder().mergeFrom(value);
        } else {
          export_ = value;
        }
      } else {
        exportBuilder_.mergeFrom(value);
      }
      if (export_ != null) {
        bitField0_ |= 0x00000800;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
     * </pre>
     *
     * <code>.event_logging.v4.ExportComplexType export = 12 [json_name = "export", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearExport() {
      bitField0_ = (bitField0_ & ~0x00000800);
      export_ = null;
      if (exportBuilder_ != null) {
        exportBuilder_.dispose();
        exportBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
     * </pre>
     *
     * <code>.event_logging.v4.ExportComplexType export = 12 [json_name = "export", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.ExportComplexType.Builder getExportBuilder() {
      bitField0_ |= 0x00000800;
      onChanged();
      return getExportFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
     * </pre>
     *
     * <code>.event_logging.v4.ExportComplexType export = 12 [json_name = "export", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.ExportComplexTypeOrBuilder getExportOrBuilder() {
      if (exportBuilder_ != null) {
        return exportBuilder_.getMessageOrBuilder();
      } else {
        return export_ == null ?
            uk.gov.gchq.event_logging.v4.ExportComplexType.getDefaultInstance() : export_;
      }
    }
    /**
     * <pre>
     * All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
     * </pre>
     *
     * <code>.event_logging.v4.ExportComplexType export = 12 [json_name = "export", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.ExportComplexType, uk.gov.gchq.event_logging.v4.ExportComplexType.Builder, uk.gov.gchq.event_logging.v4.ExportComplexTypeOrBuilder> 
        getExportFieldBuilder() {
      if (exportBuilder_ == null) {
        exportBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.ExportComplexType, uk.gov.gchq.event_logging.v4.ExportComplexType.Builder, uk.gov.gchq.event_logging.v4.ExportComplexTypeOrBuilder>(
                getExport(),
                getParentForChildren(),
                isClean());
        export_ = null;
      }
      return exportBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.UpdateComplexType update_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.UpdateComplexType, uk.gov.gchq.event_logging.v4.UpdateComplexType.Builder, uk.gov.gchq.event_logging.v4.UpdateComplexTypeOrBuilder> updateBuilder_;
    /**
     * <pre>
     * All events related to updating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.UpdateComplexType update = 13 [json_name = "update", (.buf.validate.field) = { ... }</code>
     * @return Whether the update field is set.
     */
    public boolean hasUpdate() {
      return ((bitField0_ & 0x00001000) != 0);
    }
    /**
     * <pre>
     * All events related to updating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.UpdateComplexType update = 13 [json_name = "update", (.buf.validate.field) = { ... }</code>
     * @return The update.
     */
    public uk.gov.gchq.event_logging.v4.UpdateComplexType getUpdate() {
      if (updateBuilder_ == null) {
        return update_ == null ? uk.gov.gchq.event_logging.v4.UpdateComplexType.getDefaultInstance() : update_;
      } else {
        return updateBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * All events related to updating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.UpdateComplexType update = 13 [json_name = "update", (.buf.validate.field) = { ... }</code>
     */
    public Builder setUpdate(uk.gov.gchq.event_logging.v4.UpdateComplexType value) {
      if (updateBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        update_ = value;
      } else {
        updateBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to updating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.UpdateComplexType update = 13 [json_name = "update", (.buf.validate.field) = { ... }</code>
     */
    public Builder setUpdate(
        uk.gov.gchq.event_logging.v4.UpdateComplexType.Builder builderForValue) {
      if (updateBuilder_ == null) {
        update_ = builderForValue.build();
      } else {
        updateBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00001000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to updating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.UpdateComplexType update = 13 [json_name = "update", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeUpdate(uk.gov.gchq.event_logging.v4.UpdateComplexType value) {
      if (updateBuilder_ == null) {
        if (((bitField0_ & 0x00001000) != 0) &&
          update_ != null &&
          update_ != uk.gov.gchq.event_logging.v4.UpdateComplexType.getDefaultInstance()) {
          getUpdateBuilder().mergeFrom(value);
        } else {
          update_ = value;
        }
      } else {
        updateBuilder_.mergeFrom(value);
      }
      if (update_ != null) {
        bitField0_ |= 0x00001000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * All events related to updating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.UpdateComplexType update = 13 [json_name = "update", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearUpdate() {
      bitField0_ = (bitField0_ & ~0x00001000);
      update_ = null;
      if (updateBuilder_ != null) {
        updateBuilder_.dispose();
        updateBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to updating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.UpdateComplexType update = 13 [json_name = "update", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.UpdateComplexType.Builder getUpdateBuilder() {
      bitField0_ |= 0x00001000;
      onChanged();
      return getUpdateFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * All events related to updating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.UpdateComplexType update = 13 [json_name = "update", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.UpdateComplexTypeOrBuilder getUpdateOrBuilder() {
      if (updateBuilder_ != null) {
        return updateBuilder_.getMessageOrBuilder();
      } else {
        return update_ == null ?
            uk.gov.gchq.event_logging.v4.UpdateComplexType.getDefaultInstance() : update_;
      }
    }
    /**
     * <pre>
     * All events related to updating data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.UpdateComplexType update = 13 [json_name = "update", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.UpdateComplexType, uk.gov.gchq.event_logging.v4.UpdateComplexType.Builder, uk.gov.gchq.event_logging.v4.UpdateComplexTypeOrBuilder> 
        getUpdateFieldBuilder() {
      if (updateBuilder_ == null) {
        updateBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.UpdateComplexType, uk.gov.gchq.event_logging.v4.UpdateComplexType.Builder, uk.gov.gchq.event_logging.v4.UpdateComplexTypeOrBuilder>(
                getUpdate(),
                getParentForChildren(),
                isClean());
        update_ = null;
      }
      return updateBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.DeleteComplexType delete_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.DeleteComplexType, uk.gov.gchq.event_logging.v4.DeleteComplexType.Builder, uk.gov.gchq.event_logging.v4.DeleteComplexTypeOrBuilder> deleteBuilder_;
    /**
     * <pre>
     * All events related to deleting data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeleteComplexType delete = 14 [json_name = "delete", (.buf.validate.field) = { ... }</code>
     * @return Whether the delete field is set.
     */
    public boolean hasDelete() {
      return ((bitField0_ & 0x00002000) != 0);
    }
    /**
     * <pre>
     * All events related to deleting data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeleteComplexType delete = 14 [json_name = "delete", (.buf.validate.field) = { ... }</code>
     * @return The delete.
     */
    public uk.gov.gchq.event_logging.v4.DeleteComplexType getDelete() {
      if (deleteBuilder_ == null) {
        return delete_ == null ? uk.gov.gchq.event_logging.v4.DeleteComplexType.getDefaultInstance() : delete_;
      } else {
        return deleteBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * All events related to deleting data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeleteComplexType delete = 14 [json_name = "delete", (.buf.validate.field) = { ... }</code>
     */
    public Builder setDelete(uk.gov.gchq.event_logging.v4.DeleteComplexType value) {
      if (deleteBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        delete_ = value;
      } else {
        deleteBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to deleting data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeleteComplexType delete = 14 [json_name = "delete", (.buf.validate.field) = { ... }</code>
     */
    public Builder setDelete(
        uk.gov.gchq.event_logging.v4.DeleteComplexType.Builder builderForValue) {
      if (deleteBuilder_ == null) {
        delete_ = builderForValue.build();
      } else {
        deleteBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00002000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to deleting data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeleteComplexType delete = 14 [json_name = "delete", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeDelete(uk.gov.gchq.event_logging.v4.DeleteComplexType value) {
      if (deleteBuilder_ == null) {
        if (((bitField0_ & 0x00002000) != 0) &&
          delete_ != null &&
          delete_ != uk.gov.gchq.event_logging.v4.DeleteComplexType.getDefaultInstance()) {
          getDeleteBuilder().mergeFrom(value);
        } else {
          delete_ = value;
        }
      } else {
        deleteBuilder_.mergeFrom(value);
      }
      if (delete_ != null) {
        bitField0_ |= 0x00002000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * All events related to deleting data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeleteComplexType delete = 14 [json_name = "delete", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearDelete() {
      bitField0_ = (bitField0_ & ~0x00002000);
      delete_ = null;
      if (deleteBuilder_ != null) {
        deleteBuilder_.dispose();
        deleteBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to deleting data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeleteComplexType delete = 14 [json_name = "delete", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.DeleteComplexType.Builder getDeleteBuilder() {
      bitField0_ |= 0x00002000;
      onChanged();
      return getDeleteFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * All events related to deleting data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeleteComplexType delete = 14 [json_name = "delete", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.DeleteComplexTypeOrBuilder getDeleteOrBuilder() {
      if (deleteBuilder_ != null) {
        return deleteBuilder_.getMessageOrBuilder();
      } else {
        return delete_ == null ?
            uk.gov.gchq.event_logging.v4.DeleteComplexType.getDefaultInstance() : delete_;
      }
    }
    /**
     * <pre>
     * All events related to deleting data should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.DeleteComplexType delete = 14 [json_name = "delete", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.DeleteComplexType, uk.gov.gchq.event_logging.v4.DeleteComplexType.Builder, uk.gov.gchq.event_logging.v4.DeleteComplexTypeOrBuilder> 
        getDeleteFieldBuilder() {
      if (deleteBuilder_ == null) {
        deleteBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.DeleteComplexType, uk.gov.gchq.event_logging.v4.DeleteComplexType.Builder, uk.gov.gchq.event_logging.v4.DeleteComplexTypeOrBuilder>(
                getDelete(),
                getParentForChildren(),
                isClean());
        delete_ = null;
      }
      return deleteBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.ProcessComplexType process_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.ProcessComplexType, uk.gov.gchq.event_logging.v4.ProcessComplexType.Builder, uk.gov.gchq.event_logging.v4.ProcessComplexTypeOrBuilder> processBuilder_;
    /**
     * <pre>
     * Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
     * </pre>
     *
     * <code>.event_logging.v4.ProcessComplexType process = 15 [json_name = "process", (.buf.validate.field) = { ... }</code>
     * @return Whether the process field is set.
     */
    public boolean hasProcess() {
      return ((bitField0_ & 0x00004000) != 0);
    }
    /**
     * <pre>
     * Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
     * </pre>
     *
     * <code>.event_logging.v4.ProcessComplexType process = 15 [json_name = "process", (.buf.validate.field) = { ... }</code>
     * @return The process.
     */
    public uk.gov.gchq.event_logging.v4.ProcessComplexType getProcess() {
      if (processBuilder_ == null) {
        return process_ == null ? uk.gov.gchq.event_logging.v4.ProcessComplexType.getDefaultInstance() : process_;
      } else {
        return processBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
     * </pre>
     *
     * <code>.event_logging.v4.ProcessComplexType process = 15 [json_name = "process", (.buf.validate.field) = { ... }</code>
     */
    public Builder setProcess(uk.gov.gchq.event_logging.v4.ProcessComplexType value) {
      if (processBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        process_ = value;
      } else {
        processBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
     * </pre>
     *
     * <code>.event_logging.v4.ProcessComplexType process = 15 [json_name = "process", (.buf.validate.field) = { ... }</code>
     */
    public Builder setProcess(
        uk.gov.gchq.event_logging.v4.ProcessComplexType.Builder builderForValue) {
      if (processBuilder_ == null) {
        process_ = builderForValue.build();
      } else {
        processBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00004000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
     * </pre>
     *
     * <code>.event_logging.v4.ProcessComplexType process = 15 [json_name = "process", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeProcess(uk.gov.gchq.event_logging.v4.ProcessComplexType value) {
      if (processBuilder_ == null) {
        if (((bitField0_ & 0x00004000) != 0) &&
          process_ != null &&
          process_ != uk.gov.gchq.event_logging.v4.ProcessComplexType.getDefaultInstance()) {
          getProcessBuilder().mergeFrom(value);
        } else {
          process_ = value;
        }
      } else {
        processBuilder_.mergeFrom(value);
      }
      if (process_ != null) {
        bitField0_ |= 0x00004000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
     * </pre>
     *
     * <code>.event_logging.v4.ProcessComplexType process = 15 [json_name = "process", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearProcess() {
      bitField0_ = (bitField0_ & ~0x00004000);
      process_ = null;
      if (processBuilder_ != null) {
        processBuilder_.dispose();
        processBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
     * </pre>
     *
     * <code>.event_logging.v4.ProcessComplexType process = 15 [json_name = "process", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.ProcessComplexType.Builder getProcessBuilder() {
      bitField0_ |= 0x00004000;
      onChanged();
      return getProcessFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
     * </pre>
     *
     * <code>.event_logging.v4.ProcessComplexType process = 15 [json_name = "process", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.ProcessComplexTypeOrBuilder getProcessOrBuilder() {
      if (processBuilder_ != null) {
        return processBuilder_.getMessageOrBuilder();
      } else {
        return process_ == null ?
            uk.gov.gchq.event_logging.v4.ProcessComplexType.getDefaultInstance() : process_;
      }
    }
    /**
     * <pre>
     * Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
     * </pre>
     *
     * <code>.event_logging.v4.ProcessComplexType process = 15 [json_name = "process", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.ProcessComplexType, uk.gov.gchq.event_logging.v4.ProcessComplexType.Builder, uk.gov.gchq.event_logging.v4.ProcessComplexTypeOrBuilder> 
        getProcessFieldBuilder() {
      if (processBuilder_ == null) {
        processBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.ProcessComplexType, uk.gov.gchq.event_logging.v4.ProcessComplexType.Builder, uk.gov.gchq.event_logging.v4.ProcessComplexTypeOrBuilder>(
                getProcess(),
                getParentForChildren(),
                isClean());
        process_ = null;
      }
      return processBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.PrintComplexType print_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.PrintComplexType, uk.gov.gchq.event_logging.v4.PrintComplexType.Builder, uk.gov.gchq.event_logging.v4.PrintComplexTypeOrBuilder> printBuilder_;
    /**
     * <pre>
     * All events related to printing should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.PrintComplexType print = 16 [json_name = "print", (.buf.validate.field) = { ... }</code>
     * @return Whether the print field is set.
     */
    public boolean hasPrint() {
      return ((bitField0_ & 0x00008000) != 0);
    }
    /**
     * <pre>
     * All events related to printing should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.PrintComplexType print = 16 [json_name = "print", (.buf.validate.field) = { ... }</code>
     * @return The print.
     */
    public uk.gov.gchq.event_logging.v4.PrintComplexType getPrint() {
      if (printBuilder_ == null) {
        return print_ == null ? uk.gov.gchq.event_logging.v4.PrintComplexType.getDefaultInstance() : print_;
      } else {
        return printBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * All events related to printing should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.PrintComplexType print = 16 [json_name = "print", (.buf.validate.field) = { ... }</code>
     */
    public Builder setPrint(uk.gov.gchq.event_logging.v4.PrintComplexType value) {
      if (printBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        print_ = value;
      } else {
        printBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00008000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to printing should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.PrintComplexType print = 16 [json_name = "print", (.buf.validate.field) = { ... }</code>
     */
    public Builder setPrint(
        uk.gov.gchq.event_logging.v4.PrintComplexType.Builder builderForValue) {
      if (printBuilder_ == null) {
        print_ = builderForValue.build();
      } else {
        printBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00008000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to printing should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.PrintComplexType print = 16 [json_name = "print", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergePrint(uk.gov.gchq.event_logging.v4.PrintComplexType value) {
      if (printBuilder_ == null) {
        if (((bitField0_ & 0x00008000) != 0) &&
          print_ != null &&
          print_ != uk.gov.gchq.event_logging.v4.PrintComplexType.getDefaultInstance()) {
          getPrintBuilder().mergeFrom(value);
        } else {
          print_ = value;
        }
      } else {
        printBuilder_.mergeFrom(value);
      }
      if (print_ != null) {
        bitField0_ |= 0x00008000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * All events related to printing should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.PrintComplexType print = 16 [json_name = "print", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearPrint() {
      bitField0_ = (bitField0_ & ~0x00008000);
      print_ = null;
      if (printBuilder_ != null) {
        printBuilder_.dispose();
        printBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * All events related to printing should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.PrintComplexType print = 16 [json_name = "print", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.PrintComplexType.Builder getPrintBuilder() {
      bitField0_ |= 0x00008000;
      onChanged();
      return getPrintFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * All events related to printing should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.PrintComplexType print = 16 [json_name = "print", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.PrintComplexTypeOrBuilder getPrintOrBuilder() {
      if (printBuilder_ != null) {
        return printBuilder_.getMessageOrBuilder();
      } else {
        return print_ == null ?
            uk.gov.gchq.event_logging.v4.PrintComplexType.getDefaultInstance() : print_;
      }
    }
    /**
     * <pre>
     * All events related to printing should use this element.
     * </pre>
     *
     * <code>.event_logging.v4.PrintComplexType print = 16 [json_name = "print", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.PrintComplexType, uk.gov.gchq.event_logging.v4.PrintComplexType.Builder, uk.gov.gchq.event_logging.v4.PrintComplexTypeOrBuilder> 
        getPrintFieldBuilder() {
      if (printBuilder_ == null) {
        printBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.PrintComplexType, uk.gov.gchq.event_logging.v4.PrintComplexType.Builder, uk.gov.gchq.event_logging.v4.PrintComplexTypeOrBuilder>(
                getPrint(),
                getParentForChildren(),
                isClean());
        print_ = null;
      }
      return printBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.InstallComplexType install_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.InstallComplexType, uk.gov.gchq.event_logging.v4.InstallComplexType.Builder, uk.gov.gchq.event_logging.v4.InstallComplexTypeOrBuilder> installBuilder_;
    /**
     * <pre>
     * Details about installation of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.InstallComplexType install = 17 [json_name = "install", (.buf.validate.field) = { ... }</code>
     * @return Whether the install field is set.
     */
    public boolean hasInstall() {
      return ((bitField0_ & 0x00010000) != 0);
    }
    /**
     * <pre>
     * Details about installation of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.InstallComplexType install = 17 [json_name = "install", (.buf.validate.field) = { ... }</code>
     * @return The install.
     */
    public uk.gov.gchq.event_logging.v4.InstallComplexType getInstall() {
      if (installBuilder_ == null) {
        return install_ == null ? uk.gov.gchq.event_logging.v4.InstallComplexType.getDefaultInstance() : install_;
      } else {
        return installBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Details about installation of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.InstallComplexType install = 17 [json_name = "install", (.buf.validate.field) = { ... }</code>
     */
    public Builder setInstall(uk.gov.gchq.event_logging.v4.InstallComplexType value) {
      if (installBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        install_ = value;
      } else {
        installBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00010000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Details about installation of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.InstallComplexType install = 17 [json_name = "install", (.buf.validate.field) = { ... }</code>
     */
    public Builder setInstall(
        uk.gov.gchq.event_logging.v4.InstallComplexType.Builder builderForValue) {
      if (installBuilder_ == null) {
        install_ = builderForValue.build();
      } else {
        installBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00010000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Details about installation of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.InstallComplexType install = 17 [json_name = "install", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeInstall(uk.gov.gchq.event_logging.v4.InstallComplexType value) {
      if (installBuilder_ == null) {
        if (((bitField0_ & 0x00010000) != 0) &&
          install_ != null &&
          install_ != uk.gov.gchq.event_logging.v4.InstallComplexType.getDefaultInstance()) {
          getInstallBuilder().mergeFrom(value);
        } else {
          install_ = value;
        }
      } else {
        installBuilder_.mergeFrom(value);
      }
      if (install_ != null) {
        bitField0_ |= 0x00010000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Details about installation of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.InstallComplexType install = 17 [json_name = "install", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearInstall() {
      bitField0_ = (bitField0_ & ~0x00010000);
      install_ = null;
      if (installBuilder_ != null) {
        installBuilder_.dispose();
        installBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Details about installation of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.InstallComplexType install = 17 [json_name = "install", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.InstallComplexType.Builder getInstallBuilder() {
      bitField0_ |= 0x00010000;
      onChanged();
      return getInstallFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Details about installation of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.InstallComplexType install = 17 [json_name = "install", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.InstallComplexTypeOrBuilder getInstallOrBuilder() {
      if (installBuilder_ != null) {
        return installBuilder_.getMessageOrBuilder();
      } else {
        return install_ == null ?
            uk.gov.gchq.event_logging.v4.InstallComplexType.getDefaultInstance() : install_;
      }
    }
    /**
     * <pre>
     * Details about installation of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.InstallComplexType install = 17 [json_name = "install", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.InstallComplexType, uk.gov.gchq.event_logging.v4.InstallComplexType.Builder, uk.gov.gchq.event_logging.v4.InstallComplexTypeOrBuilder> 
        getInstallFieldBuilder() {
      if (installBuilder_ == null) {
        installBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.InstallComplexType, uk.gov.gchq.event_logging.v4.InstallComplexType.Builder, uk.gov.gchq.event_logging.v4.InstallComplexTypeOrBuilder>(
                getInstall(),
                getParentForChildren(),
                isClean());
        install_ = null;
      }
      return installBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.UninstallComplexType uninstall_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.UninstallComplexType, uk.gov.gchq.event_logging.v4.UninstallComplexType.Builder, uk.gov.gchq.event_logging.v4.UninstallComplexTypeOrBuilder> uninstallBuilder_;
    /**
     * <pre>
     * Details about removal of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.UninstallComplexType uninstall = 18 [json_name = "uninstall", (.buf.validate.field) = { ... }</code>
     * @return Whether the uninstall field is set.
     */
    public boolean hasUninstall() {
      return ((bitField0_ & 0x00020000) != 0);
    }
    /**
     * <pre>
     * Details about removal of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.UninstallComplexType uninstall = 18 [json_name = "uninstall", (.buf.validate.field) = { ... }</code>
     * @return The uninstall.
     */
    public uk.gov.gchq.event_logging.v4.UninstallComplexType getUninstall() {
      if (uninstallBuilder_ == null) {
        return uninstall_ == null ? uk.gov.gchq.event_logging.v4.UninstallComplexType.getDefaultInstance() : uninstall_;
      } else {
        return uninstallBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Details about removal of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.UninstallComplexType uninstall = 18 [json_name = "uninstall", (.buf.validate.field) = { ... }</code>
     */
    public Builder setUninstall(uk.gov.gchq.event_logging.v4.UninstallComplexType value) {
      if (uninstallBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        uninstall_ = value;
      } else {
        uninstallBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00020000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Details about removal of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.UninstallComplexType uninstall = 18 [json_name = "uninstall", (.buf.validate.field) = { ... }</code>
     */
    public Builder setUninstall(
        uk.gov.gchq.event_logging.v4.UninstallComplexType.Builder builderForValue) {
      if (uninstallBuilder_ == null) {
        uninstall_ = builderForValue.build();
      } else {
        uninstallBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00020000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Details about removal of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.UninstallComplexType uninstall = 18 [json_name = "uninstall", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeUninstall(uk.gov.gchq.event_logging.v4.UninstallComplexType value) {
      if (uninstallBuilder_ == null) {
        if (((bitField0_ & 0x00020000) != 0) &&
          uninstall_ != null &&
          uninstall_ != uk.gov.gchq.event_logging.v4.UninstallComplexType.getDefaultInstance()) {
          getUninstallBuilder().mergeFrom(value);
        } else {
          uninstall_ = value;
        }
      } else {
        uninstallBuilder_.mergeFrom(value);
      }
      if (uninstall_ != null) {
        bitField0_ |= 0x00020000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Details about removal of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.UninstallComplexType uninstall = 18 [json_name = "uninstall", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearUninstall() {
      bitField0_ = (bitField0_ & ~0x00020000);
      uninstall_ = null;
      if (uninstallBuilder_ != null) {
        uninstallBuilder_.dispose();
        uninstallBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Details about removal of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.UninstallComplexType uninstall = 18 [json_name = "uninstall", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.UninstallComplexType.Builder getUninstallBuilder() {
      bitField0_ |= 0x00020000;
      onChanged();
      return getUninstallFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Details about removal of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.UninstallComplexType uninstall = 18 [json_name = "uninstall", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.UninstallComplexTypeOrBuilder getUninstallOrBuilder() {
      if (uninstallBuilder_ != null) {
        return uninstallBuilder_.getMessageOrBuilder();
      } else {
        return uninstall_ == null ?
            uk.gov.gchq.event_logging.v4.UninstallComplexType.getDefaultInstance() : uninstall_;
      }
    }
    /**
     * <pre>
     * Details about removal of either hardware or software.
     * </pre>
     *
     * <code>.event_logging.v4.UninstallComplexType uninstall = 18 [json_name = "uninstall", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.UninstallComplexType, uk.gov.gchq.event_logging.v4.UninstallComplexType.Builder, uk.gov.gchq.event_logging.v4.UninstallComplexTypeOrBuilder> 
        getUninstallFieldBuilder() {
      if (uninstallBuilder_ == null) {
        uninstallBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.UninstallComplexType, uk.gov.gchq.event_logging.v4.UninstallComplexType.Builder, uk.gov.gchq.event_logging.v4.UninstallComplexTypeOrBuilder>(
                getUninstall(),
                getParentForChildren(),
                isClean());
        uninstall_ = null;
      }
      return uninstallBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType network_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType, uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType.Builder, uk.gov.gchq.event_logging.v4.NetworkEventActionComplexTypeOrBuilder> networkBuilder_;
    /**
     * <pre>
     * Any events related to network traffic, filtering or access should be recorded using this element.
     * </pre>
     *
     * <code>.event_logging.v4.NetworkEventActionComplexType network = 19 [json_name = "network", (.buf.validate.field) = { ... }</code>
     * @return Whether the network field is set.
     */
    public boolean hasNetwork() {
      return ((bitField0_ & 0x00040000) != 0);
    }
    /**
     * <pre>
     * Any events related to network traffic, filtering or access should be recorded using this element.
     * </pre>
     *
     * <code>.event_logging.v4.NetworkEventActionComplexType network = 19 [json_name = "network", (.buf.validate.field) = { ... }</code>
     * @return The network.
     */
    public uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType getNetwork() {
      if (networkBuilder_ == null) {
        return network_ == null ? uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType.getDefaultInstance() : network_;
      } else {
        return networkBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Any events related to network traffic, filtering or access should be recorded using this element.
     * </pre>
     *
     * <code>.event_logging.v4.NetworkEventActionComplexType network = 19 [json_name = "network", (.buf.validate.field) = { ... }</code>
     */
    public Builder setNetwork(uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType value) {
      if (networkBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        network_ = value;
      } else {
        networkBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00040000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Any events related to network traffic, filtering or access should be recorded using this element.
     * </pre>
     *
     * <code>.event_logging.v4.NetworkEventActionComplexType network = 19 [json_name = "network", (.buf.validate.field) = { ... }</code>
     */
    public Builder setNetwork(
        uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType.Builder builderForValue) {
      if (networkBuilder_ == null) {
        network_ = builderForValue.build();
      } else {
        networkBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00040000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Any events related to network traffic, filtering or access should be recorded using this element.
     * </pre>
     *
     * <code>.event_logging.v4.NetworkEventActionComplexType network = 19 [json_name = "network", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeNetwork(uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType value) {
      if (networkBuilder_ == null) {
        if (((bitField0_ & 0x00040000) != 0) &&
          network_ != null &&
          network_ != uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType.getDefaultInstance()) {
          getNetworkBuilder().mergeFrom(value);
        } else {
          network_ = value;
        }
      } else {
        networkBuilder_.mergeFrom(value);
      }
      if (network_ != null) {
        bitField0_ |= 0x00040000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Any events related to network traffic, filtering or access should be recorded using this element.
     * </pre>
     *
     * <code>.event_logging.v4.NetworkEventActionComplexType network = 19 [json_name = "network", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearNetwork() {
      bitField0_ = (bitField0_ & ~0x00040000);
      network_ = null;
      if (networkBuilder_ != null) {
        networkBuilder_.dispose();
        networkBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Any events related to network traffic, filtering or access should be recorded using this element.
     * </pre>
     *
     * <code>.event_logging.v4.NetworkEventActionComplexType network = 19 [json_name = "network", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType.Builder getNetworkBuilder() {
      bitField0_ |= 0x00040000;
      onChanged();
      return getNetworkFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Any events related to network traffic, filtering or access should be recorded using this element.
     * </pre>
     *
     * <code>.event_logging.v4.NetworkEventActionComplexType network = 19 [json_name = "network", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.NetworkEventActionComplexTypeOrBuilder getNetworkOrBuilder() {
      if (networkBuilder_ != null) {
        return networkBuilder_.getMessageOrBuilder();
      } else {
        return network_ == null ?
            uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType.getDefaultInstance() : network_;
      }
    }
    /**
     * <pre>
     * Any events related to network traffic, filtering or access should be recorded using this element.
     * </pre>
     *
     * <code>.event_logging.v4.NetworkEventActionComplexType network = 19 [json_name = "network", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType, uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType.Builder, uk.gov.gchq.event_logging.v4.NetworkEventActionComplexTypeOrBuilder> 
        getNetworkFieldBuilder() {
      if (networkBuilder_ == null) {
        networkBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType, uk.gov.gchq.event_logging.v4.NetworkEventActionComplexType.Builder, uk.gov.gchq.event_logging.v4.NetworkEventActionComplexTypeOrBuilder>(
                getNetwork(),
                getParentForChildren(),
                isClean());
        network_ = null;
      }
      return networkBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.AlertComplexType alert_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.AlertComplexType, uk.gov.gchq.event_logging.v4.AlertComplexType.Builder, uk.gov.gchq.event_logging.v4.AlertComplexTypeOrBuilder> alertBuilder_;
    /**
     * <pre>
     * An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
     * </pre>
     *
     * <code>.event_logging.v4.AlertComplexType alert = 20 [json_name = "alert", (.buf.validate.field) = { ... }</code>
     * @return Whether the alert field is set.
     */
    public boolean hasAlert() {
      return ((bitField0_ & 0x00080000) != 0);
    }
    /**
     * <pre>
     * An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
     * </pre>
     *
     * <code>.event_logging.v4.AlertComplexType alert = 20 [json_name = "alert", (.buf.validate.field) = { ... }</code>
     * @return The alert.
     */
    public uk.gov.gchq.event_logging.v4.AlertComplexType getAlert() {
      if (alertBuilder_ == null) {
        return alert_ == null ? uk.gov.gchq.event_logging.v4.AlertComplexType.getDefaultInstance() : alert_;
      } else {
        return alertBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
     * </pre>
     *
     * <code>.event_logging.v4.AlertComplexType alert = 20 [json_name = "alert", (.buf.validate.field) = { ... }</code>
     */
    public Builder setAlert(uk.gov.gchq.event_logging.v4.AlertComplexType value) {
      if (alertBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        alert_ = value;
      } else {
        alertBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00080000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
     * </pre>
     *
     * <code>.event_logging.v4.AlertComplexType alert = 20 [json_name = "alert", (.buf.validate.field) = { ... }</code>
     */
    public Builder setAlert(
        uk.gov.gchq.event_logging.v4.AlertComplexType.Builder builderForValue) {
      if (alertBuilder_ == null) {
        alert_ = builderForValue.build();
      } else {
        alertBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00080000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
     * </pre>
     *
     * <code>.event_logging.v4.AlertComplexType alert = 20 [json_name = "alert", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeAlert(uk.gov.gchq.event_logging.v4.AlertComplexType value) {
      if (alertBuilder_ == null) {
        if (((bitField0_ & 0x00080000) != 0) &&
          alert_ != null &&
          alert_ != uk.gov.gchq.event_logging.v4.AlertComplexType.getDefaultInstance()) {
          getAlertBuilder().mergeFrom(value);
        } else {
          alert_ = value;
        }
      } else {
        alertBuilder_.mergeFrom(value);
      }
      if (alert_ != null) {
        bitField0_ |= 0x00080000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
     * </pre>
     *
     * <code>.event_logging.v4.AlertComplexType alert = 20 [json_name = "alert", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearAlert() {
      bitField0_ = (bitField0_ & ~0x00080000);
      alert_ = null;
      if (alertBuilder_ != null) {
        alertBuilder_.dispose();
        alertBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
     * </pre>
     *
     * <code>.event_logging.v4.AlertComplexType alert = 20 [json_name = "alert", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.AlertComplexType.Builder getAlertBuilder() {
      bitField0_ |= 0x00080000;
      onChanged();
      return getAlertFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
     * </pre>
     *
     * <code>.event_logging.v4.AlertComplexType alert = 20 [json_name = "alert", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.AlertComplexTypeOrBuilder getAlertOrBuilder() {
      if (alertBuilder_ != null) {
        return alertBuilder_.getMessageOrBuilder();
      } else {
        return alert_ == null ?
            uk.gov.gchq.event_logging.v4.AlertComplexType.getDefaultInstance() : alert_;
      }
    }
    /**
     * <pre>
     * An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
     * </pre>
     *
     * <code>.event_logging.v4.AlertComplexType alert = 20 [json_name = "alert", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.AlertComplexType, uk.gov.gchq.event_logging.v4.AlertComplexType.Builder, uk.gov.gchq.event_logging.v4.AlertComplexTypeOrBuilder> 
        getAlertFieldBuilder() {
      if (alertBuilder_ == null) {
        alertBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.AlertComplexType, uk.gov.gchq.event_logging.v4.AlertComplexType.Builder, uk.gov.gchq.event_logging.v4.AlertComplexTypeOrBuilder>(
                getAlert(),
                getParentForChildren(),
                isClean());
        alert_ = null;
      }
      return alertBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.SendComplexType send_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.SendComplexType, uk.gov.gchq.event_logging.v4.SendComplexType.Builder, uk.gov.gchq.event_logging.v4.SendComplexTypeOrBuilder> sendBuilder_;
    /**
     * <pre>
     * Used for send events that are at a higher level than a network/send event, e.g. sending an email
     * </pre>
     *
     * <code>.event_logging.v4.SendComplexType send = 21 [json_name = "send", (.buf.validate.field) = { ... }</code>
     * @return Whether the send field is set.
     */
    public boolean hasSend() {
      return ((bitField0_ & 0x00100000) != 0);
    }
    /**
     * <pre>
     * Used for send events that are at a higher level than a network/send event, e.g. sending an email
     * </pre>
     *
     * <code>.event_logging.v4.SendComplexType send = 21 [json_name = "send", (.buf.validate.field) = { ... }</code>
     * @return The send.
     */
    public uk.gov.gchq.event_logging.v4.SendComplexType getSend() {
      if (sendBuilder_ == null) {
        return send_ == null ? uk.gov.gchq.event_logging.v4.SendComplexType.getDefaultInstance() : send_;
      } else {
        return sendBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Used for send events that are at a higher level than a network/send event, e.g. sending an email
     * </pre>
     *
     * <code>.event_logging.v4.SendComplexType send = 21 [json_name = "send", (.buf.validate.field) = { ... }</code>
     */
    public Builder setSend(uk.gov.gchq.event_logging.v4.SendComplexType value) {
      if (sendBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        send_ = value;
      } else {
        sendBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00100000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Used for send events that are at a higher level than a network/send event, e.g. sending an email
     * </pre>
     *
     * <code>.event_logging.v4.SendComplexType send = 21 [json_name = "send", (.buf.validate.field) = { ... }</code>
     */
    public Builder setSend(
        uk.gov.gchq.event_logging.v4.SendComplexType.Builder builderForValue) {
      if (sendBuilder_ == null) {
        send_ = builderForValue.build();
      } else {
        sendBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00100000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Used for send events that are at a higher level than a network/send event, e.g. sending an email
     * </pre>
     *
     * <code>.event_logging.v4.SendComplexType send = 21 [json_name = "send", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeSend(uk.gov.gchq.event_logging.v4.SendComplexType value) {
      if (sendBuilder_ == null) {
        if (((bitField0_ & 0x00100000) != 0) &&
          send_ != null &&
          send_ != uk.gov.gchq.event_logging.v4.SendComplexType.getDefaultInstance()) {
          getSendBuilder().mergeFrom(value);
        } else {
          send_ = value;
        }
      } else {
        sendBuilder_.mergeFrom(value);
      }
      if (send_ != null) {
        bitField0_ |= 0x00100000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Used for send events that are at a higher level than a network/send event, e.g. sending an email
     * </pre>
     *
     * <code>.event_logging.v4.SendComplexType send = 21 [json_name = "send", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearSend() {
      bitField0_ = (bitField0_ & ~0x00100000);
      send_ = null;
      if (sendBuilder_ != null) {
        sendBuilder_.dispose();
        sendBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Used for send events that are at a higher level than a network/send event, e.g. sending an email
     * </pre>
     *
     * <code>.event_logging.v4.SendComplexType send = 21 [json_name = "send", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.SendComplexType.Builder getSendBuilder() {
      bitField0_ |= 0x00100000;
      onChanged();
      return getSendFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Used for send events that are at a higher level than a network/send event, e.g. sending an email
     * </pre>
     *
     * <code>.event_logging.v4.SendComplexType send = 21 [json_name = "send", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.SendComplexTypeOrBuilder getSendOrBuilder() {
      if (sendBuilder_ != null) {
        return sendBuilder_.getMessageOrBuilder();
      } else {
        return send_ == null ?
            uk.gov.gchq.event_logging.v4.SendComplexType.getDefaultInstance() : send_;
      }
    }
    /**
     * <pre>
     * Used for send events that are at a higher level than a network/send event, e.g. sending an email
     * </pre>
     *
     * <code>.event_logging.v4.SendComplexType send = 21 [json_name = "send", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.SendComplexType, uk.gov.gchq.event_logging.v4.SendComplexType.Builder, uk.gov.gchq.event_logging.v4.SendComplexTypeOrBuilder> 
        getSendFieldBuilder() {
      if (sendBuilder_ == null) {
        sendBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.SendComplexType, uk.gov.gchq.event_logging.v4.SendComplexType.Builder, uk.gov.gchq.event_logging.v4.SendComplexTypeOrBuilder>(
                getSend(),
                getParentForChildren(),
                isClean());
        send_ = null;
      }
      return sendBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.ReceiveComplexType receive_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.ReceiveComplexType, uk.gov.gchq.event_logging.v4.ReceiveComplexType.Builder, uk.gov.gchq.event_logging.v4.ReceiveComplexTypeOrBuilder> receiveBuilder_;
    /**
     * <pre>
     * Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
     * </pre>
     *
     * <code>.event_logging.v4.ReceiveComplexType receive = 22 [json_name = "receive", (.buf.validate.field) = { ... }</code>
     * @return Whether the receive field is set.
     */
    public boolean hasReceive() {
      return ((bitField0_ & 0x00200000) != 0);
    }
    /**
     * <pre>
     * Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
     * </pre>
     *
     * <code>.event_logging.v4.ReceiveComplexType receive = 22 [json_name = "receive", (.buf.validate.field) = { ... }</code>
     * @return The receive.
     */
    public uk.gov.gchq.event_logging.v4.ReceiveComplexType getReceive() {
      if (receiveBuilder_ == null) {
        return receive_ == null ? uk.gov.gchq.event_logging.v4.ReceiveComplexType.getDefaultInstance() : receive_;
      } else {
        return receiveBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
     * </pre>
     *
     * <code>.event_logging.v4.ReceiveComplexType receive = 22 [json_name = "receive", (.buf.validate.field) = { ... }</code>
     */
    public Builder setReceive(uk.gov.gchq.event_logging.v4.ReceiveComplexType value) {
      if (receiveBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        receive_ = value;
      } else {
        receiveBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00200000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
     * </pre>
     *
     * <code>.event_logging.v4.ReceiveComplexType receive = 22 [json_name = "receive", (.buf.validate.field) = { ... }</code>
     */
    public Builder setReceive(
        uk.gov.gchq.event_logging.v4.ReceiveComplexType.Builder builderForValue) {
      if (receiveBuilder_ == null) {
        receive_ = builderForValue.build();
      } else {
        receiveBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00200000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
     * </pre>
     *
     * <code>.event_logging.v4.ReceiveComplexType receive = 22 [json_name = "receive", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeReceive(uk.gov.gchq.event_logging.v4.ReceiveComplexType value) {
      if (receiveBuilder_ == null) {
        if (((bitField0_ & 0x00200000) != 0) &&
          receive_ != null &&
          receive_ != uk.gov.gchq.event_logging.v4.ReceiveComplexType.getDefaultInstance()) {
          getReceiveBuilder().mergeFrom(value);
        } else {
          receive_ = value;
        }
      } else {
        receiveBuilder_.mergeFrom(value);
      }
      if (receive_ != null) {
        bitField0_ |= 0x00200000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
     * </pre>
     *
     * <code>.event_logging.v4.ReceiveComplexType receive = 22 [json_name = "receive", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearReceive() {
      bitField0_ = (bitField0_ & ~0x00200000);
      receive_ = null;
      if (receiveBuilder_ != null) {
        receiveBuilder_.dispose();
        receiveBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
     * </pre>
     *
     * <code>.event_logging.v4.ReceiveComplexType receive = 22 [json_name = "receive", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.ReceiveComplexType.Builder getReceiveBuilder() {
      bitField0_ |= 0x00200000;
      onChanged();
      return getReceiveFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
     * </pre>
     *
     * <code>.event_logging.v4.ReceiveComplexType receive = 22 [json_name = "receive", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.ReceiveComplexTypeOrBuilder getReceiveOrBuilder() {
      if (receiveBuilder_ != null) {
        return receiveBuilder_.getMessageOrBuilder();
      } else {
        return receive_ == null ?
            uk.gov.gchq.event_logging.v4.ReceiveComplexType.getDefaultInstance() : receive_;
      }
    }
    /**
     * <pre>
     * Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
     * </pre>
     *
     * <code>.event_logging.v4.ReceiveComplexType receive = 22 [json_name = "receive", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.ReceiveComplexType, uk.gov.gchq.event_logging.v4.ReceiveComplexType.Builder, uk.gov.gchq.event_logging.v4.ReceiveComplexTypeOrBuilder> 
        getReceiveFieldBuilder() {
      if (receiveBuilder_ == null) {
        receiveBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.ReceiveComplexType, uk.gov.gchq.event_logging.v4.ReceiveComplexType.Builder, uk.gov.gchq.event_logging.v4.ReceiveComplexTypeOrBuilder>(
                getReceive(),
                getParentForChildren(),
                isClean());
        receive_ = null;
      }
      return receiveBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.ApprovalComplexType approval_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.ApprovalComplexType, uk.gov.gchq.event_logging.v4.ApprovalComplexType.Builder, uk.gov.gchq.event_logging.v4.ApprovalComplexTypeOrBuilder> approvalBuilder_;
    /**
     * <pre>
     * Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
     * </pre>
     *
     * <code>.event_logging.v4.ApprovalComplexType approval = 23 [json_name = "approval", (.buf.validate.field) = { ... }</code>
     * @return Whether the approval field is set.
     */
    public boolean hasApproval() {
      return ((bitField0_ & 0x00400000) != 0);
    }
    /**
     * <pre>
     * Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
     * </pre>
     *
     * <code>.event_logging.v4.ApprovalComplexType approval = 23 [json_name = "approval", (.buf.validate.field) = { ... }</code>
     * @return The approval.
     */
    public uk.gov.gchq.event_logging.v4.ApprovalComplexType getApproval() {
      if (approvalBuilder_ == null) {
        return approval_ == null ? uk.gov.gchq.event_logging.v4.ApprovalComplexType.getDefaultInstance() : approval_;
      } else {
        return approvalBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
     * </pre>
     *
     * <code>.event_logging.v4.ApprovalComplexType approval = 23 [json_name = "approval", (.buf.validate.field) = { ... }</code>
     */
    public Builder setApproval(uk.gov.gchq.event_logging.v4.ApprovalComplexType value) {
      if (approvalBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        approval_ = value;
      } else {
        approvalBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00400000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
     * </pre>
     *
     * <code>.event_logging.v4.ApprovalComplexType approval = 23 [json_name = "approval", (.buf.validate.field) = { ... }</code>
     */
    public Builder setApproval(
        uk.gov.gchq.event_logging.v4.ApprovalComplexType.Builder builderForValue) {
      if (approvalBuilder_ == null) {
        approval_ = builderForValue.build();
      } else {
        approvalBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00400000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
     * </pre>
     *
     * <code>.event_logging.v4.ApprovalComplexType approval = 23 [json_name = "approval", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeApproval(uk.gov.gchq.event_logging.v4.ApprovalComplexType value) {
      if (approvalBuilder_ == null) {
        if (((bitField0_ & 0x00400000) != 0) &&
          approval_ != null &&
          approval_ != uk.gov.gchq.event_logging.v4.ApprovalComplexType.getDefaultInstance()) {
          getApprovalBuilder().mergeFrom(value);
        } else {
          approval_ = value;
        }
      } else {
        approvalBuilder_.mergeFrom(value);
      }
      if (approval_ != null) {
        bitField0_ |= 0x00400000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
     * </pre>
     *
     * <code>.event_logging.v4.ApprovalComplexType approval = 23 [json_name = "approval", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearApproval() {
      bitField0_ = (bitField0_ & ~0x00400000);
      approval_ = null;
      if (approvalBuilder_ != null) {
        approvalBuilder_.dispose();
        approvalBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
     * </pre>
     *
     * <code>.event_logging.v4.ApprovalComplexType approval = 23 [json_name = "approval", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.ApprovalComplexType.Builder getApprovalBuilder() {
      bitField0_ |= 0x00400000;
      onChanged();
      return getApprovalFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
     * </pre>
     *
     * <code>.event_logging.v4.ApprovalComplexType approval = 23 [json_name = "approval", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.ApprovalComplexTypeOrBuilder getApprovalOrBuilder() {
      if (approvalBuilder_ != null) {
        return approvalBuilder_.getMessageOrBuilder();
      } else {
        return approval_ == null ?
            uk.gov.gchq.event_logging.v4.ApprovalComplexType.getDefaultInstance() : approval_;
      }
    }
    /**
     * <pre>
     * Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
     * </pre>
     *
     * <code>.event_logging.v4.ApprovalComplexType approval = 23 [json_name = "approval", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.ApprovalComplexType, uk.gov.gchq.event_logging.v4.ApprovalComplexType.Builder, uk.gov.gchq.event_logging.v4.ApprovalComplexTypeOrBuilder> 
        getApprovalFieldBuilder() {
      if (approvalBuilder_ == null) {
        approvalBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.ApprovalComplexType, uk.gov.gchq.event_logging.v4.ApprovalComplexType.Builder, uk.gov.gchq.event_logging.v4.ApprovalComplexTypeOrBuilder>(
                getApproval(),
                getParentForChildren(),
                isClean());
        approval_ = null;
      }
      return approvalBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType unknown_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType, uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.Builder, uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownTypeOrBuilder> unknownBuilder_;
    /**
     * <pre>
     * This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType.UnknownType unknown = 24 [json_name = "unknown", (.buf.validate.field) = { ... }</code>
     * @return Whether the unknown field is set.
     */
    public boolean hasUnknown() {
      return ((bitField0_ & 0x00800000) != 0);
    }
    /**
     * <pre>
     * This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType.UnknownType unknown = 24 [json_name = "unknown", (.buf.validate.field) = { ... }</code>
     * @return The unknown.
     */
    public uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType getUnknown() {
      if (unknownBuilder_ == null) {
        return unknown_ == null ? uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.getDefaultInstance() : unknown_;
      } else {
        return unknownBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType.UnknownType unknown = 24 [json_name = "unknown", (.buf.validate.field) = { ... }</code>
     */
    public Builder setUnknown(uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType value) {
      if (unknownBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        unknown_ = value;
      } else {
        unknownBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00800000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType.UnknownType unknown = 24 [json_name = "unknown", (.buf.validate.field) = { ... }</code>
     */
    public Builder setUnknown(
        uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.Builder builderForValue) {
      if (unknownBuilder_ == null) {
        unknown_ = builderForValue.build();
      } else {
        unknownBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00800000;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType.UnknownType unknown = 24 [json_name = "unknown", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeUnknown(uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType value) {
      if (unknownBuilder_ == null) {
        if (((bitField0_ & 0x00800000) != 0) &&
          unknown_ != null &&
          unknown_ != uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.getDefaultInstance()) {
          getUnknownBuilder().mergeFrom(value);
        } else {
          unknown_ = value;
        }
      } else {
        unknownBuilder_.mergeFrom(value);
      }
      if (unknown_ != null) {
        bitField0_ |= 0x00800000;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType.UnknownType unknown = 24 [json_name = "unknown", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearUnknown() {
      bitField0_ = (bitField0_ & ~0x00800000);
      unknown_ = null;
      if (unknownBuilder_ != null) {
        unknownBuilder_.dispose();
        unknownBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType.UnknownType unknown = 24 [json_name = "unknown", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.Builder getUnknownBuilder() {
      bitField0_ |= 0x00800000;
      onChanged();
      return getUnknownFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType.UnknownType unknown = 24 [json_name = "unknown", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownTypeOrBuilder getUnknownOrBuilder() {
      if (unknownBuilder_ != null) {
        return unknownBuilder_.getMessageOrBuilder();
      } else {
        return unknown_ == null ?
            uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.getDefaultInstance() : unknown_;
      }
    }
    /**
     * <pre>
     * This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType.UnknownType unknown = 24 [json_name = "unknown", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType, uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.Builder, uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownTypeOrBuilder> 
        getUnknownFieldBuilder() {
      if (unknownBuilder_ == null) {
        unknownBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType, uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownType.Builder, uk.gov.gchq.event_logging.v4.EventDetailComplexType.UnknownTypeOrBuilder>(
                getUnknown(),
                getParentForChildren(),
                isClean());
        unknown_ = null;
      }
      return unknownBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:event_logging.v4.EventDetailComplexType)
  }

  // @@protoc_insertion_point(class_scope:event_logging.v4.EventDetailComplexType)
  private static final uk.gov.gchq.event_logging.v4.EventDetailComplexType DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new uk.gov.gchq.event_logging.v4.EventDetailComplexType();
  }

  public static uk.gov.gchq.event_logging.v4.EventDetailComplexType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<EventDetailComplexType>
      PARSER = new com.google.protobuf.AbstractParser<EventDetailComplexType>() {
    @java.lang.Override
    public EventDetailComplexType parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<EventDetailComplexType> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<EventDetailComplexType> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.EventDetailComplexType getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

