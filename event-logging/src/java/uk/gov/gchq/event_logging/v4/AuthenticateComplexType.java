// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/authenticate_complex_type.proto

// Protobuf Java Version: 4.26.1
package uk.gov.gchq.event_logging.v4;

/**
 * <pre>
 * Used to record authentication events such as logon and logoff. All authentication events that originate from a client device should record details of the client device in the event source.
 * </pre>
 *
 * Protobuf type {@code event_logging.v4.AuthenticateComplexType}
 */
public final class AuthenticateComplexType extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:event_logging.v4.AuthenticateComplexType)
    AuthenticateComplexTypeOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      AuthenticateComplexType.class.getName());
  }
  // Use AuthenticateComplexType.newBuilder() to construct.
  private AuthenticateComplexType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private AuthenticateComplexType() {
    action_ = 0;
    logonType_ = 0;
    data_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return uk.gov.gchq.event_logging.v4.AuthenticateComplexTypeProto.internal_static_event_logging_v4_AuthenticateComplexType_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return uk.gov.gchq.event_logging.v4.AuthenticateComplexTypeProto.internal_static_event_logging_v4_AuthenticateComplexType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            uk.gov.gchq.event_logging.v4.AuthenticateComplexType.class, uk.gov.gchq.event_logging.v4.AuthenticateComplexType.Builder.class);
  }

  private int bitField0_;
  public static final int ACTION_FIELD_NUMBER = 1;
  private int action_ = 0;
  /**
   * <pre>
   * The authentication action that was performed, e.g. Logon, Logoff.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateActionSimpleType action = 1 [json_name = "action", (.buf.validate.field) = { ... }</code>
   * @return The enum numeric value on the wire for action.
   */
  @java.lang.Override public int getActionValue() {
    return action_;
  }
  /**
   * <pre>
   * The authentication action that was performed, e.g. Logon, Logoff.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateActionSimpleType action = 1 [json_name = "action", (.buf.validate.field) = { ... }</code>
   * @return The action.
   */
  @java.lang.Override public uk.gov.gchq.event_logging.v4.AuthenticateActionSimpleType getAction() {
    uk.gov.gchq.event_logging.v4.AuthenticateActionSimpleType result = uk.gov.gchq.event_logging.v4.AuthenticateActionSimpleType.forNumber(action_);
    return result == null ? uk.gov.gchq.event_logging.v4.AuthenticateActionSimpleType.UNRECOGNIZED : result;
  }

  public static final int LOGON_TYPE_FIELD_NUMBER = 2;
  private int logonType_ = 0;
  /**
   * <pre>
   * This indicates the type of logon. For example, Microsoft Windows has several logon types such as Interactive (logon to domain), RemoteInteractive (logon to remote machine), CachedInteractive (logon to local machine using cached domain information due to loss of network).
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateLogonTypeSimpleType logon_type = 2 [json_name = "logonType", (.buf.validate.field) = { ... }</code>
   * @return The enum numeric value on the wire for logonType.
   */
  @java.lang.Override public int getLogonTypeValue() {
    return logonType_;
  }
  /**
   * <pre>
   * This indicates the type of logon. For example, Microsoft Windows has several logon types such as Interactive (logon to domain), RemoteInteractive (logon to remote machine), CachedInteractive (logon to local machine using cached domain information due to loss of network).
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateLogonTypeSimpleType logon_type = 2 [json_name = "logonType", (.buf.validate.field) = { ... }</code>
   * @return The logonType.
   */
  @java.lang.Override public uk.gov.gchq.event_logging.v4.AuthenticateLogonTypeSimpleType getLogonType() {
    uk.gov.gchq.event_logging.v4.AuthenticateLogonTypeSimpleType result = uk.gov.gchq.event_logging.v4.AuthenticateLogonTypeSimpleType.forNumber(logonType_);
    return result == null ? uk.gov.gchq.event_logging.v4.AuthenticateLogonTypeSimpleType.UNRECOGNIZED : result;
  }

  public static final int USER_FIELD_NUMBER = 3;
  private uk.gov.gchq.event_logging.v4.UserComplexType user_;
  /**
   * <pre>
   * The user who the authentication action relates to.
   * </pre>
   *
   * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
   * @return Whether the user field is set.
   */
  @java.lang.Override
  public boolean hasUser() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * The user who the authentication action relates to.
   * </pre>
   *
   * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
   * @return The user.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.UserComplexType getUser() {
    return user_ == null ? uk.gov.gchq.event_logging.v4.UserComplexType.getDefaultInstance() : user_;
  }
  /**
   * <pre>
   * The user who the authentication action relates to.
   * </pre>
   *
   * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.UserComplexTypeOrBuilder getUserOrBuilder() {
    return user_ == null ? uk.gov.gchq.event_logging.v4.UserComplexType.getDefaultInstance() : user_;
  }

  public static final int DEVICE_FIELD_NUMBER = 4;
  private uk.gov.gchq.event_logging.v4.DeviceComplexType device_;
  /**
   * <pre>
   * Where a device authenticates with another device, this is the device that initiates the authentication action.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
   * @return Whether the device field is set.
   */
  @java.lang.Override
  public boolean hasDevice() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <pre>
   * Where a device authenticates with another device, this is the device that initiates the authentication action.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
   * @return The device.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.DeviceComplexType getDevice() {
    return device_ == null ? uk.gov.gchq.event_logging.v4.DeviceComplexType.getDefaultInstance() : device_;
  }
  /**
   * <pre>
   * Where a device authenticates with another device, this is the device that initiates the authentication action.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.DeviceComplexTypeOrBuilder getDeviceOrBuilder() {
    return device_ == null ? uk.gov.gchq.event_logging.v4.DeviceComplexType.getDefaultInstance() : device_;
  }

  public static final int GROUP_FIELD_NUMBER = 5;
  private uk.gov.gchq.event_logging.v4.GroupComplexType group_;
  /**
   * <pre>
   * The group the authentication action relates to.
   * </pre>
   *
   * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
   * @return Whether the group field is set.
   */
  @java.lang.Override
  public boolean hasGroup() {
    return ((bitField0_ & 0x00000004) != 0);
  }
  /**
   * <pre>
   * The group the authentication action relates to.
   * </pre>
   *
   * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
   * @return The group.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.GroupComplexType getGroup() {
    return group_ == null ? uk.gov.gchq.event_logging.v4.GroupComplexType.getDefaultInstance() : group_;
  }
  /**
   * <pre>
   * The group the authentication action relates to.
   * </pre>
   *
   * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.GroupComplexTypeOrBuilder getGroupOrBuilder() {
    return group_ == null ? uk.gov.gchq.event_logging.v4.GroupComplexType.getDefaultInstance() : group_;
  }

  public static final int OUTCOME_FIELD_NUMBER = 11;
  private uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType outcome_;
  /**
   * <pre>
   * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
   * @return Whether the outcome field is set.
   */
  @java.lang.Override
  public boolean hasOutcome() {
    return ((bitField0_ & 0x00000008) != 0);
  }
  /**
   * <pre>
   * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
   * @return The outcome.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType getOutcome() {
    return outcome_ == null ? uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType.getDefaultInstance() : outcome_;
  }
  /**
   * <pre>
   * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexTypeOrBuilder getOutcomeOrBuilder() {
    return outcome_ == null ? uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType.getDefaultInstance() : outcome_;
  }

  public static final int DATA_FIELD_NUMBER = 12;
  @SuppressWarnings("serial")
  private java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> data_;
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> getDataList() {
    return data_;
  }
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<? extends uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
      getDataOrBuilderList() {
    return data_;
  }
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public int getDataCount() {
    return data_.size();
  }
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.DataComplexType getData(int index) {
    return data_.get(index);
  }
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder getDataOrBuilder(
      int index) {
    return data_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (action_ != uk.gov.gchq.event_logging.v4.AuthenticateActionSimpleType.AUTHENTICATE_ACTION_SIMPLE_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(1, action_);
    }
    if (logonType_ != uk.gov.gchq.event_logging.v4.AuthenticateLogonTypeSimpleType.AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(2, logonType_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(3, getUser());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(4, getDevice());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      output.writeMessage(5, getGroup());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      output.writeMessage(11, getOutcome());
    }
    for (int i = 0; i < data_.size(); i++) {
      output.writeMessage(12, data_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (action_ != uk.gov.gchq.event_logging.v4.AuthenticateActionSimpleType.AUTHENTICATE_ACTION_SIMPLE_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, action_);
    }
    if (logonType_ != uk.gov.gchq.event_logging.v4.AuthenticateLogonTypeSimpleType.AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(2, logonType_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, getUser());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, getDevice());
    }
    if (((bitField0_ & 0x00000004) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getGroup());
    }
    if (((bitField0_ & 0x00000008) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, getOutcome());
    }
    for (int i = 0; i < data_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, data_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof uk.gov.gchq.event_logging.v4.AuthenticateComplexType)) {
      return super.equals(obj);
    }
    uk.gov.gchq.event_logging.v4.AuthenticateComplexType other = (uk.gov.gchq.event_logging.v4.AuthenticateComplexType) obj;

    if (action_ != other.action_) return false;
    if (logonType_ != other.logonType_) return false;
    if (hasUser() != other.hasUser()) return false;
    if (hasUser()) {
      if (!getUser()
          .equals(other.getUser())) return false;
    }
    if (hasDevice() != other.hasDevice()) return false;
    if (hasDevice()) {
      if (!getDevice()
          .equals(other.getDevice())) return false;
    }
    if (hasGroup() != other.hasGroup()) return false;
    if (hasGroup()) {
      if (!getGroup()
          .equals(other.getGroup())) return false;
    }
    if (hasOutcome() != other.hasOutcome()) return false;
    if (hasOutcome()) {
      if (!getOutcome()
          .equals(other.getOutcome())) return false;
    }
    if (!getDataList()
        .equals(other.getDataList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + ACTION_FIELD_NUMBER;
    hash = (53 * hash) + action_;
    hash = (37 * hash) + LOGON_TYPE_FIELD_NUMBER;
    hash = (53 * hash) + logonType_;
    if (hasUser()) {
      hash = (37 * hash) + USER_FIELD_NUMBER;
      hash = (53 * hash) + getUser().hashCode();
    }
    if (hasDevice()) {
      hash = (37 * hash) + DEVICE_FIELD_NUMBER;
      hash = (53 * hash) + getDevice().hashCode();
    }
    if (hasGroup()) {
      hash = (37 * hash) + GROUP_FIELD_NUMBER;
      hash = (53 * hash) + getGroup().hashCode();
    }
    if (hasOutcome()) {
      hash = (37 * hash) + OUTCOME_FIELD_NUMBER;
      hash = (53 * hash) + getOutcome().hashCode();
    }
    if (getDataCount() > 0) {
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getDataList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(uk.gov.gchq.event_logging.v4.AuthenticateComplexType prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * Used to record authentication events such as logon and logoff. All authentication events that originate from a client device should record details of the client device in the event source.
   * </pre>
   *
   * Protobuf type {@code event_logging.v4.AuthenticateComplexType}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:event_logging.v4.AuthenticateComplexType)
      uk.gov.gchq.event_logging.v4.AuthenticateComplexTypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return uk.gov.gchq.event_logging.v4.AuthenticateComplexTypeProto.internal_static_event_logging_v4_AuthenticateComplexType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return uk.gov.gchq.event_logging.v4.AuthenticateComplexTypeProto.internal_static_event_logging_v4_AuthenticateComplexType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              uk.gov.gchq.event_logging.v4.AuthenticateComplexType.class, uk.gov.gchq.event_logging.v4.AuthenticateComplexType.Builder.class);
    }

    // Construct using uk.gov.gchq.event_logging.v4.AuthenticateComplexType.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getUserFieldBuilder();
        getDeviceFieldBuilder();
        getGroupFieldBuilder();
        getOutcomeFieldBuilder();
        getDataFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      action_ = 0;
      logonType_ = 0;
      user_ = null;
      if (userBuilder_ != null) {
        userBuilder_.dispose();
        userBuilder_ = null;
      }
      device_ = null;
      if (deviceBuilder_ != null) {
        deviceBuilder_.dispose();
        deviceBuilder_ = null;
      }
      group_ = null;
      if (groupBuilder_ != null) {
        groupBuilder_.dispose();
        groupBuilder_ = null;
      }
      outcome_ = null;
      if (outcomeBuilder_ != null) {
        outcomeBuilder_.dispose();
        outcomeBuilder_ = null;
      }
      if (dataBuilder_ == null) {
        data_ = java.util.Collections.emptyList();
      } else {
        data_ = null;
        dataBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000040);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return uk.gov.gchq.event_logging.v4.AuthenticateComplexTypeProto.internal_static_event_logging_v4_AuthenticateComplexType_descriptor;
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.AuthenticateComplexType getDefaultInstanceForType() {
      return uk.gov.gchq.event_logging.v4.AuthenticateComplexType.getDefaultInstance();
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.AuthenticateComplexType build() {
      uk.gov.gchq.event_logging.v4.AuthenticateComplexType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.AuthenticateComplexType buildPartial() {
      uk.gov.gchq.event_logging.v4.AuthenticateComplexType result = new uk.gov.gchq.event_logging.v4.AuthenticateComplexType(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(uk.gov.gchq.event_logging.v4.AuthenticateComplexType result) {
      if (dataBuilder_ == null) {
        if (((bitField0_ & 0x00000040) != 0)) {
          data_ = java.util.Collections.unmodifiableList(data_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.data_ = data_;
      } else {
        result.data_ = dataBuilder_.build();
      }
    }

    private void buildPartial0(uk.gov.gchq.event_logging.v4.AuthenticateComplexType result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.action_ = action_;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.logonType_ = logonType_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.user_ = userBuilder_ == null
            ? user_
            : userBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000008) != 0)) {
        result.device_ = deviceBuilder_ == null
            ? device_
            : deviceBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      if (((from_bitField0_ & 0x00000010) != 0)) {
        result.group_ = groupBuilder_ == null
            ? group_
            : groupBuilder_.build();
        to_bitField0_ |= 0x00000004;
      }
      if (((from_bitField0_ & 0x00000020) != 0)) {
        result.outcome_ = outcomeBuilder_ == null
            ? outcome_
            : outcomeBuilder_.build();
        to_bitField0_ |= 0x00000008;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof uk.gov.gchq.event_logging.v4.AuthenticateComplexType) {
        return mergeFrom((uk.gov.gchq.event_logging.v4.AuthenticateComplexType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(uk.gov.gchq.event_logging.v4.AuthenticateComplexType other) {
      if (other == uk.gov.gchq.event_logging.v4.AuthenticateComplexType.getDefaultInstance()) return this;
      if (other.action_ != 0) {
        setActionValue(other.getActionValue());
      }
      if (other.logonType_ != 0) {
        setLogonTypeValue(other.getLogonTypeValue());
      }
      if (other.hasUser()) {
        mergeUser(other.getUser());
      }
      if (other.hasDevice()) {
        mergeDevice(other.getDevice());
      }
      if (other.hasGroup()) {
        mergeGroup(other.getGroup());
      }
      if (other.hasOutcome()) {
        mergeOutcome(other.getOutcome());
      }
      if (dataBuilder_ == null) {
        if (!other.data_.isEmpty()) {
          if (data_.isEmpty()) {
            data_ = other.data_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureDataIsMutable();
            data_.addAll(other.data_);
          }
          onChanged();
        }
      } else {
        if (!other.data_.isEmpty()) {
          if (dataBuilder_.isEmpty()) {
            dataBuilder_.dispose();
            dataBuilder_ = null;
            data_ = other.data_;
            bitField0_ = (bitField0_ & ~0x00000040);
            dataBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getDataFieldBuilder() : null;
          } else {
            dataBuilder_.addAllMessages(other.data_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              action_ = input.readEnum();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 16: {
              logonType_ = input.readEnum();
              bitField0_ |= 0x00000002;
              break;
            } // case 16
            case 26: {
              input.readMessage(
                  getUserFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000004;
              break;
            } // case 26
            case 34: {
              input.readMessage(
                  getDeviceFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000008;
              break;
            } // case 34
            case 42: {
              input.readMessage(
                  getGroupFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000010;
              break;
            } // case 42
            case 90: {
              input.readMessage(
                  getOutcomeFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000020;
              break;
            } // case 90
            case 98: {
              uk.gov.gchq.event_logging.v4.DataComplexType m =
                  input.readMessage(
                      uk.gov.gchq.event_logging.v4.DataComplexType.parser(),
                      extensionRegistry);
              if (dataBuilder_ == null) {
                ensureDataIsMutable();
                data_.add(m);
              } else {
                dataBuilder_.addMessage(m);
              }
              break;
            } // case 98
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int action_ = 0;
    /**
     * <pre>
     * The authentication action that was performed, e.g. Logon, Logoff.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateActionSimpleType action = 1 [json_name = "action", (.buf.validate.field) = { ... }</code>
     * @return The enum numeric value on the wire for action.
     */
    @java.lang.Override public int getActionValue() {
      return action_;
    }
    /**
     * <pre>
     * The authentication action that was performed, e.g. Logon, Logoff.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateActionSimpleType action = 1 [json_name = "action", (.buf.validate.field) = { ... }</code>
     * @param value The enum numeric value on the wire for action to set.
     * @return This builder for chaining.
     */
    public Builder setActionValue(int value) {
      action_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The authentication action that was performed, e.g. Logon, Logoff.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateActionSimpleType action = 1 [json_name = "action", (.buf.validate.field) = { ... }</code>
     * @return The action.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.AuthenticateActionSimpleType getAction() {
      uk.gov.gchq.event_logging.v4.AuthenticateActionSimpleType result = uk.gov.gchq.event_logging.v4.AuthenticateActionSimpleType.forNumber(action_);
      return result == null ? uk.gov.gchq.event_logging.v4.AuthenticateActionSimpleType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The authentication action that was performed, e.g. Logon, Logoff.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateActionSimpleType action = 1 [json_name = "action", (.buf.validate.field) = { ... }</code>
     * @param value The action to set.
     * @return This builder for chaining.
     */
    public Builder setAction(uk.gov.gchq.event_logging.v4.AuthenticateActionSimpleType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      action_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The authentication action that was performed, e.g. Logon, Logoff.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateActionSimpleType action = 1 [json_name = "action", (.buf.validate.field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearAction() {
      bitField0_ = (bitField0_ & ~0x00000001);
      action_ = 0;
      onChanged();
      return this;
    }

    private int logonType_ = 0;
    /**
     * <pre>
     * This indicates the type of logon. For example, Microsoft Windows has several logon types such as Interactive (logon to domain), RemoteInteractive (logon to remote machine), CachedInteractive (logon to local machine using cached domain information due to loss of network).
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateLogonTypeSimpleType logon_type = 2 [json_name = "logonType", (.buf.validate.field) = { ... }</code>
     * @return The enum numeric value on the wire for logonType.
     */
    @java.lang.Override public int getLogonTypeValue() {
      return logonType_;
    }
    /**
     * <pre>
     * This indicates the type of logon. For example, Microsoft Windows has several logon types such as Interactive (logon to domain), RemoteInteractive (logon to remote machine), CachedInteractive (logon to local machine using cached domain information due to loss of network).
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateLogonTypeSimpleType logon_type = 2 [json_name = "logonType", (.buf.validate.field) = { ... }</code>
     * @param value The enum numeric value on the wire for logonType to set.
     * @return This builder for chaining.
     */
    public Builder setLogonTypeValue(int value) {
      logonType_ = value;
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This indicates the type of logon. For example, Microsoft Windows has several logon types such as Interactive (logon to domain), RemoteInteractive (logon to remote machine), CachedInteractive (logon to local machine using cached domain information due to loss of network).
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateLogonTypeSimpleType logon_type = 2 [json_name = "logonType", (.buf.validate.field) = { ... }</code>
     * @return The logonType.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.AuthenticateLogonTypeSimpleType getLogonType() {
      uk.gov.gchq.event_logging.v4.AuthenticateLogonTypeSimpleType result = uk.gov.gchq.event_logging.v4.AuthenticateLogonTypeSimpleType.forNumber(logonType_);
      return result == null ? uk.gov.gchq.event_logging.v4.AuthenticateLogonTypeSimpleType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * This indicates the type of logon. For example, Microsoft Windows has several logon types such as Interactive (logon to domain), RemoteInteractive (logon to remote machine), CachedInteractive (logon to local machine using cached domain information due to loss of network).
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateLogonTypeSimpleType logon_type = 2 [json_name = "logonType", (.buf.validate.field) = { ... }</code>
     * @param value The logonType to set.
     * @return This builder for chaining.
     */
    public Builder setLogonType(uk.gov.gchq.event_logging.v4.AuthenticateLogonTypeSimpleType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000002;
      logonType_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This indicates the type of logon. For example, Microsoft Windows has several logon types such as Interactive (logon to domain), RemoteInteractive (logon to remote machine), CachedInteractive (logon to local machine using cached domain information due to loss of network).
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateLogonTypeSimpleType logon_type = 2 [json_name = "logonType", (.buf.validate.field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearLogonType() {
      bitField0_ = (bitField0_ & ~0x00000002);
      logonType_ = 0;
      onChanged();
      return this;
    }

    private uk.gov.gchq.event_logging.v4.UserComplexType user_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.UserComplexType, uk.gov.gchq.event_logging.v4.UserComplexType.Builder, uk.gov.gchq.event_logging.v4.UserComplexTypeOrBuilder> userBuilder_;
    /**
     * <pre>
     * The user who the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
     * @return Whether the user field is set.
     */
    public boolean hasUser() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * The user who the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
     * @return The user.
     */
    public uk.gov.gchq.event_logging.v4.UserComplexType getUser() {
      if (userBuilder_ == null) {
        return user_ == null ? uk.gov.gchq.event_logging.v4.UserComplexType.getDefaultInstance() : user_;
      } else {
        return userBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The user who the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
     */
    public Builder setUser(uk.gov.gchq.event_logging.v4.UserComplexType value) {
      if (userBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        user_ = value;
      } else {
        userBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The user who the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
     */
    public Builder setUser(
        uk.gov.gchq.event_logging.v4.UserComplexType.Builder builderForValue) {
      if (userBuilder_ == null) {
        user_ = builderForValue.build();
      } else {
        userBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000004;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The user who the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeUser(uk.gov.gchq.event_logging.v4.UserComplexType value) {
      if (userBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0) &&
          user_ != null &&
          user_ != uk.gov.gchq.event_logging.v4.UserComplexType.getDefaultInstance()) {
          getUserBuilder().mergeFrom(value);
        } else {
          user_ = value;
        }
      } else {
        userBuilder_.mergeFrom(value);
      }
      if (user_ != null) {
        bitField0_ |= 0x00000004;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The user who the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearUser() {
      bitField0_ = (bitField0_ & ~0x00000004);
      user_ = null;
      if (userBuilder_ != null) {
        userBuilder_.dispose();
        userBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The user who the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.UserComplexType.Builder getUserBuilder() {
      bitField0_ |= 0x00000004;
      onChanged();
      return getUserFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The user who the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.UserComplexTypeOrBuilder getUserOrBuilder() {
      if (userBuilder_ != null) {
        return userBuilder_.getMessageOrBuilder();
      } else {
        return user_ == null ?
            uk.gov.gchq.event_logging.v4.UserComplexType.getDefaultInstance() : user_;
      }
    }
    /**
     * <pre>
     * The user who the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.UserComplexType, uk.gov.gchq.event_logging.v4.UserComplexType.Builder, uk.gov.gchq.event_logging.v4.UserComplexTypeOrBuilder> 
        getUserFieldBuilder() {
      if (userBuilder_ == null) {
        userBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.UserComplexType, uk.gov.gchq.event_logging.v4.UserComplexType.Builder, uk.gov.gchq.event_logging.v4.UserComplexTypeOrBuilder>(
                getUser(),
                getParentForChildren(),
                isClean());
        user_ = null;
      }
      return userBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.DeviceComplexType device_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.DeviceComplexType, uk.gov.gchq.event_logging.v4.DeviceComplexType.Builder, uk.gov.gchq.event_logging.v4.DeviceComplexTypeOrBuilder> deviceBuilder_;
    /**
     * <pre>
     * Where a device authenticates with another device, this is the device that initiates the authentication action.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
     * @return Whether the device field is set.
     */
    public boolean hasDevice() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * Where a device authenticates with another device, this is the device that initiates the authentication action.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
     * @return The device.
     */
    public uk.gov.gchq.event_logging.v4.DeviceComplexType getDevice() {
      if (deviceBuilder_ == null) {
        return device_ == null ? uk.gov.gchq.event_logging.v4.DeviceComplexType.getDefaultInstance() : device_;
      } else {
        return deviceBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Where a device authenticates with another device, this is the device that initiates the authentication action.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
     */
    public Builder setDevice(uk.gov.gchq.event_logging.v4.DeviceComplexType value) {
      if (deviceBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        device_ = value;
      } else {
        deviceBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Where a device authenticates with another device, this is the device that initiates the authentication action.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
     */
    public Builder setDevice(
        uk.gov.gchq.event_logging.v4.DeviceComplexType.Builder builderForValue) {
      if (deviceBuilder_ == null) {
        device_ = builderForValue.build();
      } else {
        deviceBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000008;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Where a device authenticates with another device, this is the device that initiates the authentication action.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeDevice(uk.gov.gchq.event_logging.v4.DeviceComplexType value) {
      if (deviceBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0) &&
          device_ != null &&
          device_ != uk.gov.gchq.event_logging.v4.DeviceComplexType.getDefaultInstance()) {
          getDeviceBuilder().mergeFrom(value);
        } else {
          device_ = value;
        }
      } else {
        deviceBuilder_.mergeFrom(value);
      }
      if (device_ != null) {
        bitField0_ |= 0x00000008;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Where a device authenticates with another device, this is the device that initiates the authentication action.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearDevice() {
      bitField0_ = (bitField0_ & ~0x00000008);
      device_ = null;
      if (deviceBuilder_ != null) {
        deviceBuilder_.dispose();
        deviceBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Where a device authenticates with another device, this is the device that initiates the authentication action.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.DeviceComplexType.Builder getDeviceBuilder() {
      bitField0_ |= 0x00000008;
      onChanged();
      return getDeviceFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Where a device authenticates with another device, this is the device that initiates the authentication action.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.DeviceComplexTypeOrBuilder getDeviceOrBuilder() {
      if (deviceBuilder_ != null) {
        return deviceBuilder_.getMessageOrBuilder();
      } else {
        return device_ == null ?
            uk.gov.gchq.event_logging.v4.DeviceComplexType.getDefaultInstance() : device_;
      }
    }
    /**
     * <pre>
     * Where a device authenticates with another device, this is the device that initiates the authentication action.
     * </pre>
     *
     * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.DeviceComplexType, uk.gov.gchq.event_logging.v4.DeviceComplexType.Builder, uk.gov.gchq.event_logging.v4.DeviceComplexTypeOrBuilder> 
        getDeviceFieldBuilder() {
      if (deviceBuilder_ == null) {
        deviceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.DeviceComplexType, uk.gov.gchq.event_logging.v4.DeviceComplexType.Builder, uk.gov.gchq.event_logging.v4.DeviceComplexTypeOrBuilder>(
                getDevice(),
                getParentForChildren(),
                isClean());
        device_ = null;
      }
      return deviceBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.GroupComplexType group_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.GroupComplexType, uk.gov.gchq.event_logging.v4.GroupComplexType.Builder, uk.gov.gchq.event_logging.v4.GroupComplexTypeOrBuilder> groupBuilder_;
    /**
     * <pre>
     * The group the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
     * @return Whether the group field is set.
     */
    public boolean hasGroup() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * The group the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
     * @return The group.
     */
    public uk.gov.gchq.event_logging.v4.GroupComplexType getGroup() {
      if (groupBuilder_ == null) {
        return group_ == null ? uk.gov.gchq.event_logging.v4.GroupComplexType.getDefaultInstance() : group_;
      } else {
        return groupBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * The group the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
     */
    public Builder setGroup(uk.gov.gchq.event_logging.v4.GroupComplexType value) {
      if (groupBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        group_ = value;
      } else {
        groupBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The group the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
     */
    public Builder setGroup(
        uk.gov.gchq.event_logging.v4.GroupComplexType.Builder builderForValue) {
      if (groupBuilder_ == null) {
        group_ = builderForValue.build();
      } else {
        groupBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000010;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The group the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
     */
    public Builder mergeGroup(uk.gov.gchq.event_logging.v4.GroupComplexType value) {
      if (groupBuilder_ == null) {
        if (((bitField0_ & 0x00000010) != 0) &&
          group_ != null &&
          group_ != uk.gov.gchq.event_logging.v4.GroupComplexType.getDefaultInstance()) {
          getGroupBuilder().mergeFrom(value);
        } else {
          group_ = value;
        }
      } else {
        groupBuilder_.mergeFrom(value);
      }
      if (group_ != null) {
        bitField0_ |= 0x00000010;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * The group the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearGroup() {
      bitField0_ = (bitField0_ & ~0x00000010);
      group_ = null;
      if (groupBuilder_ != null) {
        groupBuilder_.dispose();
        groupBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The group the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.GroupComplexType.Builder getGroupBuilder() {
      bitField0_ |= 0x00000010;
      onChanged();
      return getGroupFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * The group the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.GroupComplexTypeOrBuilder getGroupOrBuilder() {
      if (groupBuilder_ != null) {
        return groupBuilder_.getMessageOrBuilder();
      } else {
        return group_ == null ?
            uk.gov.gchq.event_logging.v4.GroupComplexType.getDefaultInstance() : group_;
      }
    }
    /**
     * <pre>
     * The group the authentication action relates to.
     * </pre>
     *
     * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.GroupComplexType, uk.gov.gchq.event_logging.v4.GroupComplexType.Builder, uk.gov.gchq.event_logging.v4.GroupComplexTypeOrBuilder> 
        getGroupFieldBuilder() {
      if (groupBuilder_ == null) {
        groupBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.GroupComplexType, uk.gov.gchq.event_logging.v4.GroupComplexType.Builder, uk.gov.gchq.event_logging.v4.GroupComplexTypeOrBuilder>(
                getGroup(),
                getParentForChildren(),
                isClean());
        group_ = null;
      }
      return groupBuilder_;
    }

    private uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType outcome_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType, uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType.Builder, uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexTypeOrBuilder> outcomeBuilder_;
    /**
     * <pre>
     * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
     * @return Whether the outcome field is set.
     */
    public boolean hasOutcome() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
     * @return The outcome.
     */
    public uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType getOutcome() {
      if (outcomeBuilder_ == null) {
        return outcome_ == null ? uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType.getDefaultInstance() : outcome_;
      } else {
        return outcomeBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
     */
    public Builder setOutcome(uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType value) {
      if (outcomeBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        outcome_ = value;
      } else {
        outcomeBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
     */
    public Builder setOutcome(
        uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType.Builder builderForValue) {
      if (outcomeBuilder_ == null) {
        outcome_ = builderForValue.build();
      } else {
        outcomeBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000020;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
     */
    public Builder mergeOutcome(uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType value) {
      if (outcomeBuilder_ == null) {
        if (((bitField0_ & 0x00000020) != 0) &&
          outcome_ != null &&
          outcome_ != uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType.getDefaultInstance()) {
          getOutcomeBuilder().mergeFrom(value);
        } else {
          outcome_ = value;
        }
      } else {
        outcomeBuilder_.mergeFrom(value);
      }
      if (outcome_ != null) {
        bitField0_ |= 0x00000020;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
     */
    public Builder clearOutcome() {
      bitField0_ = (bitField0_ & ~0x00000020);
      outcome_ = null;
      if (outcomeBuilder_ != null) {
        outcomeBuilder_.dispose();
        outcomeBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
     */
    public uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType.Builder getOutcomeBuilder() {
      bitField0_ |= 0x00000020;
      onChanged();
      return getOutcomeFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
     */
    public uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexTypeOrBuilder getOutcomeOrBuilder() {
      if (outcomeBuilder_ != null) {
        return outcomeBuilder_.getMessageOrBuilder();
      } else {
        return outcome_ == null ?
            uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType.getDefaultInstance() : outcome_;
      }
    }
    /**
     * <pre>
     * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
     * </pre>
     *
     * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType, uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType.Builder, uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexTypeOrBuilder> 
        getOutcomeFieldBuilder() {
      if (outcomeBuilder_ == null) {
        outcomeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType, uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType.Builder, uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexTypeOrBuilder>(
                getOutcome(),
                getParentForChildren(),
                isClean());
        outcome_ = null;
      }
      return outcomeBuilder_;
    }

    private java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> data_ =
      java.util.Collections.emptyList();
    private void ensureDataIsMutable() {
      if (!((bitField0_ & 0x00000040) != 0)) {
        data_ = new java.util.ArrayList<uk.gov.gchq.event_logging.v4.DataComplexType>(data_);
        bitField0_ |= 0x00000040;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        uk.gov.gchq.event_logging.v4.DataComplexType, uk.gov.gchq.event_logging.v4.DataComplexType.Builder, uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> dataBuilder_;

    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> getDataList() {
      if (dataBuilder_ == null) {
        return java.util.Collections.unmodifiableList(data_);
      } else {
        return dataBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public int getDataCount() {
      if (dataBuilder_ == null) {
        return data_.size();
      } else {
        return dataBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.DataComplexType getData(int index) {
      if (dataBuilder_ == null) {
        return data_.get(index);
      } else {
        return dataBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public Builder setData(
        int index, uk.gov.gchq.event_logging.v4.DataComplexType value) {
      if (dataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDataIsMutable();
        data_.set(index, value);
        onChanged();
      } else {
        dataBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public Builder setData(
        int index, uk.gov.gchq.event_logging.v4.DataComplexType.Builder builderForValue) {
      if (dataBuilder_ == null) {
        ensureDataIsMutable();
        data_.set(index, builderForValue.build());
        onChanged();
      } else {
        dataBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public Builder addData(uk.gov.gchq.event_logging.v4.DataComplexType value) {
      if (dataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDataIsMutable();
        data_.add(value);
        onChanged();
      } else {
        dataBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public Builder addData(
        int index, uk.gov.gchq.event_logging.v4.DataComplexType value) {
      if (dataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureDataIsMutable();
        data_.add(index, value);
        onChanged();
      } else {
        dataBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public Builder addData(
        uk.gov.gchq.event_logging.v4.DataComplexType.Builder builderForValue) {
      if (dataBuilder_ == null) {
        ensureDataIsMutable();
        data_.add(builderForValue.build());
        onChanged();
      } else {
        dataBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public Builder addData(
        int index, uk.gov.gchq.event_logging.v4.DataComplexType.Builder builderForValue) {
      if (dataBuilder_ == null) {
        ensureDataIsMutable();
        data_.add(index, builderForValue.build());
        onChanged();
      } else {
        dataBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public Builder addAllData(
        java.lang.Iterable<? extends uk.gov.gchq.event_logging.v4.DataComplexType> values) {
      if (dataBuilder_ == null) {
        ensureDataIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, data_);
        onChanged();
      } else {
        dataBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearData() {
      if (dataBuilder_ == null) {
        data_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
      } else {
        dataBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public Builder removeData(int index) {
      if (dataBuilder_ == null) {
        ensureDataIsMutable();
        data_.remove(index);
        onChanged();
      } else {
        dataBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.DataComplexType.Builder getDataBuilder(
        int index) {
      return getDataFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder getDataOrBuilder(
        int index) {
      if (dataBuilder_ == null) {
        return data_.get(index);  } else {
        return dataBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public java.util.List<? extends uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
         getDataOrBuilderList() {
      if (dataBuilder_ != null) {
        return dataBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(data_);
      }
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.DataComplexType.Builder addDataBuilder() {
      return getDataFieldBuilder().addBuilder(
          uk.gov.gchq.event_logging.v4.DataComplexType.getDefaultInstance());
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.DataComplexType.Builder addDataBuilder(
        int index) {
      return getDataFieldBuilder().addBuilder(
          index, uk.gov.gchq.event_logging.v4.DataComplexType.getDefaultInstance());
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    public java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType.Builder> 
         getDataBuilderList() {
      return getDataFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        uk.gov.gchq.event_logging.v4.DataComplexType, uk.gov.gchq.event_logging.v4.DataComplexType.Builder, uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
        getDataFieldBuilder() {
      if (dataBuilder_ == null) {
        dataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            uk.gov.gchq.event_logging.v4.DataComplexType, uk.gov.gchq.event_logging.v4.DataComplexType.Builder, uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder>(
                data_,
                ((bitField0_ & 0x00000040) != 0),
                getParentForChildren(),
                isClean());
        data_ = null;
      }
      return dataBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:event_logging.v4.AuthenticateComplexType)
  }

  // @@protoc_insertion_point(class_scope:event_logging.v4.AuthenticateComplexType)
  private static final uk.gov.gchq.event_logging.v4.AuthenticateComplexType DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new uk.gov.gchq.event_logging.v4.AuthenticateComplexType();
  }

  public static uk.gov.gchq.event_logging.v4.AuthenticateComplexType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<AuthenticateComplexType>
      PARSER = new com.google.protobuf.AbstractParser<AuthenticateComplexType>() {
    @java.lang.Override
    public AuthenticateComplexType parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<AuthenticateComplexType> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<AuthenticateComplexType> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.AuthenticateComplexType getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

