// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/event_logging.proto

// Protobuf Java Version: 4.26.1
package uk.gov.gchq.event_logging.v4;

/**
 * <pre>
 * The root element that contains multiple Event elements.
 * </pre>
 *
 * Protobuf type {@code event_logging.v4.EventsType}
 */
public final class EventsType extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:event_logging.v4.EventsType)
    EventsTypeOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      EventsType.class.getName());
  }
  // Use EventsType.newBuilder() to construct.
  private EventsType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private EventsType() {
    version_ = 0;
    event_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return uk.gov.gchq.event_logging.v4.EventLoggingProto.internal_static_event_logging_v4_EventsType_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return uk.gov.gchq.event_logging.v4.EventLoggingProto.internal_static_event_logging_v4_EventsType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            uk.gov.gchq.event_logging.v4.EventsType.class, uk.gov.gchq.event_logging.v4.EventsType.Builder.class);
  }

  public interface EventTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:event_logging.v4.EventsType.EventType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
     * </pre>
     *
     * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
     */
    java.util.List<uk.gov.gchq.event_logging.v4.AnyContentComplexType> 
        getMetaList();
    /**
     * <pre>
     * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
     * </pre>
     *
     * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
     */
    uk.gov.gchq.event_logging.v4.AnyContentComplexType getMeta(int index);
    /**
     * <pre>
     * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
     * </pre>
     *
     * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
     */
    int getMetaCount();
    /**
     * <pre>
     * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
     * </pre>
     *
     * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
     */
    java.util.List<? extends uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder> 
        getMetaOrBuilderList();
    /**
     * <pre>
     * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
     * </pre>
     *
     * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
     */
    uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder getMetaOrBuilder(
        int index);

    /**
     * <pre>
     * The classification for the event.
     * </pre>
     *
     * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
     * @return Whether the classification field is set.
     */
    boolean hasClassification();
    /**
     * <pre>
     * The classification for the event.
     * </pre>
     *
     * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
     * @return The classification.
     */
    uk.gov.gchq.event_logging.v4.ClassificationComplexType getClassification();
    /**
     * <pre>
     * The classification for the event.
     * </pre>
     *
     * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
     */
    uk.gov.gchq.event_logging.v4.ClassificationComplexTypeOrBuilder getClassificationOrBuilder();

    /**
     * <pre>
     * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
     * @return Whether the sharingData field is set.
     */
    boolean hasSharingData();
    /**
     * <pre>
     * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
     * @return The sharingData.
     */
    uk.gov.gchq.event_logging.v4.AnyContentComplexType getSharingData();
    /**
     * <pre>
     * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
     */
    uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder getSharingDataOrBuilder();

    /**
     * <pre>
     * This element contains information about the time the event was created.
     * </pre>
     *
     * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
     * @return Whether the eventTime field is set.
     */
    boolean hasEventTime();
    /**
     * <pre>
     * This element contains information about the time the event was created.
     * </pre>
     *
     * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
     * @return The eventTime.
     */
    uk.gov.gchq.event_logging.v4.EventTimeComplexType getEventTime();
    /**
     * <pre>
     * This element contains information about the time the event was created.
     * </pre>
     *
     * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
     */
    uk.gov.gchq.event_logging.v4.EventTimeComplexTypeOrBuilder getEventTimeOrBuilder();

    /**
     * <pre>
     * This element details where the event came from, i.e. what generator created the event and on what device.
     * </pre>
     *
     * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
     * @return Whether the eventSource field is set.
     */
    boolean hasEventSource();
    /**
     * <pre>
     * This element details where the event came from, i.e. what generator created the event and on what device.
     * </pre>
     *
     * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
     * @return The eventSource.
     */
    uk.gov.gchq.event_logging.v4.EventSourceComplexType getEventSource();
    /**
     * <pre>
     * This element details where the event came from, i.e. what generator created the event and on what device.
     * </pre>
     *
     * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
     */
    uk.gov.gchq.event_logging.v4.EventSourceComplexTypeOrBuilder getEventSourceOrBuilder();

    /**
     * <pre>
     * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
     * @return Whether the eventDetail field is set.
     */
    boolean hasEventDetail();
    /**
     * <pre>
     * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
     * @return The eventDetail.
     */
    uk.gov.gchq.event_logging.v4.EventDetailComplexType getEventDetail();
    /**
     * <pre>
     * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
     */
    uk.gov.gchq.event_logging.v4.EventDetailComplexTypeOrBuilder getEventDetailOrBuilder();

    /**
     * <pre>
     * This element can be used to create relationships between different events, i.e. where one event is the child of another.
     * </pre>
     *
     * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
     * @return Whether the eventChain field is set.
     */
    boolean hasEventChain();
    /**
     * <pre>
     * This element can be used to create relationships between different events, i.e. where one event is the child of another.
     * </pre>
     *
     * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
     * @return The eventChain.
     */
    uk.gov.gchq.event_logging.v4.EventChainComplexType getEventChain();
    /**
     * <pre>
     * This element can be used to create relationships between different events, i.e. where one event is the child of another.
     * </pre>
     *
     * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
     */
    uk.gov.gchq.event_logging.v4.EventChainComplexTypeOrBuilder getEventChainOrBuilder();

    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> 
        getDataList();
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    uk.gov.gchq.event_logging.v4.DataComplexType getData(int index);
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    int getDataCount();
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    java.util.List<? extends uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
        getDataOrBuilderList();
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder getDataOrBuilder(
        int index);
  }
  /**
   * <pre>
   * A single event that has occurred and been recorded.
   * </pre>
   *
   * Protobuf type {@code event_logging.v4.EventsType.EventType}
   */
  public static final class EventType extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:event_logging.v4.EventsType.EventType)
      EventTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        EventType.class.getName());
    }
    // Use EventType.newBuilder() to construct.
    private EventType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private EventType() {
      meta_ = java.util.Collections.emptyList();
      data_ = java.util.Collections.emptyList();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return uk.gov.gchq.event_logging.v4.EventLoggingProto.internal_static_event_logging_v4_EventsType_EventType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return uk.gov.gchq.event_logging.v4.EventLoggingProto.internal_static_event_logging_v4_EventsType_EventType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              uk.gov.gchq.event_logging.v4.EventsType.EventType.class, uk.gov.gchq.event_logging.v4.EventsType.EventType.Builder.class);
    }

    private int bitField0_;
    public static final int META_FIELD_NUMBER = 1;
    @SuppressWarnings("serial")
    private java.util.List<uk.gov.gchq.event_logging.v4.AnyContentComplexType> meta_;
    /**
     * <pre>
     * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
     * </pre>
     *
     * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<uk.gov.gchq.event_logging.v4.AnyContentComplexType> getMetaList() {
      return meta_;
    }
    /**
     * <pre>
     * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
     * </pre>
     *
     * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder> 
        getMetaOrBuilderList() {
      return meta_;
    }
    /**
     * <pre>
     * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
     * </pre>
     *
     * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public int getMetaCount() {
      return meta_.size();
    }
    /**
     * <pre>
     * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
     * </pre>
     *
     * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.AnyContentComplexType getMeta(int index) {
      return meta_.get(index);
    }
    /**
     * <pre>
     * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
     * </pre>
     *
     * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder getMetaOrBuilder(
        int index) {
      return meta_.get(index);
    }

    public static final int CLASSIFICATION_FIELD_NUMBER = 2;
    private uk.gov.gchq.event_logging.v4.ClassificationComplexType classification_;
    /**
     * <pre>
     * The classification for the event.
     * </pre>
     *
     * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
     * @return Whether the classification field is set.
     */
    @java.lang.Override
    public boolean hasClassification() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * The classification for the event.
     * </pre>
     *
     * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
     * @return The classification.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.ClassificationComplexType getClassification() {
      return classification_ == null ? uk.gov.gchq.event_logging.v4.ClassificationComplexType.getDefaultInstance() : classification_;
    }
    /**
     * <pre>
     * The classification for the event.
     * </pre>
     *
     * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.ClassificationComplexTypeOrBuilder getClassificationOrBuilder() {
      return classification_ == null ? uk.gov.gchq.event_logging.v4.ClassificationComplexType.getDefaultInstance() : classification_;
    }

    public static final int SHARING_DATA_FIELD_NUMBER = 3;
    private uk.gov.gchq.event_logging.v4.AnyContentComplexType sharingData_;
    /**
     * <pre>
     * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
     * @return Whether the sharingData field is set.
     */
    @java.lang.Override
    public boolean hasSharingData() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
     * @return The sharingData.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.AnyContentComplexType getSharingData() {
      return sharingData_ == null ? uk.gov.gchq.event_logging.v4.AnyContentComplexType.getDefaultInstance() : sharingData_;
    }
    /**
     * <pre>
     * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder getSharingDataOrBuilder() {
      return sharingData_ == null ? uk.gov.gchq.event_logging.v4.AnyContentComplexType.getDefaultInstance() : sharingData_;
    }

    public static final int EVENT_TIME_FIELD_NUMBER = 4;
    private uk.gov.gchq.event_logging.v4.EventTimeComplexType eventTime_;
    /**
     * <pre>
     * This element contains information about the time the event was created.
     * </pre>
     *
     * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
     * @return Whether the eventTime field is set.
     */
    @java.lang.Override
    public boolean hasEventTime() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * This element contains information about the time the event was created.
     * </pre>
     *
     * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
     * @return The eventTime.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventTimeComplexType getEventTime() {
      return eventTime_ == null ? uk.gov.gchq.event_logging.v4.EventTimeComplexType.getDefaultInstance() : eventTime_;
    }
    /**
     * <pre>
     * This element contains information about the time the event was created.
     * </pre>
     *
     * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventTimeComplexTypeOrBuilder getEventTimeOrBuilder() {
      return eventTime_ == null ? uk.gov.gchq.event_logging.v4.EventTimeComplexType.getDefaultInstance() : eventTime_;
    }

    public static final int EVENT_SOURCE_FIELD_NUMBER = 5;
    private uk.gov.gchq.event_logging.v4.EventSourceComplexType eventSource_;
    /**
     * <pre>
     * This element details where the event came from, i.e. what generator created the event and on what device.
     * </pre>
     *
     * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
     * @return Whether the eventSource field is set.
     */
    @java.lang.Override
    public boolean hasEventSource() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * This element details where the event came from, i.e. what generator created the event and on what device.
     * </pre>
     *
     * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
     * @return The eventSource.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventSourceComplexType getEventSource() {
      return eventSource_ == null ? uk.gov.gchq.event_logging.v4.EventSourceComplexType.getDefaultInstance() : eventSource_;
    }
    /**
     * <pre>
     * This element details where the event came from, i.e. what generator created the event and on what device.
     * </pre>
     *
     * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventSourceComplexTypeOrBuilder getEventSourceOrBuilder() {
      return eventSource_ == null ? uk.gov.gchq.event_logging.v4.EventSourceComplexType.getDefaultInstance() : eventSource_;
    }

    public static final int EVENT_DETAIL_FIELD_NUMBER = 6;
    private uk.gov.gchq.event_logging.v4.EventDetailComplexType eventDetail_;
    /**
     * <pre>
     * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
     * @return Whether the eventDetail field is set.
     */
    @java.lang.Override
    public boolean hasEventDetail() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <pre>
     * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
     * @return The eventDetail.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventDetailComplexType getEventDetail() {
      return eventDetail_ == null ? uk.gov.gchq.event_logging.v4.EventDetailComplexType.getDefaultInstance() : eventDetail_;
    }
    /**
     * <pre>
     * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
     * </pre>
     *
     * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventDetailComplexTypeOrBuilder getEventDetailOrBuilder() {
      return eventDetail_ == null ? uk.gov.gchq.event_logging.v4.EventDetailComplexType.getDefaultInstance() : eventDetail_;
    }

    public static final int EVENT_CHAIN_FIELD_NUMBER = 7;
    private uk.gov.gchq.event_logging.v4.EventChainComplexType eventChain_;
    /**
     * <pre>
     * This element can be used to create relationships between different events, i.e. where one event is the child of another.
     * </pre>
     *
     * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
     * @return Whether the eventChain field is set.
     */
    @java.lang.Override
    public boolean hasEventChain() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <pre>
     * This element can be used to create relationships between different events, i.e. where one event is the child of another.
     * </pre>
     *
     * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
     * @return The eventChain.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventChainComplexType getEventChain() {
      return eventChain_ == null ? uk.gov.gchq.event_logging.v4.EventChainComplexType.getDefaultInstance() : eventChain_;
    }
    /**
     * <pre>
     * This element can be used to create relationships between different events, i.e. where one event is the child of another.
     * </pre>
     *
     * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventChainComplexTypeOrBuilder getEventChainOrBuilder() {
      return eventChain_ == null ? uk.gov.gchq.event_logging.v4.EventChainComplexType.getDefaultInstance() : eventChain_;
    }

    public static final int DATA_FIELD_NUMBER = 8;
    @SuppressWarnings("serial")
    private java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> data_;
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> getDataList() {
      return data_;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public java.util.List<? extends uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
        getDataOrBuilderList() {
      return data_;
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public int getDataCount() {
      return data_.size();
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.DataComplexType getData(int index) {
      return data_.get(index);
    }
    /**
     * <pre>
     * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
     * </pre>
     *
     * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder getDataOrBuilder(
        int index) {
      return data_.get(index);
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < meta_.size(); i++) {
        output.writeMessage(1, meta_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(2, getClassification());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(3, getSharingData());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(4, getEventTime());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(5, getEventSource());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(6, getEventDetail());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeMessage(7, getEventChain());
      }
      for (int i = 0; i < data_.size(); i++) {
        output.writeMessage(8, data_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < meta_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, meta_.get(i));
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getClassification());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getSharingData());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getEventTime());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getEventSource());
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getEventDetail());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getEventChain());
      }
      for (int i = 0; i < data_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, data_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof uk.gov.gchq.event_logging.v4.EventsType.EventType)) {
        return super.equals(obj);
      }
      uk.gov.gchq.event_logging.v4.EventsType.EventType other = (uk.gov.gchq.event_logging.v4.EventsType.EventType) obj;

      if (!getMetaList()
          .equals(other.getMetaList())) return false;
      if (hasClassification() != other.hasClassification()) return false;
      if (hasClassification()) {
        if (!getClassification()
            .equals(other.getClassification())) return false;
      }
      if (hasSharingData() != other.hasSharingData()) return false;
      if (hasSharingData()) {
        if (!getSharingData()
            .equals(other.getSharingData())) return false;
      }
      if (hasEventTime() != other.hasEventTime()) return false;
      if (hasEventTime()) {
        if (!getEventTime()
            .equals(other.getEventTime())) return false;
      }
      if (hasEventSource() != other.hasEventSource()) return false;
      if (hasEventSource()) {
        if (!getEventSource()
            .equals(other.getEventSource())) return false;
      }
      if (hasEventDetail() != other.hasEventDetail()) return false;
      if (hasEventDetail()) {
        if (!getEventDetail()
            .equals(other.getEventDetail())) return false;
      }
      if (hasEventChain() != other.hasEventChain()) return false;
      if (hasEventChain()) {
        if (!getEventChain()
            .equals(other.getEventChain())) return false;
      }
      if (!getDataList()
          .equals(other.getDataList())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getMetaCount() > 0) {
        hash = (37 * hash) + META_FIELD_NUMBER;
        hash = (53 * hash) + getMetaList().hashCode();
      }
      if (hasClassification()) {
        hash = (37 * hash) + CLASSIFICATION_FIELD_NUMBER;
        hash = (53 * hash) + getClassification().hashCode();
      }
      if (hasSharingData()) {
        hash = (37 * hash) + SHARING_DATA_FIELD_NUMBER;
        hash = (53 * hash) + getSharingData().hashCode();
      }
      if (hasEventTime()) {
        hash = (37 * hash) + EVENT_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getEventTime().hashCode();
      }
      if (hasEventSource()) {
        hash = (37 * hash) + EVENT_SOURCE_FIELD_NUMBER;
        hash = (53 * hash) + getEventSource().hashCode();
      }
      if (hasEventDetail()) {
        hash = (37 * hash) + EVENT_DETAIL_FIELD_NUMBER;
        hash = (53 * hash) + getEventDetail().hashCode();
      }
      if (hasEventChain()) {
        hash = (37 * hash) + EVENT_CHAIN_FIELD_NUMBER;
        hash = (53 * hash) + getEventChain().hashCode();
      }
      if (getDataCount() > 0) {
        hash = (37 * hash) + DATA_FIELD_NUMBER;
        hash = (53 * hash) + getDataList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static uk.gov.gchq.event_logging.v4.EventsType.EventType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static uk.gov.gchq.event_logging.v4.EventsType.EventType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static uk.gov.gchq.event_logging.v4.EventsType.EventType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static uk.gov.gchq.event_logging.v4.EventsType.EventType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static uk.gov.gchq.event_logging.v4.EventsType.EventType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static uk.gov.gchq.event_logging.v4.EventsType.EventType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static uk.gov.gchq.event_logging.v4.EventsType.EventType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static uk.gov.gchq.event_logging.v4.EventsType.EventType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static uk.gov.gchq.event_logging.v4.EventsType.EventType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static uk.gov.gchq.event_logging.v4.EventsType.EventType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static uk.gov.gchq.event_logging.v4.EventsType.EventType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static uk.gov.gchq.event_logging.v4.EventsType.EventType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(uk.gov.gchq.event_logging.v4.EventsType.EventType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * Protobuf type {@code event_logging.v4.EventsType.EventType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:event_logging.v4.EventsType.EventType)
        uk.gov.gchq.event_logging.v4.EventsType.EventTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return uk.gov.gchq.event_logging.v4.EventLoggingProto.internal_static_event_logging_v4_EventsType_EventType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return uk.gov.gchq.event_logging.v4.EventLoggingProto.internal_static_event_logging_v4_EventsType_EventType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                uk.gov.gchq.event_logging.v4.EventsType.EventType.class, uk.gov.gchq.event_logging.v4.EventsType.EventType.Builder.class);
      }

      // Construct using uk.gov.gchq.event_logging.v4.EventsType.EventType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getMetaFieldBuilder();
          getClassificationFieldBuilder();
          getSharingDataFieldBuilder();
          getEventTimeFieldBuilder();
          getEventSourceFieldBuilder();
          getEventDetailFieldBuilder();
          getEventChainFieldBuilder();
          getDataFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        if (metaBuilder_ == null) {
          meta_ = java.util.Collections.emptyList();
        } else {
          meta_ = null;
          metaBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        classification_ = null;
        if (classificationBuilder_ != null) {
          classificationBuilder_.dispose();
          classificationBuilder_ = null;
        }
        sharingData_ = null;
        if (sharingDataBuilder_ != null) {
          sharingDataBuilder_.dispose();
          sharingDataBuilder_ = null;
        }
        eventTime_ = null;
        if (eventTimeBuilder_ != null) {
          eventTimeBuilder_.dispose();
          eventTimeBuilder_ = null;
        }
        eventSource_ = null;
        if (eventSourceBuilder_ != null) {
          eventSourceBuilder_.dispose();
          eventSourceBuilder_ = null;
        }
        eventDetail_ = null;
        if (eventDetailBuilder_ != null) {
          eventDetailBuilder_.dispose();
          eventDetailBuilder_ = null;
        }
        eventChain_ = null;
        if (eventChainBuilder_ != null) {
          eventChainBuilder_.dispose();
          eventChainBuilder_ = null;
        }
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
        } else {
          data_ = null;
          dataBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000080);
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return uk.gov.gchq.event_logging.v4.EventLoggingProto.internal_static_event_logging_v4_EventsType_EventType_descriptor;
      }

      @java.lang.Override
      public uk.gov.gchq.event_logging.v4.EventsType.EventType getDefaultInstanceForType() {
        return uk.gov.gchq.event_logging.v4.EventsType.EventType.getDefaultInstance();
      }

      @java.lang.Override
      public uk.gov.gchq.event_logging.v4.EventsType.EventType build() {
        uk.gov.gchq.event_logging.v4.EventsType.EventType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public uk.gov.gchq.event_logging.v4.EventsType.EventType buildPartial() {
        uk.gov.gchq.event_logging.v4.EventsType.EventType result = new uk.gov.gchq.event_logging.v4.EventsType.EventType(this);
        buildPartialRepeatedFields(result);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartialRepeatedFields(uk.gov.gchq.event_logging.v4.EventsType.EventType result) {
        if (metaBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0)) {
            meta_ = java.util.Collections.unmodifiableList(meta_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.meta_ = meta_;
        } else {
          result.meta_ = metaBuilder_.build();
        }
        if (dataBuilder_ == null) {
          if (((bitField0_ & 0x00000080) != 0)) {
            data_ = java.util.Collections.unmodifiableList(data_);
            bitField0_ = (bitField0_ & ~0x00000080);
          }
          result.data_ = data_;
        } else {
          result.data_ = dataBuilder_.build();
        }
      }

      private void buildPartial0(uk.gov.gchq.event_logging.v4.EventsType.EventType result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.classification_ = classificationBuilder_ == null
              ? classification_
              : classificationBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.sharingData_ = sharingDataBuilder_ == null
              ? sharingData_
              : sharingDataBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.eventTime_ = eventTimeBuilder_ == null
              ? eventTime_
              : eventTimeBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.eventSource_ = eventSourceBuilder_ == null
              ? eventSource_
              : eventSourceBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.eventDetail_ = eventDetailBuilder_ == null
              ? eventDetail_
              : eventDetailBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.eventChain_ = eventChainBuilder_ == null
              ? eventChain_
              : eventChainBuilder_.build();
          to_bitField0_ |= 0x00000020;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof uk.gov.gchq.event_logging.v4.EventsType.EventType) {
          return mergeFrom((uk.gov.gchq.event_logging.v4.EventsType.EventType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(uk.gov.gchq.event_logging.v4.EventsType.EventType other) {
        if (other == uk.gov.gchq.event_logging.v4.EventsType.EventType.getDefaultInstance()) return this;
        if (metaBuilder_ == null) {
          if (!other.meta_.isEmpty()) {
            if (meta_.isEmpty()) {
              meta_ = other.meta_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureMetaIsMutable();
              meta_.addAll(other.meta_);
            }
            onChanged();
          }
        } else {
          if (!other.meta_.isEmpty()) {
            if (metaBuilder_.isEmpty()) {
              metaBuilder_.dispose();
              metaBuilder_ = null;
              meta_ = other.meta_;
              bitField0_ = (bitField0_ & ~0x00000001);
              metaBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getMetaFieldBuilder() : null;
            } else {
              metaBuilder_.addAllMessages(other.meta_);
            }
          }
        }
        if (other.hasClassification()) {
          mergeClassification(other.getClassification());
        }
        if (other.hasSharingData()) {
          mergeSharingData(other.getSharingData());
        }
        if (other.hasEventTime()) {
          mergeEventTime(other.getEventTime());
        }
        if (other.hasEventSource()) {
          mergeEventSource(other.getEventSource());
        }
        if (other.hasEventDetail()) {
          mergeEventDetail(other.getEventDetail());
        }
        if (other.hasEventChain()) {
          mergeEventChain(other.getEventChain());
        }
        if (dataBuilder_ == null) {
          if (!other.data_.isEmpty()) {
            if (data_.isEmpty()) {
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000080);
            } else {
              ensureDataIsMutable();
              data_.addAll(other.data_);
            }
            onChanged();
          }
        } else {
          if (!other.data_.isEmpty()) {
            if (dataBuilder_.isEmpty()) {
              dataBuilder_.dispose();
              dataBuilder_ = null;
              data_ = other.data_;
              bitField0_ = (bitField0_ & ~0x00000080);
              dataBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getDataFieldBuilder() : null;
            } else {
              dataBuilder_.addAllMessages(other.data_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                uk.gov.gchq.event_logging.v4.AnyContentComplexType m =
                    input.readMessage(
                        uk.gov.gchq.event_logging.v4.AnyContentComplexType.parser(),
                        extensionRegistry);
                if (metaBuilder_ == null) {
                  ensureMetaIsMutable();
                  meta_.add(m);
                } else {
                  metaBuilder_.addMessage(m);
                }
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getClassificationFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getSharingDataFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getEventTimeFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 42: {
                input.readMessage(
                    getEventSourceFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 42
              case 50: {
                input.readMessage(
                    getEventDetailFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 58: {
                input.readMessage(
                    getEventChainFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000040;
                break;
              } // case 58
              case 66: {
                uk.gov.gchq.event_logging.v4.DataComplexType m =
                    input.readMessage(
                        uk.gov.gchq.event_logging.v4.DataComplexType.parser(),
                        extensionRegistry);
                if (dataBuilder_ == null) {
                  ensureDataIsMutable();
                  data_.add(m);
                } else {
                  dataBuilder_.addMessage(m);
                }
                break;
              } // case 66
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private java.util.List<uk.gov.gchq.event_logging.v4.AnyContentComplexType> meta_ =
        java.util.Collections.emptyList();
      private void ensureMetaIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          meta_ = new java.util.ArrayList<uk.gov.gchq.event_logging.v4.AnyContentComplexType>(meta_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          uk.gov.gchq.event_logging.v4.AnyContentComplexType, uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder, uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder> metaBuilder_;

      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public java.util.List<uk.gov.gchq.event_logging.v4.AnyContentComplexType> getMetaList() {
        if (metaBuilder_ == null) {
          return java.util.Collections.unmodifiableList(meta_);
        } else {
          return metaBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public int getMetaCount() {
        if (metaBuilder_ == null) {
          return meta_.size();
        } else {
          return metaBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.AnyContentComplexType getMeta(int index) {
        if (metaBuilder_ == null) {
          return meta_.get(index);
        } else {
          return metaBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public Builder setMeta(
          int index, uk.gov.gchq.event_logging.v4.AnyContentComplexType value) {
        if (metaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaIsMutable();
          meta_.set(index, value);
          onChanged();
        } else {
          metaBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public Builder setMeta(
          int index, uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder builderForValue) {
        if (metaBuilder_ == null) {
          ensureMetaIsMutable();
          meta_.set(index, builderForValue.build());
          onChanged();
        } else {
          metaBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public Builder addMeta(uk.gov.gchq.event_logging.v4.AnyContentComplexType value) {
        if (metaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaIsMutable();
          meta_.add(value);
          onChanged();
        } else {
          metaBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public Builder addMeta(
          int index, uk.gov.gchq.event_logging.v4.AnyContentComplexType value) {
        if (metaBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMetaIsMutable();
          meta_.add(index, value);
          onChanged();
        } else {
          metaBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public Builder addMeta(
          uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder builderForValue) {
        if (metaBuilder_ == null) {
          ensureMetaIsMutable();
          meta_.add(builderForValue.build());
          onChanged();
        } else {
          metaBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public Builder addMeta(
          int index, uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder builderForValue) {
        if (metaBuilder_ == null) {
          ensureMetaIsMutable();
          meta_.add(index, builderForValue.build());
          onChanged();
        } else {
          metaBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public Builder addAllMeta(
          java.lang.Iterable<? extends uk.gov.gchq.event_logging.v4.AnyContentComplexType> values) {
        if (metaBuilder_ == null) {
          ensureMetaIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, meta_);
          onChanged();
        } else {
          metaBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public Builder clearMeta() {
        if (metaBuilder_ == null) {
          meta_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          metaBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public Builder removeMeta(int index) {
        if (metaBuilder_ == null) {
          ensureMetaIsMutable();
          meta_.remove(index);
          onChanged();
        } else {
          metaBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder getMetaBuilder(
          int index) {
        return getMetaFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder getMetaOrBuilder(
          int index) {
        if (metaBuilder_ == null) {
          return meta_.get(index);  } else {
          return metaBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public java.util.List<? extends uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder> 
           getMetaOrBuilderList() {
        if (metaBuilder_ != null) {
          return metaBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(meta_);
        }
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder addMetaBuilder() {
        return getMetaFieldBuilder().addBuilder(
            uk.gov.gchq.event_logging.v4.AnyContentComplexType.getDefaultInstance());
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder addMetaBuilder(
          int index) {
        return getMetaFieldBuilder().addBuilder(
            index, uk.gov.gchq.event_logging.v4.AnyContentComplexType.getDefaultInstance());
      }
      /**
       * <pre>
       * This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
       * </pre>
       *
       * <code>repeated .event_logging.v4.AnyContentComplexType meta = 1 [json_name = "meta", (.buf.validate.field) = { ... }</code>
       */
      public java.util.List<uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder> 
           getMetaBuilderList() {
        return getMetaFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          uk.gov.gchq.event_logging.v4.AnyContentComplexType, uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder, uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder> 
          getMetaFieldBuilder() {
        if (metaBuilder_ == null) {
          metaBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              uk.gov.gchq.event_logging.v4.AnyContentComplexType, uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder, uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder>(
                  meta_,
                  ((bitField0_ & 0x00000001) != 0),
                  getParentForChildren(),
                  isClean());
          meta_ = null;
        }
        return metaBuilder_;
      }

      private uk.gov.gchq.event_logging.v4.ClassificationComplexType classification_;
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.ClassificationComplexType, uk.gov.gchq.event_logging.v4.ClassificationComplexType.Builder, uk.gov.gchq.event_logging.v4.ClassificationComplexTypeOrBuilder> classificationBuilder_;
      /**
       * <pre>
       * The classification for the event.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
       * @return Whether the classification field is set.
       */
      public boolean hasClassification() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * The classification for the event.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
       * @return The classification.
       */
      public uk.gov.gchq.event_logging.v4.ClassificationComplexType getClassification() {
        if (classificationBuilder_ == null) {
          return classification_ == null ? uk.gov.gchq.event_logging.v4.ClassificationComplexType.getDefaultInstance() : classification_;
        } else {
          return classificationBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The classification for the event.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
       */
      public Builder setClassification(uk.gov.gchq.event_logging.v4.ClassificationComplexType value) {
        if (classificationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          classification_ = value;
        } else {
          classificationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The classification for the event.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
       */
      public Builder setClassification(
          uk.gov.gchq.event_logging.v4.ClassificationComplexType.Builder builderForValue) {
        if (classificationBuilder_ == null) {
          classification_ = builderForValue.build();
        } else {
          classificationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The classification for the event.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
       */
      public Builder mergeClassification(uk.gov.gchq.event_logging.v4.ClassificationComplexType value) {
        if (classificationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            classification_ != null &&
            classification_ != uk.gov.gchq.event_logging.v4.ClassificationComplexType.getDefaultInstance()) {
            getClassificationBuilder().mergeFrom(value);
          } else {
            classification_ = value;
          }
        } else {
          classificationBuilder_.mergeFrom(value);
        }
        if (classification_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The classification for the event.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
       */
      public Builder clearClassification() {
        bitField0_ = (bitField0_ & ~0x00000002);
        classification_ = null;
        if (classificationBuilder_ != null) {
          classificationBuilder_.dispose();
          classificationBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The classification for the event.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
       */
      public uk.gov.gchq.event_logging.v4.ClassificationComplexType.Builder getClassificationBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getClassificationFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The classification for the event.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
       */
      public uk.gov.gchq.event_logging.v4.ClassificationComplexTypeOrBuilder getClassificationOrBuilder() {
        if (classificationBuilder_ != null) {
          return classificationBuilder_.getMessageOrBuilder();
        } else {
          return classification_ == null ?
              uk.gov.gchq.event_logging.v4.ClassificationComplexType.getDefaultInstance() : classification_;
        }
      }
      /**
       * <pre>
       * The classification for the event.
       * </pre>
       *
       * <code>.event_logging.v4.ClassificationComplexType classification = 2 [json_name = "classification"];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.ClassificationComplexType, uk.gov.gchq.event_logging.v4.ClassificationComplexType.Builder, uk.gov.gchq.event_logging.v4.ClassificationComplexTypeOrBuilder> 
          getClassificationFieldBuilder() {
        if (classificationBuilder_ == null) {
          classificationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              uk.gov.gchq.event_logging.v4.ClassificationComplexType, uk.gov.gchq.event_logging.v4.ClassificationComplexType.Builder, uk.gov.gchq.event_logging.v4.ClassificationComplexTypeOrBuilder>(
                  getClassification(),
                  getParentForChildren(),
                  isClean());
          classification_ = null;
        }
        return classificationBuilder_;
      }

      private uk.gov.gchq.event_logging.v4.AnyContentComplexType sharingData_;
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.AnyContentComplexType, uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder, uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder> sharingDataBuilder_;
      /**
       * <pre>
       * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
       * </pre>
       *
       * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
       * @return Whether the sharingData field is set.
       */
      public boolean hasSharingData() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
       * </pre>
       *
       * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
       * @return The sharingData.
       */
      public uk.gov.gchq.event_logging.v4.AnyContentComplexType getSharingData() {
        if (sharingDataBuilder_ == null) {
          return sharingData_ == null ? uk.gov.gchq.event_logging.v4.AnyContentComplexType.getDefaultInstance() : sharingData_;
        } else {
          return sharingDataBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
       * </pre>
       *
       * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
       */
      public Builder setSharingData(uk.gov.gchq.event_logging.v4.AnyContentComplexType value) {
        if (sharingDataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          sharingData_ = value;
        } else {
          sharingDataBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
       * </pre>
       *
       * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
       */
      public Builder setSharingData(
          uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder builderForValue) {
        if (sharingDataBuilder_ == null) {
          sharingData_ = builderForValue.build();
        } else {
          sharingDataBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
       * </pre>
       *
       * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
       */
      public Builder mergeSharingData(uk.gov.gchq.event_logging.v4.AnyContentComplexType value) {
        if (sharingDataBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            sharingData_ != null &&
            sharingData_ != uk.gov.gchq.event_logging.v4.AnyContentComplexType.getDefaultInstance()) {
            getSharingDataBuilder().mergeFrom(value);
          } else {
            sharingData_ = value;
          }
        } else {
          sharingDataBuilder_.mergeFrom(value);
        }
        if (sharingData_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
       * </pre>
       *
       * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
       */
      public Builder clearSharingData() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sharingData_ = null;
        if (sharingDataBuilder_ != null) {
          sharingDataBuilder_.dispose();
          sharingDataBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
       * </pre>
       *
       * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
       */
      public uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder getSharingDataBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getSharingDataFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
       * </pre>
       *
       * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
       */
      public uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder getSharingDataOrBuilder() {
        if (sharingDataBuilder_ != null) {
          return sharingDataBuilder_.getMessageOrBuilder();
        } else {
          return sharingData_ == null ?
              uk.gov.gchq.event_logging.v4.AnyContentComplexType.getDefaultInstance() : sharingData_;
        }
      }
      /**
       * <pre>
       * This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
       * </pre>
       *
       * <code>.event_logging.v4.AnyContentComplexType sharing_data = 3 [json_name = "sharingData"];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.AnyContentComplexType, uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder, uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder> 
          getSharingDataFieldBuilder() {
        if (sharingDataBuilder_ == null) {
          sharingDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              uk.gov.gchq.event_logging.v4.AnyContentComplexType, uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder, uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder>(
                  getSharingData(),
                  getParentForChildren(),
                  isClean());
          sharingData_ = null;
        }
        return sharingDataBuilder_;
      }

      private uk.gov.gchq.event_logging.v4.EventTimeComplexType eventTime_;
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.EventTimeComplexType, uk.gov.gchq.event_logging.v4.EventTimeComplexType.Builder, uk.gov.gchq.event_logging.v4.EventTimeComplexTypeOrBuilder> eventTimeBuilder_;
      /**
       * <pre>
       * This element contains information about the time the event was created.
       * </pre>
       *
       * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
       * @return Whether the eventTime field is set.
       */
      public boolean hasEventTime() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * This element contains information about the time the event was created.
       * </pre>
       *
       * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
       * @return The eventTime.
       */
      public uk.gov.gchq.event_logging.v4.EventTimeComplexType getEventTime() {
        if (eventTimeBuilder_ == null) {
          return eventTime_ == null ? uk.gov.gchq.event_logging.v4.EventTimeComplexType.getDefaultInstance() : eventTime_;
        } else {
          return eventTimeBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This element contains information about the time the event was created.
       * </pre>
       *
       * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
       */
      public Builder setEventTime(uk.gov.gchq.event_logging.v4.EventTimeComplexType value) {
        if (eventTimeBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          eventTime_ = value;
        } else {
          eventTimeBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element contains information about the time the event was created.
       * </pre>
       *
       * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
       */
      public Builder setEventTime(
          uk.gov.gchq.event_logging.v4.EventTimeComplexType.Builder builderForValue) {
        if (eventTimeBuilder_ == null) {
          eventTime_ = builderForValue.build();
        } else {
          eventTimeBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element contains information about the time the event was created.
       * </pre>
       *
       * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
       */
      public Builder mergeEventTime(uk.gov.gchq.event_logging.v4.EventTimeComplexType value) {
        if (eventTimeBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            eventTime_ != null &&
            eventTime_ != uk.gov.gchq.event_logging.v4.EventTimeComplexType.getDefaultInstance()) {
            getEventTimeBuilder().mergeFrom(value);
          } else {
            eventTime_ = value;
          }
        } else {
          eventTimeBuilder_.mergeFrom(value);
        }
        if (eventTime_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * This element contains information about the time the event was created.
       * </pre>
       *
       * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
       */
      public Builder clearEventTime() {
        bitField0_ = (bitField0_ & ~0x00000008);
        eventTime_ = null;
        if (eventTimeBuilder_ != null) {
          eventTimeBuilder_.dispose();
          eventTimeBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element contains information about the time the event was created.
       * </pre>
       *
       * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.EventTimeComplexType.Builder getEventTimeBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getEventTimeFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This element contains information about the time the event was created.
       * </pre>
       *
       * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.EventTimeComplexTypeOrBuilder getEventTimeOrBuilder() {
        if (eventTimeBuilder_ != null) {
          return eventTimeBuilder_.getMessageOrBuilder();
        } else {
          return eventTime_ == null ?
              uk.gov.gchq.event_logging.v4.EventTimeComplexType.getDefaultInstance() : eventTime_;
        }
      }
      /**
       * <pre>
       * This element contains information about the time the event was created.
       * </pre>
       *
       * <code>.event_logging.v4.EventTimeComplexType event_time = 4 [json_name = "eventTime", (.buf.validate.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.EventTimeComplexType, uk.gov.gchq.event_logging.v4.EventTimeComplexType.Builder, uk.gov.gchq.event_logging.v4.EventTimeComplexTypeOrBuilder> 
          getEventTimeFieldBuilder() {
        if (eventTimeBuilder_ == null) {
          eventTimeBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              uk.gov.gchq.event_logging.v4.EventTimeComplexType, uk.gov.gchq.event_logging.v4.EventTimeComplexType.Builder, uk.gov.gchq.event_logging.v4.EventTimeComplexTypeOrBuilder>(
                  getEventTime(),
                  getParentForChildren(),
                  isClean());
          eventTime_ = null;
        }
        return eventTimeBuilder_;
      }

      private uk.gov.gchq.event_logging.v4.EventSourceComplexType eventSource_;
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.EventSourceComplexType, uk.gov.gchq.event_logging.v4.EventSourceComplexType.Builder, uk.gov.gchq.event_logging.v4.EventSourceComplexTypeOrBuilder> eventSourceBuilder_;
      /**
       * <pre>
       * This element details where the event came from, i.e. what generator created the event and on what device.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
       * @return Whether the eventSource field is set.
       */
      public boolean hasEventSource() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <pre>
       * This element details where the event came from, i.e. what generator created the event and on what device.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
       * @return The eventSource.
       */
      public uk.gov.gchq.event_logging.v4.EventSourceComplexType getEventSource() {
        if (eventSourceBuilder_ == null) {
          return eventSource_ == null ? uk.gov.gchq.event_logging.v4.EventSourceComplexType.getDefaultInstance() : eventSource_;
        } else {
          return eventSourceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This element details where the event came from, i.e. what generator created the event and on what device.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
       */
      public Builder setEventSource(uk.gov.gchq.event_logging.v4.EventSourceComplexType value) {
        if (eventSourceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          eventSource_ = value;
        } else {
          eventSourceBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element details where the event came from, i.e. what generator created the event and on what device.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
       */
      public Builder setEventSource(
          uk.gov.gchq.event_logging.v4.EventSourceComplexType.Builder builderForValue) {
        if (eventSourceBuilder_ == null) {
          eventSource_ = builderForValue.build();
        } else {
          eventSourceBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element details where the event came from, i.e. what generator created the event and on what device.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
       */
      public Builder mergeEventSource(uk.gov.gchq.event_logging.v4.EventSourceComplexType value) {
        if (eventSourceBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            eventSource_ != null &&
            eventSource_ != uk.gov.gchq.event_logging.v4.EventSourceComplexType.getDefaultInstance()) {
            getEventSourceBuilder().mergeFrom(value);
          } else {
            eventSource_ = value;
          }
        } else {
          eventSourceBuilder_.mergeFrom(value);
        }
        if (eventSource_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * This element details where the event came from, i.e. what generator created the event and on what device.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
       */
      public Builder clearEventSource() {
        bitField0_ = (bitField0_ & ~0x00000010);
        eventSource_ = null;
        if (eventSourceBuilder_ != null) {
          eventSourceBuilder_.dispose();
          eventSourceBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element details where the event came from, i.e. what generator created the event and on what device.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.EventSourceComplexType.Builder getEventSourceBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getEventSourceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This element details where the event came from, i.e. what generator created the event and on what device.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.EventSourceComplexTypeOrBuilder getEventSourceOrBuilder() {
        if (eventSourceBuilder_ != null) {
          return eventSourceBuilder_.getMessageOrBuilder();
        } else {
          return eventSource_ == null ?
              uk.gov.gchq.event_logging.v4.EventSourceComplexType.getDefaultInstance() : eventSource_;
        }
      }
      /**
       * <pre>
       * This element details where the event came from, i.e. what generator created the event and on what device.
       * </pre>
       *
       * <code>.event_logging.v4.EventSourceComplexType event_source = 5 [json_name = "eventSource", (.buf.validate.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.EventSourceComplexType, uk.gov.gchq.event_logging.v4.EventSourceComplexType.Builder, uk.gov.gchq.event_logging.v4.EventSourceComplexTypeOrBuilder> 
          getEventSourceFieldBuilder() {
        if (eventSourceBuilder_ == null) {
          eventSourceBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              uk.gov.gchq.event_logging.v4.EventSourceComplexType, uk.gov.gchq.event_logging.v4.EventSourceComplexType.Builder, uk.gov.gchq.event_logging.v4.EventSourceComplexTypeOrBuilder>(
                  getEventSource(),
                  getParentForChildren(),
                  isClean());
          eventSource_ = null;
        }
        return eventSourceBuilder_;
      }

      private uk.gov.gchq.event_logging.v4.EventDetailComplexType eventDetail_;
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.EventDetailComplexType, uk.gov.gchq.event_logging.v4.EventDetailComplexType.Builder, uk.gov.gchq.event_logging.v4.EventDetailComplexTypeOrBuilder> eventDetailBuilder_;
      /**
       * <pre>
       * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
       * </pre>
       *
       * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
       * @return Whether the eventDetail field is set.
       */
      public boolean hasEventDetail() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <pre>
       * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
       * </pre>
       *
       * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
       * @return The eventDetail.
       */
      public uk.gov.gchq.event_logging.v4.EventDetailComplexType getEventDetail() {
        if (eventDetailBuilder_ == null) {
          return eventDetail_ == null ? uk.gov.gchq.event_logging.v4.EventDetailComplexType.getDefaultInstance() : eventDetail_;
        } else {
          return eventDetailBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
       * </pre>
       *
       * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
       */
      public Builder setEventDetail(uk.gov.gchq.event_logging.v4.EventDetailComplexType value) {
        if (eventDetailBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          eventDetail_ = value;
        } else {
          eventDetailBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
       * </pre>
       *
       * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
       */
      public Builder setEventDetail(
          uk.gov.gchq.event_logging.v4.EventDetailComplexType.Builder builderForValue) {
        if (eventDetailBuilder_ == null) {
          eventDetail_ = builderForValue.build();
        } else {
          eventDetailBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
       * </pre>
       *
       * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
       */
      public Builder mergeEventDetail(uk.gov.gchq.event_logging.v4.EventDetailComplexType value) {
        if (eventDetailBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            eventDetail_ != null &&
            eventDetail_ != uk.gov.gchq.event_logging.v4.EventDetailComplexType.getDefaultInstance()) {
            getEventDetailBuilder().mergeFrom(value);
          } else {
            eventDetail_ = value;
          }
        } else {
          eventDetailBuilder_.mergeFrom(value);
        }
        if (eventDetail_ != null) {
          bitField0_ |= 0x00000020;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
       * </pre>
       *
       * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
       */
      public Builder clearEventDetail() {
        bitField0_ = (bitField0_ & ~0x00000020);
        eventDetail_ = null;
        if (eventDetailBuilder_ != null) {
          eventDetailBuilder_.dispose();
          eventDetailBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
       * </pre>
       *
       * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.EventDetailComplexType.Builder getEventDetailBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getEventDetailFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
       * </pre>
       *
       * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.EventDetailComplexTypeOrBuilder getEventDetailOrBuilder() {
        if (eventDetailBuilder_ != null) {
          return eventDetailBuilder_.getMessageOrBuilder();
        } else {
          return eventDetail_ == null ?
              uk.gov.gchq.event_logging.v4.EventDetailComplexType.getDefaultInstance() : eventDetail_;
        }
      }
      /**
       * <pre>
       * This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
       * </pre>
       *
       * <code>.event_logging.v4.EventDetailComplexType event_detail = 6 [json_name = "eventDetail", (.buf.validate.field) = { ... }</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.EventDetailComplexType, uk.gov.gchq.event_logging.v4.EventDetailComplexType.Builder, uk.gov.gchq.event_logging.v4.EventDetailComplexTypeOrBuilder> 
          getEventDetailFieldBuilder() {
        if (eventDetailBuilder_ == null) {
          eventDetailBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              uk.gov.gchq.event_logging.v4.EventDetailComplexType, uk.gov.gchq.event_logging.v4.EventDetailComplexType.Builder, uk.gov.gchq.event_logging.v4.EventDetailComplexTypeOrBuilder>(
                  getEventDetail(),
                  getParentForChildren(),
                  isClean());
          eventDetail_ = null;
        }
        return eventDetailBuilder_;
      }

      private uk.gov.gchq.event_logging.v4.EventChainComplexType eventChain_;
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.EventChainComplexType, uk.gov.gchq.event_logging.v4.EventChainComplexType.Builder, uk.gov.gchq.event_logging.v4.EventChainComplexTypeOrBuilder> eventChainBuilder_;
      /**
       * <pre>
       * This element can be used to create relationships between different events, i.e. where one event is the child of another.
       * </pre>
       *
       * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
       * @return Whether the eventChain field is set.
       */
      public boolean hasEventChain() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <pre>
       * This element can be used to create relationships between different events, i.e. where one event is the child of another.
       * </pre>
       *
       * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
       * @return The eventChain.
       */
      public uk.gov.gchq.event_logging.v4.EventChainComplexType getEventChain() {
        if (eventChainBuilder_ == null) {
          return eventChain_ == null ? uk.gov.gchq.event_logging.v4.EventChainComplexType.getDefaultInstance() : eventChain_;
        } else {
          return eventChainBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * This element can be used to create relationships between different events, i.e. where one event is the child of another.
       * </pre>
       *
       * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
       */
      public Builder setEventChain(uk.gov.gchq.event_logging.v4.EventChainComplexType value) {
        if (eventChainBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          eventChain_ = value;
        } else {
          eventChainBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element can be used to create relationships between different events, i.e. where one event is the child of another.
       * </pre>
       *
       * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
       */
      public Builder setEventChain(
          uk.gov.gchq.event_logging.v4.EventChainComplexType.Builder builderForValue) {
        if (eventChainBuilder_ == null) {
          eventChain_ = builderForValue.build();
        } else {
          eventChainBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element can be used to create relationships between different events, i.e. where one event is the child of another.
       * </pre>
       *
       * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
       */
      public Builder mergeEventChain(uk.gov.gchq.event_logging.v4.EventChainComplexType value) {
        if (eventChainBuilder_ == null) {
          if (((bitField0_ & 0x00000040) != 0) &&
            eventChain_ != null &&
            eventChain_ != uk.gov.gchq.event_logging.v4.EventChainComplexType.getDefaultInstance()) {
            getEventChainBuilder().mergeFrom(value);
          } else {
            eventChain_ = value;
          }
        } else {
          eventChainBuilder_.mergeFrom(value);
        }
        if (eventChain_ != null) {
          bitField0_ |= 0x00000040;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * This element can be used to create relationships between different events, i.e. where one event is the child of another.
       * </pre>
       *
       * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
       */
      public Builder clearEventChain() {
        bitField0_ = (bitField0_ & ~0x00000040);
        eventChain_ = null;
        if (eventChainBuilder_ != null) {
          eventChainBuilder_.dispose();
          eventChainBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This element can be used to create relationships between different events, i.e. where one event is the child of another.
       * </pre>
       *
       * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
       */
      public uk.gov.gchq.event_logging.v4.EventChainComplexType.Builder getEventChainBuilder() {
        bitField0_ |= 0x00000040;
        onChanged();
        return getEventChainFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * This element can be used to create relationships between different events, i.e. where one event is the child of another.
       * </pre>
       *
       * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
       */
      public uk.gov.gchq.event_logging.v4.EventChainComplexTypeOrBuilder getEventChainOrBuilder() {
        if (eventChainBuilder_ != null) {
          return eventChainBuilder_.getMessageOrBuilder();
        } else {
          return eventChain_ == null ?
              uk.gov.gchq.event_logging.v4.EventChainComplexType.getDefaultInstance() : eventChain_;
        }
      }
      /**
       * <pre>
       * This element can be used to create relationships between different events, i.e. where one event is the child of another.
       * </pre>
       *
       * <code>.event_logging.v4.EventChainComplexType event_chain = 7 [json_name = "eventChain"];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.EventChainComplexType, uk.gov.gchq.event_logging.v4.EventChainComplexType.Builder, uk.gov.gchq.event_logging.v4.EventChainComplexTypeOrBuilder> 
          getEventChainFieldBuilder() {
        if (eventChainBuilder_ == null) {
          eventChainBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              uk.gov.gchq.event_logging.v4.EventChainComplexType, uk.gov.gchq.event_logging.v4.EventChainComplexType.Builder, uk.gov.gchq.event_logging.v4.EventChainComplexTypeOrBuilder>(
                  getEventChain(),
                  getParentForChildren(),
                  isClean());
          eventChain_ = null;
        }
        return eventChainBuilder_;
      }

      private java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> data_ =
        java.util.Collections.emptyList();
      private void ensureDataIsMutable() {
        if (!((bitField0_ & 0x00000080) != 0)) {
          data_ = new java.util.ArrayList<uk.gov.gchq.event_logging.v4.DataComplexType>(data_);
          bitField0_ |= 0x00000080;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          uk.gov.gchq.event_logging.v4.DataComplexType, uk.gov.gchq.event_logging.v4.DataComplexType.Builder, uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> dataBuilder_;

      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> getDataList() {
        if (dataBuilder_ == null) {
          return java.util.Collections.unmodifiableList(data_);
        } else {
          return dataBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public int getDataCount() {
        if (dataBuilder_ == null) {
          return data_.size();
        } else {
          return dataBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.DataComplexType getData(int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);
        } else {
          return dataBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder setData(
          int index, uk.gov.gchq.event_logging.v4.DataComplexType value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.set(index, value);
          onChanged();
        } else {
          dataBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder setData(
          int index, uk.gov.gchq.event_logging.v4.DataComplexType.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.set(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder addData(uk.gov.gchq.event_logging.v4.DataComplexType value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(value);
          onChanged();
        } else {
          dataBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder addData(
          int index, uk.gov.gchq.event_logging.v4.DataComplexType value) {
        if (dataBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureDataIsMutable();
          data_.add(index, value);
          onChanged();
        } else {
          dataBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder addData(
          uk.gov.gchq.event_logging.v4.DataComplexType.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder addData(
          int index, uk.gov.gchq.event_logging.v4.DataComplexType.Builder builderForValue) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.add(index, builderForValue.build());
          onChanged();
        } else {
          dataBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder addAllData(
          java.lang.Iterable<? extends uk.gov.gchq.event_logging.v4.DataComplexType> values) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, data_);
          onChanged();
        } else {
          dataBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder clearData() {
        if (dataBuilder_ == null) {
          data_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000080);
          onChanged();
        } else {
          dataBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public Builder removeData(int index) {
        if (dataBuilder_ == null) {
          ensureDataIsMutable();
          data_.remove(index);
          onChanged();
        } else {
          dataBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.DataComplexType.Builder getDataBuilder(
          int index) {
        return getDataFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder getDataOrBuilder(
          int index) {
        if (dataBuilder_ == null) {
          return data_.get(index);  } else {
          return dataBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public java.util.List<? extends uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
           getDataOrBuilderList() {
        if (dataBuilder_ != null) {
          return dataBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(data_);
        }
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.DataComplexType.Builder addDataBuilder() {
        return getDataFieldBuilder().addBuilder(
            uk.gov.gchq.event_logging.v4.DataComplexType.getDefaultInstance());
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public uk.gov.gchq.event_logging.v4.DataComplexType.Builder addDataBuilder(
          int index) {
        return getDataFieldBuilder().addBuilder(
            index, uk.gov.gchq.event_logging.v4.DataComplexType.getDefaultInstance());
      }
      /**
       * <pre>
       * Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
       * </pre>
       *
       * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
       */
      public java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType.Builder> 
           getDataBuilderList() {
        return getDataFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          uk.gov.gchq.event_logging.v4.DataComplexType, uk.gov.gchq.event_logging.v4.DataComplexType.Builder, uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
          getDataFieldBuilder() {
        if (dataBuilder_ == null) {
          dataBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              uk.gov.gchq.event_logging.v4.DataComplexType, uk.gov.gchq.event_logging.v4.DataComplexType.Builder, uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder>(
                  data_,
                  ((bitField0_ & 0x00000080) != 0),
                  getParentForChildren(),
                  isClean());
          data_ = null;
        }
        return dataBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:event_logging.v4.EventsType.EventType)
    }

    // @@protoc_insertion_point(class_scope:event_logging.v4.EventsType.EventType)
    private static final uk.gov.gchq.event_logging.v4.EventsType.EventType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new uk.gov.gchq.event_logging.v4.EventsType.EventType();
    }

    public static uk.gov.gchq.event_logging.v4.EventsType.EventType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<EventType>
        PARSER = new com.google.protobuf.AbstractParser<EventType>() {
      @java.lang.Override
      public EventType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<EventType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<EventType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventsType.EventType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private int bitField0_;
  public static final int VERSION_FIELD_NUMBER = 1;
  private int version_ = 0;
  /**
   * <pre>
   * The version of the schema that this document conforms to.
   * </pre>
   *
   * <code>.event_logging.v4.VersionSimpleType version = 1 [json_name = "version", (.buf.validate.field) = { ... }</code>
   * @return The enum numeric value on the wire for version.
   */
  @java.lang.Override public int getVersionValue() {
    return version_;
  }
  /**
   * <pre>
   * The version of the schema that this document conforms to.
   * </pre>
   *
   * <code>.event_logging.v4.VersionSimpleType version = 1 [json_name = "version", (.buf.validate.field) = { ... }</code>
   * @return The version.
   */
  @java.lang.Override public uk.gov.gchq.event_logging.v4.VersionSimpleType getVersion() {
    uk.gov.gchq.event_logging.v4.VersionSimpleType result = uk.gov.gchq.event_logging.v4.VersionSimpleType.forNumber(version_);
    return result == null ? uk.gov.gchq.event_logging.v4.VersionSimpleType.UNRECOGNIZED : result;
  }

  public static final int SHARING_DATA_FIELD_NUMBER = 2;
  private uk.gov.gchq.event_logging.v4.AnyContentComplexType sharingData_;
  /**
   * <pre>
   * This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
   * </pre>
   *
   * <code>.event_logging.v4.AnyContentComplexType sharing_data = 2 [json_name = "sharingData"];</code>
   * @return Whether the sharingData field is set.
   */
  @java.lang.Override
  public boolean hasSharingData() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <pre>
   * This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
   * </pre>
   *
   * <code>.event_logging.v4.AnyContentComplexType sharing_data = 2 [json_name = "sharingData"];</code>
   * @return The sharingData.
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.AnyContentComplexType getSharingData() {
    return sharingData_ == null ? uk.gov.gchq.event_logging.v4.AnyContentComplexType.getDefaultInstance() : sharingData_;
  }
  /**
   * <pre>
   * This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
   * </pre>
   *
   * <code>.event_logging.v4.AnyContentComplexType sharing_data = 2 [json_name = "sharingData"];</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder getSharingDataOrBuilder() {
    return sharingData_ == null ? uk.gov.gchq.event_logging.v4.AnyContentComplexType.getDefaultInstance() : sharingData_;
  }

  public static final int EVENT_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<uk.gov.gchq.event_logging.v4.EventsType.EventType> event_;
  /**
   * <pre>
   * A single event that has occurred and been recorded.
   * </pre>
   *
   * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<uk.gov.gchq.event_logging.v4.EventsType.EventType> getEventList() {
    return event_;
  }
  /**
   * <pre>
   * A single event that has occurred and been recorded.
   * </pre>
   *
   * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<? extends uk.gov.gchq.event_logging.v4.EventsType.EventTypeOrBuilder> 
      getEventOrBuilderList() {
    return event_;
  }
  /**
   * <pre>
   * A single event that has occurred and been recorded.
   * </pre>
   *
   * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public int getEventCount() {
    return event_.size();
  }
  /**
   * <pre>
   * A single event that has occurred and been recorded.
   * </pre>
   *
   * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.EventsType.EventType getEvent(int index) {
    return event_.get(index);
  }
  /**
   * <pre>
   * A single event that has occurred and been recorded.
   * </pre>
   *
   * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.EventsType.EventTypeOrBuilder getEventOrBuilder(
      int index) {
    return event_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (version_ != uk.gov.gchq.event_logging.v4.VersionSimpleType.VERSION_SIMPLE_TYPE_UNSPECIFIED.getNumber()) {
      output.writeEnum(1, version_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(2, getSharingData());
    }
    for (int i = 0; i < event_.size(); i++) {
      output.writeMessage(3, event_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (version_ != uk.gov.gchq.event_logging.v4.VersionSimpleType.VERSION_SIMPLE_TYPE_UNSPECIFIED.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(1, version_);
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getSharingData());
    }
    for (int i = 0; i < event_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, event_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof uk.gov.gchq.event_logging.v4.EventsType)) {
      return super.equals(obj);
    }
    uk.gov.gchq.event_logging.v4.EventsType other = (uk.gov.gchq.event_logging.v4.EventsType) obj;

    if (version_ != other.version_) return false;
    if (hasSharingData() != other.hasSharingData()) return false;
    if (hasSharingData()) {
      if (!getSharingData()
          .equals(other.getSharingData())) return false;
    }
    if (!getEventList()
        .equals(other.getEventList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    hash = (37 * hash) + VERSION_FIELD_NUMBER;
    hash = (53 * hash) + version_;
    if (hasSharingData()) {
      hash = (37 * hash) + SHARING_DATA_FIELD_NUMBER;
      hash = (53 * hash) + getSharingData().hashCode();
    }
    if (getEventCount() > 0) {
      hash = (37 * hash) + EVENT_FIELD_NUMBER;
      hash = (53 * hash) + getEventList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static uk.gov.gchq.event_logging.v4.EventsType parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static uk.gov.gchq.event_logging.v4.EventsType parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.EventsType parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static uk.gov.gchq.event_logging.v4.EventsType parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.EventsType parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static uk.gov.gchq.event_logging.v4.EventsType parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.EventsType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static uk.gov.gchq.event_logging.v4.EventsType parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static uk.gov.gchq.event_logging.v4.EventsType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static uk.gov.gchq.event_logging.v4.EventsType parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.EventsType parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static uk.gov.gchq.event_logging.v4.EventsType parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(uk.gov.gchq.event_logging.v4.EventsType prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The root element that contains multiple Event elements.
   * </pre>
   *
   * Protobuf type {@code event_logging.v4.EventsType}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:event_logging.v4.EventsType)
      uk.gov.gchq.event_logging.v4.EventsTypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return uk.gov.gchq.event_logging.v4.EventLoggingProto.internal_static_event_logging_v4_EventsType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return uk.gov.gchq.event_logging.v4.EventLoggingProto.internal_static_event_logging_v4_EventsType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              uk.gov.gchq.event_logging.v4.EventsType.class, uk.gov.gchq.event_logging.v4.EventsType.Builder.class);
    }

    // Construct using uk.gov.gchq.event_logging.v4.EventsType.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getSharingDataFieldBuilder();
        getEventFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      version_ = 0;
      sharingData_ = null;
      if (sharingDataBuilder_ != null) {
        sharingDataBuilder_.dispose();
        sharingDataBuilder_ = null;
      }
      if (eventBuilder_ == null) {
        event_ = java.util.Collections.emptyList();
      } else {
        event_ = null;
        eventBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return uk.gov.gchq.event_logging.v4.EventLoggingProto.internal_static_event_logging_v4_EventsType_descriptor;
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventsType getDefaultInstanceForType() {
      return uk.gov.gchq.event_logging.v4.EventsType.getDefaultInstance();
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventsType build() {
      uk.gov.gchq.event_logging.v4.EventsType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.EventsType buildPartial() {
      uk.gov.gchq.event_logging.v4.EventsType result = new uk.gov.gchq.event_logging.v4.EventsType(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(uk.gov.gchq.event_logging.v4.EventsType result) {
      if (eventBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          event_ = java.util.Collections.unmodifiableList(event_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.event_ = event_;
      } else {
        result.event_ = eventBuilder_.build();
      }
    }

    private void buildPartial0(uk.gov.gchq.event_logging.v4.EventsType result) {
      int from_bitField0_ = bitField0_;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.version_ = version_;
      }
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.sharingData_ = sharingDataBuilder_ == null
            ? sharingData_
            : sharingDataBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof uk.gov.gchq.event_logging.v4.EventsType) {
        return mergeFrom((uk.gov.gchq.event_logging.v4.EventsType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(uk.gov.gchq.event_logging.v4.EventsType other) {
      if (other == uk.gov.gchq.event_logging.v4.EventsType.getDefaultInstance()) return this;
      if (other.version_ != 0) {
        setVersionValue(other.getVersionValue());
      }
      if (other.hasSharingData()) {
        mergeSharingData(other.getSharingData());
      }
      if (eventBuilder_ == null) {
        if (!other.event_.isEmpty()) {
          if (event_.isEmpty()) {
            event_ = other.event_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureEventIsMutable();
            event_.addAll(other.event_);
          }
          onChanged();
        }
      } else {
        if (!other.event_.isEmpty()) {
          if (eventBuilder_.isEmpty()) {
            eventBuilder_.dispose();
            eventBuilder_ = null;
            event_ = other.event_;
            bitField0_ = (bitField0_ & ~0x00000004);
            eventBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getEventFieldBuilder() : null;
          } else {
            eventBuilder_.addAllMessages(other.event_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              version_ = input.readEnum();
              bitField0_ |= 0x00000001;
              break;
            } // case 8
            case 18: {
              input.readMessage(
                  getSharingDataFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              uk.gov.gchq.event_logging.v4.EventsType.EventType m =
                  input.readMessage(
                      uk.gov.gchq.event_logging.v4.EventsType.EventType.parser(),
                      extensionRegistry);
              if (eventBuilder_ == null) {
                ensureEventIsMutable();
                event_.add(m);
              } else {
                eventBuilder_.addMessage(m);
              }
              break;
            } // case 26
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private int version_ = 0;
    /**
     * <pre>
     * The version of the schema that this document conforms to.
     * </pre>
     *
     * <code>.event_logging.v4.VersionSimpleType version = 1 [json_name = "version", (.buf.validate.field) = { ... }</code>
     * @return The enum numeric value on the wire for version.
     */
    @java.lang.Override public int getVersionValue() {
      return version_;
    }
    /**
     * <pre>
     * The version of the schema that this document conforms to.
     * </pre>
     *
     * <code>.event_logging.v4.VersionSimpleType version = 1 [json_name = "version", (.buf.validate.field) = { ... }</code>
     * @param value The enum numeric value on the wire for version to set.
     * @return This builder for chaining.
     */
    public Builder setVersionValue(int value) {
      version_ = value;
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The version of the schema that this document conforms to.
     * </pre>
     *
     * <code>.event_logging.v4.VersionSimpleType version = 1 [json_name = "version", (.buf.validate.field) = { ... }</code>
     * @return The version.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.VersionSimpleType getVersion() {
      uk.gov.gchq.event_logging.v4.VersionSimpleType result = uk.gov.gchq.event_logging.v4.VersionSimpleType.forNumber(version_);
      return result == null ? uk.gov.gchq.event_logging.v4.VersionSimpleType.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The version of the schema that this document conforms to.
     * </pre>
     *
     * <code>.event_logging.v4.VersionSimpleType version = 1 [json_name = "version", (.buf.validate.field) = { ... }</code>
     * @param value The version to set.
     * @return This builder for chaining.
     */
    public Builder setVersion(uk.gov.gchq.event_logging.v4.VersionSimpleType value) {
      if (value == null) {
        throw new NullPointerException();
      }
      bitField0_ |= 0x00000001;
      version_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * The version of the schema that this document conforms to.
     * </pre>
     *
     * <code>.event_logging.v4.VersionSimpleType version = 1 [json_name = "version", (.buf.validate.field) = { ... }</code>
     * @return This builder for chaining.
     */
    public Builder clearVersion() {
      bitField0_ = (bitField0_ & ~0x00000001);
      version_ = 0;
      onChanged();
      return this;
    }

    private uk.gov.gchq.event_logging.v4.AnyContentComplexType sharingData_;
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.AnyContentComplexType, uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder, uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder> sharingDataBuilder_;
    /**
     * <pre>
     * This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 2 [json_name = "sharingData"];</code>
     * @return Whether the sharingData field is set.
     */
    public boolean hasSharingData() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 2 [json_name = "sharingData"];</code>
     * @return The sharingData.
     */
    public uk.gov.gchq.event_logging.v4.AnyContentComplexType getSharingData() {
      if (sharingDataBuilder_ == null) {
        return sharingData_ == null ? uk.gov.gchq.event_logging.v4.AnyContentComplexType.getDefaultInstance() : sharingData_;
      } else {
        return sharingDataBuilder_.getMessage();
      }
    }
    /**
     * <pre>
     * This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 2 [json_name = "sharingData"];</code>
     */
    public Builder setSharingData(uk.gov.gchq.event_logging.v4.AnyContentComplexType value) {
      if (sharingDataBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        sharingData_ = value;
      } else {
        sharingDataBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 2 [json_name = "sharingData"];</code>
     */
    public Builder setSharingData(
        uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder builderForValue) {
      if (sharingDataBuilder_ == null) {
        sharingData_ = builderForValue.build();
      } else {
        sharingDataBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 2 [json_name = "sharingData"];</code>
     */
    public Builder mergeSharingData(uk.gov.gchq.event_logging.v4.AnyContentComplexType value) {
      if (sharingDataBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          sharingData_ != null &&
          sharingData_ != uk.gov.gchq.event_logging.v4.AnyContentComplexType.getDefaultInstance()) {
          getSharingDataBuilder().mergeFrom(value);
        } else {
          sharingData_ = value;
        }
      } else {
        sharingDataBuilder_.mergeFrom(value);
      }
      if (sharingData_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     * <pre>
     * This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 2 [json_name = "sharingData"];</code>
     */
    public Builder clearSharingData() {
      bitField0_ = (bitField0_ & ~0x00000002);
      sharingData_ = null;
      if (sharingDataBuilder_ != null) {
        sharingDataBuilder_.dispose();
        sharingDataBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <pre>
     * This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 2 [json_name = "sharingData"];</code>
     */
    public uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder getSharingDataBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getSharingDataFieldBuilder().getBuilder();
    }
    /**
     * <pre>
     * This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 2 [json_name = "sharingData"];</code>
     */
    public uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder getSharingDataOrBuilder() {
      if (sharingDataBuilder_ != null) {
        return sharingDataBuilder_.getMessageOrBuilder();
      } else {
        return sharingData_ == null ?
            uk.gov.gchq.event_logging.v4.AnyContentComplexType.getDefaultInstance() : sharingData_;
      }
    }
    /**
     * <pre>
     * This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
     * </pre>
     *
     * <code>.event_logging.v4.AnyContentComplexType sharing_data = 2 [json_name = "sharingData"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        uk.gov.gchq.event_logging.v4.AnyContentComplexType, uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder, uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder> 
        getSharingDataFieldBuilder() {
      if (sharingDataBuilder_ == null) {
        sharingDataBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            uk.gov.gchq.event_logging.v4.AnyContentComplexType, uk.gov.gchq.event_logging.v4.AnyContentComplexType.Builder, uk.gov.gchq.event_logging.v4.AnyContentComplexTypeOrBuilder>(
                getSharingData(),
                getParentForChildren(),
                isClean());
        sharingData_ = null;
      }
      return sharingDataBuilder_;
    }

    private java.util.List<uk.gov.gchq.event_logging.v4.EventsType.EventType> event_ =
      java.util.Collections.emptyList();
    private void ensureEventIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        event_ = new java.util.ArrayList<uk.gov.gchq.event_logging.v4.EventsType.EventType>(event_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        uk.gov.gchq.event_logging.v4.EventsType.EventType, uk.gov.gchq.event_logging.v4.EventsType.EventType.Builder, uk.gov.gchq.event_logging.v4.EventsType.EventTypeOrBuilder> eventBuilder_;

    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public java.util.List<uk.gov.gchq.event_logging.v4.EventsType.EventType> getEventList() {
      if (eventBuilder_ == null) {
        return java.util.Collections.unmodifiableList(event_);
      } else {
        return eventBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public int getEventCount() {
      if (eventBuilder_ == null) {
        return event_.size();
      } else {
        return eventBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.EventsType.EventType getEvent(int index) {
      if (eventBuilder_ == null) {
        return event_.get(index);
      } else {
        return eventBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public Builder setEvent(
        int index, uk.gov.gchq.event_logging.v4.EventsType.EventType value) {
      if (eventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventIsMutable();
        event_.set(index, value);
        onChanged();
      } else {
        eventBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public Builder setEvent(
        int index, uk.gov.gchq.event_logging.v4.EventsType.EventType.Builder builderForValue) {
      if (eventBuilder_ == null) {
        ensureEventIsMutable();
        event_.set(index, builderForValue.build());
        onChanged();
      } else {
        eventBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public Builder addEvent(uk.gov.gchq.event_logging.v4.EventsType.EventType value) {
      if (eventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventIsMutable();
        event_.add(value);
        onChanged();
      } else {
        eventBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public Builder addEvent(
        int index, uk.gov.gchq.event_logging.v4.EventsType.EventType value) {
      if (eventBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureEventIsMutable();
        event_.add(index, value);
        onChanged();
      } else {
        eventBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public Builder addEvent(
        uk.gov.gchq.event_logging.v4.EventsType.EventType.Builder builderForValue) {
      if (eventBuilder_ == null) {
        ensureEventIsMutable();
        event_.add(builderForValue.build());
        onChanged();
      } else {
        eventBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public Builder addEvent(
        int index, uk.gov.gchq.event_logging.v4.EventsType.EventType.Builder builderForValue) {
      if (eventBuilder_ == null) {
        ensureEventIsMutable();
        event_.add(index, builderForValue.build());
        onChanged();
      } else {
        eventBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public Builder addAllEvent(
        java.lang.Iterable<? extends uk.gov.gchq.event_logging.v4.EventsType.EventType> values) {
      if (eventBuilder_ == null) {
        ensureEventIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, event_);
        onChanged();
      } else {
        eventBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearEvent() {
      if (eventBuilder_ == null) {
        event_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        eventBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public Builder removeEvent(int index) {
      if (eventBuilder_ == null) {
        ensureEventIsMutable();
        event_.remove(index);
        onChanged();
      } else {
        eventBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.EventsType.EventType.Builder getEventBuilder(
        int index) {
      return getEventFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.EventsType.EventTypeOrBuilder getEventOrBuilder(
        int index) {
      if (eventBuilder_ == null) {
        return event_.get(index);  } else {
        return eventBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public java.util.List<? extends uk.gov.gchq.event_logging.v4.EventsType.EventTypeOrBuilder> 
         getEventOrBuilderList() {
      if (eventBuilder_ != null) {
        return eventBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(event_);
      }
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.EventsType.EventType.Builder addEventBuilder() {
      return getEventFieldBuilder().addBuilder(
          uk.gov.gchq.event_logging.v4.EventsType.EventType.getDefaultInstance());
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.EventsType.EventType.Builder addEventBuilder(
        int index) {
      return getEventFieldBuilder().addBuilder(
          index, uk.gov.gchq.event_logging.v4.EventsType.EventType.getDefaultInstance());
    }
    /**
     * <pre>
     * A single event that has occurred and been recorded.
     * </pre>
     *
     * <code>repeated .event_logging.v4.EventsType.EventType event = 3 [json_name = "event", (.buf.validate.field) = { ... }</code>
     */
    public java.util.List<uk.gov.gchq.event_logging.v4.EventsType.EventType.Builder> 
         getEventBuilderList() {
      return getEventFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        uk.gov.gchq.event_logging.v4.EventsType.EventType, uk.gov.gchq.event_logging.v4.EventsType.EventType.Builder, uk.gov.gchq.event_logging.v4.EventsType.EventTypeOrBuilder> 
        getEventFieldBuilder() {
      if (eventBuilder_ == null) {
        eventBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            uk.gov.gchq.event_logging.v4.EventsType.EventType, uk.gov.gchq.event_logging.v4.EventsType.EventType.Builder, uk.gov.gchq.event_logging.v4.EventsType.EventTypeOrBuilder>(
                event_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        event_ = null;
      }
      return eventBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:event_logging.v4.EventsType)
  }

  // @@protoc_insertion_point(class_scope:event_logging.v4.EventsType)
  private static final uk.gov.gchq.event_logging.v4.EventsType DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new uk.gov.gchq.event_logging.v4.EventsType();
  }

  public static uk.gov.gchq.event_logging.v4.EventsType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<EventsType>
      PARSER = new com.google.protobuf.AbstractParser<EventsType>() {
    @java.lang.Override
    public EventsType parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<EventsType> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<EventsType> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.EventsType getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

