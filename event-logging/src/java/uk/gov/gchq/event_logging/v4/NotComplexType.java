// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/logic_complex_type.proto

// Protobuf Java Version: 4.26.1
package uk.gov.gchq.event_logging.v4;

/**
 * <pre>
 * The enclosed structure operators and terms are negated.
 * </pre>
 *
 * Protobuf type {@code event_logging.v4.NotComplexType}
 */
public final class NotComplexType extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:event_logging.v4.NotComplexType)
    NotComplexTypeOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 26,
      /* patch= */ 1,
      /* suffix= */ "",
      NotComplexType.class.getName());
  }
  // Use NotComplexType.newBuilder() to construct.
  private NotComplexType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private NotComplexType() {
    choiceWrapper_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return uk.gov.gchq.event_logging.v4.LogicComplexTypeProto.internal_static_event_logging_v4_NotComplexType_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return uk.gov.gchq.event_logging.v4.LogicComplexTypeProto.internal_static_event_logging_v4_NotComplexType_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            uk.gov.gchq.event_logging.v4.NotComplexType.class, uk.gov.gchq.event_logging.v4.NotComplexType.Builder.class);
  }

  public interface ChoiceWrapperNotComplexTypeOrBuilder extends
      // @@protoc_insertion_point(interface_extends:event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
     * </pre>
     *
     * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
     * @return Whether the term field is set.
     */
    boolean hasTerm();
    /**
     * <pre>
     * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
     * </pre>
     *
     * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
     * @return The term.
     */
    uk.gov.gchq.event_logging.v4.TermComplexType getTerm();
    /**
     * <pre>
     * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
     * </pre>
     *
     * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
     */
    uk.gov.gchq.event_logging.v4.TermComplexTypeOrBuilder getTermOrBuilder();

    /**
     * <pre>
     * All of the enclosed items are to be treated as being AND'd together.
     * </pre>
     *
     * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
     * @return Whether the and field is set.
     */
    boolean hasAnd();
    /**
     * <pre>
     * All of the enclosed items are to be treated as being AND'd together.
     * </pre>
     *
     * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
     * @return The and.
     */
    uk.gov.gchq.event_logging.v4.AndComplexType getAnd();
    /**
     * <pre>
     * All of the enclosed items are to be treated as being AND'd together.
     * </pre>
     *
     * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
     */
    uk.gov.gchq.event_logging.v4.AndComplexTypeOrBuilder getAndOrBuilder();

    /**
     * <pre>
     * All of the enclosed items are to be treated as being OR'd together.
     * </pre>
     *
     * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
     * @return Whether the or field is set.
     */
    boolean hasOr();
    /**
     * <pre>
     * All of the enclosed items are to be treated as being OR'd together.
     * </pre>
     *
     * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
     * @return The or.
     */
    uk.gov.gchq.event_logging.v4.OrComplexType getOr();
    /**
     * <pre>
     * All of the enclosed items are to be treated as being OR'd together.
     * </pre>
     *
     * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
     */
    uk.gov.gchq.event_logging.v4.OrComplexTypeOrBuilder getOrOrBuilder();

    /**
     * <pre>
     * The enclosed structure operators and terms are negated.
     * </pre>
     *
     * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
     * @return Whether the not field is set.
     */
    boolean hasNot();
    /**
     * <pre>
     * The enclosed structure operators and terms are negated.
     * </pre>
     *
     * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
     * @return The not.
     */
    uk.gov.gchq.event_logging.v4.NotComplexType getNot();
    /**
     * <pre>
     * The enclosed structure operators and terms are negated.
     * </pre>
     *
     * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
     */
    uk.gov.gchq.event_logging.v4.NotComplexTypeOrBuilder getNotOrBuilder();
  }
  /**
   * Protobuf type {@code event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType}
   */
  public static final class ChoiceWrapperNotComplexType extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType)
      ChoiceWrapperNotComplexTypeOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 26,
        /* patch= */ 1,
        /* suffix= */ "",
        ChoiceWrapperNotComplexType.class.getName());
    }
    // Use ChoiceWrapperNotComplexType.newBuilder() to construct.
    private ChoiceWrapperNotComplexType(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private ChoiceWrapperNotComplexType() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return uk.gov.gchq.event_logging.v4.LogicComplexTypeProto.internal_static_event_logging_v4_NotComplexType_ChoiceWrapperNotComplexType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return uk.gov.gchq.event_logging.v4.LogicComplexTypeProto.internal_static_event_logging_v4_NotComplexType_ChoiceWrapperNotComplexType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.class, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.Builder.class);
    }

    private int bitField0_;
    public static final int TERM_FIELD_NUMBER = 1;
    private uk.gov.gchq.event_logging.v4.TermComplexType term_;
    /**
     * <pre>
     * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
     * </pre>
     *
     * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
     * @return Whether the term field is set.
     */
    @java.lang.Override
    public boolean hasTerm() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
     * </pre>
     *
     * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
     * @return The term.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.TermComplexType getTerm() {
      return term_ == null ? uk.gov.gchq.event_logging.v4.TermComplexType.getDefaultInstance() : term_;
    }
    /**
     * <pre>
     * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
     * </pre>
     *
     * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.TermComplexTypeOrBuilder getTermOrBuilder() {
      return term_ == null ? uk.gov.gchq.event_logging.v4.TermComplexType.getDefaultInstance() : term_;
    }

    public static final int AND_FIELD_NUMBER = 2;
    private uk.gov.gchq.event_logging.v4.AndComplexType and_;
    /**
     * <pre>
     * All of the enclosed items are to be treated as being AND'd together.
     * </pre>
     *
     * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
     * @return Whether the and field is set.
     */
    @java.lang.Override
    public boolean hasAnd() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <pre>
     * All of the enclosed items are to be treated as being AND'd together.
     * </pre>
     *
     * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
     * @return The and.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.AndComplexType getAnd() {
      return and_ == null ? uk.gov.gchq.event_logging.v4.AndComplexType.getDefaultInstance() : and_;
    }
    /**
     * <pre>
     * All of the enclosed items are to be treated as being AND'd together.
     * </pre>
     *
     * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.AndComplexTypeOrBuilder getAndOrBuilder() {
      return and_ == null ? uk.gov.gchq.event_logging.v4.AndComplexType.getDefaultInstance() : and_;
    }

    public static final int OR_FIELD_NUMBER = 3;
    private uk.gov.gchq.event_logging.v4.OrComplexType or_;
    /**
     * <pre>
     * All of the enclosed items are to be treated as being OR'd together.
     * </pre>
     *
     * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
     * @return Whether the or field is set.
     */
    @java.lang.Override
    public boolean hasOr() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <pre>
     * All of the enclosed items are to be treated as being OR'd together.
     * </pre>
     *
     * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
     * @return The or.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.OrComplexType getOr() {
      return or_ == null ? uk.gov.gchq.event_logging.v4.OrComplexType.getDefaultInstance() : or_;
    }
    /**
     * <pre>
     * All of the enclosed items are to be treated as being OR'd together.
     * </pre>
     *
     * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.OrComplexTypeOrBuilder getOrOrBuilder() {
      return or_ == null ? uk.gov.gchq.event_logging.v4.OrComplexType.getDefaultInstance() : or_;
    }

    public static final int NOT_FIELD_NUMBER = 4;
    private uk.gov.gchq.event_logging.v4.NotComplexType not_;
    /**
     * <pre>
     * The enclosed structure operators and terms are negated.
     * </pre>
     *
     * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
     * @return Whether the not field is set.
     */
    @java.lang.Override
    public boolean hasNot() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <pre>
     * The enclosed structure operators and terms are negated.
     * </pre>
     *
     * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
     * @return The not.
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.NotComplexType getNot() {
      return not_ == null ? uk.gov.gchq.event_logging.v4.NotComplexType.getDefaultInstance() : not_;
    }
    /**
     * <pre>
     * The enclosed structure operators and terms are negated.
     * </pre>
     *
     * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
     */
    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.NotComplexTypeOrBuilder getNotOrBuilder() {
      return not_ == null ? uk.gov.gchq.event_logging.v4.NotComplexType.getDefaultInstance() : not_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getTerm());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeMessage(2, getAnd());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeMessage(3, getOr());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeMessage(4, getNot());
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getTerm());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getAnd());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getOr());
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getNot());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType)) {
        return super.equals(obj);
      }
      uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType other = (uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType) obj;

      if (hasTerm() != other.hasTerm()) return false;
      if (hasTerm()) {
        if (!getTerm()
            .equals(other.getTerm())) return false;
      }
      if (hasAnd() != other.hasAnd()) return false;
      if (hasAnd()) {
        if (!getAnd()
            .equals(other.getAnd())) return false;
      }
      if (hasOr() != other.hasOr()) return false;
      if (hasOr()) {
        if (!getOr()
            .equals(other.getOr())) return false;
      }
      if (hasNot() != other.hasNot()) return false;
      if (hasNot()) {
        if (!getNot()
            .equals(other.getNot())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasTerm()) {
        hash = (37 * hash) + TERM_FIELD_NUMBER;
        hash = (53 * hash) + getTerm().hashCode();
      }
      if (hasAnd()) {
        hash = (37 * hash) + AND_FIELD_NUMBER;
        hash = (53 * hash) + getAnd().hashCode();
      }
      if (hasOr()) {
        hash = (37 * hash) + OR_FIELD_NUMBER;
        hash = (53 * hash) + getOr().hashCode();
      }
      if (hasNot()) {
        hash = (37 * hash) + NOT_FIELD_NUMBER;
        hash = (53 * hash) + getNot().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType)
        uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexTypeOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return uk.gov.gchq.event_logging.v4.LogicComplexTypeProto.internal_static_event_logging_v4_NotComplexType_ChoiceWrapperNotComplexType_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return uk.gov.gchq.event_logging.v4.LogicComplexTypeProto.internal_static_event_logging_v4_NotComplexType_ChoiceWrapperNotComplexType_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.class, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.Builder.class);
      }

      // Construct using uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getTermFieldBuilder();
          getAndFieldBuilder();
          getOrFieldBuilder();
          getNotFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        term_ = null;
        if (termBuilder_ != null) {
          termBuilder_.dispose();
          termBuilder_ = null;
        }
        and_ = null;
        if (andBuilder_ != null) {
          andBuilder_.dispose();
          andBuilder_ = null;
        }
        or_ = null;
        if (orBuilder_ != null) {
          orBuilder_.dispose();
          orBuilder_ = null;
        }
        not_ = null;
        if (notBuilder_ != null) {
          notBuilder_.dispose();
          notBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return uk.gov.gchq.event_logging.v4.LogicComplexTypeProto.internal_static_event_logging_v4_NotComplexType_ChoiceWrapperNotComplexType_descriptor;
      }

      @java.lang.Override
      public uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType getDefaultInstanceForType() {
        return uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.getDefaultInstance();
      }

      @java.lang.Override
      public uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType build() {
        uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType buildPartial() {
        uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType result = new uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.term_ = termBuilder_ == null
              ? term_
              : termBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.and_ = andBuilder_ == null
              ? and_
              : andBuilder_.build();
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.or_ = orBuilder_ == null
              ? or_
              : orBuilder_.build();
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.not_ = notBuilder_ == null
              ? not_
              : notBuilder_.build();
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType) {
          return mergeFrom((uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType other) {
        if (other == uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.getDefaultInstance()) return this;
        if (other.hasTerm()) {
          mergeTerm(other.getTerm());
        }
        if (other.hasAnd()) {
          mergeAnd(other.getAnd());
        }
        if (other.hasOr()) {
          mergeOr(other.getOr());
        }
        if (other.hasNot()) {
          mergeNot(other.getNot());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getTermFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 18: {
                input.readMessage(
                    getAndFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000002;
                break;
              } // case 18
              case 26: {
                input.readMessage(
                    getOrFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000004;
                break;
              } // case 26
              case 34: {
                input.readMessage(
                    getNotFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private uk.gov.gchq.event_logging.v4.TermComplexType term_;
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.TermComplexType, uk.gov.gchq.event_logging.v4.TermComplexType.Builder, uk.gov.gchq.event_logging.v4.TermComplexTypeOrBuilder> termBuilder_;
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
       * @return Whether the term field is set.
       */
      public boolean hasTerm() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
       * @return The term.
       */
      public uk.gov.gchq.event_logging.v4.TermComplexType getTerm() {
        if (termBuilder_ == null) {
          return term_ == null ? uk.gov.gchq.event_logging.v4.TermComplexType.getDefaultInstance() : term_;
        } else {
          return termBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
       */
      public Builder setTerm(uk.gov.gchq.event_logging.v4.TermComplexType value) {
        if (termBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          term_ = value;
        } else {
          termBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
       */
      public Builder setTerm(
          uk.gov.gchq.event_logging.v4.TermComplexType.Builder builderForValue) {
        if (termBuilder_ == null) {
          term_ = builderForValue.build();
        } else {
          termBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
       */
      public Builder mergeTerm(uk.gov.gchq.event_logging.v4.TermComplexType value) {
        if (termBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            term_ != null &&
            term_ != uk.gov.gchq.event_logging.v4.TermComplexType.getDefaultInstance()) {
            getTermBuilder().mergeFrom(value);
          } else {
            term_ = value;
          }
        } else {
          termBuilder_.mergeFrom(value);
        }
        if (term_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
       */
      public Builder clearTerm() {
        bitField0_ = (bitField0_ & ~0x00000001);
        term_ = null;
        if (termBuilder_ != null) {
          termBuilder_.dispose();
          termBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
       */
      public uk.gov.gchq.event_logging.v4.TermComplexType.Builder getTermBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTermFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
       */
      public uk.gov.gchq.event_logging.v4.TermComplexTypeOrBuilder getTermOrBuilder() {
        if (termBuilder_ != null) {
          return termBuilder_.getMessageOrBuilder();
        } else {
          return term_ == null ?
              uk.gov.gchq.event_logging.v4.TermComplexType.getDefaultInstance() : term_;
        }
      }
      /**
       * <pre>
       * Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
       * </pre>
       *
       * <code>.event_logging.v4.TermComplexType term = 1 [json_name = "term"];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.TermComplexType, uk.gov.gchq.event_logging.v4.TermComplexType.Builder, uk.gov.gchq.event_logging.v4.TermComplexTypeOrBuilder> 
          getTermFieldBuilder() {
        if (termBuilder_ == null) {
          termBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              uk.gov.gchq.event_logging.v4.TermComplexType, uk.gov.gchq.event_logging.v4.TermComplexType.Builder, uk.gov.gchq.event_logging.v4.TermComplexTypeOrBuilder>(
                  getTerm(),
                  getParentForChildren(),
                  isClean());
          term_ = null;
        }
        return termBuilder_;
      }

      private uk.gov.gchq.event_logging.v4.AndComplexType and_;
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.AndComplexType, uk.gov.gchq.event_logging.v4.AndComplexType.Builder, uk.gov.gchq.event_logging.v4.AndComplexTypeOrBuilder> andBuilder_;
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
       * @return Whether the and field is set.
       */
      public boolean hasAnd() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
       * @return The and.
       */
      public uk.gov.gchq.event_logging.v4.AndComplexType getAnd() {
        if (andBuilder_ == null) {
          return and_ == null ? uk.gov.gchq.event_logging.v4.AndComplexType.getDefaultInstance() : and_;
        } else {
          return andBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
       */
      public Builder setAnd(uk.gov.gchq.event_logging.v4.AndComplexType value) {
        if (andBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          and_ = value;
        } else {
          andBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
       */
      public Builder setAnd(
          uk.gov.gchq.event_logging.v4.AndComplexType.Builder builderForValue) {
        if (andBuilder_ == null) {
          and_ = builderForValue.build();
        } else {
          andBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
       */
      public Builder mergeAnd(uk.gov.gchq.event_logging.v4.AndComplexType value) {
        if (andBuilder_ == null) {
          if (((bitField0_ & 0x00000002) != 0) &&
            and_ != null &&
            and_ != uk.gov.gchq.event_logging.v4.AndComplexType.getDefaultInstance()) {
            getAndBuilder().mergeFrom(value);
          } else {
            and_ = value;
          }
        } else {
          andBuilder_.mergeFrom(value);
        }
        if (and_ != null) {
          bitField0_ |= 0x00000002;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
       */
      public Builder clearAnd() {
        bitField0_ = (bitField0_ & ~0x00000002);
        and_ = null;
        if (andBuilder_ != null) {
          andBuilder_.dispose();
          andBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
       */
      public uk.gov.gchq.event_logging.v4.AndComplexType.Builder getAndBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getAndFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
       */
      public uk.gov.gchq.event_logging.v4.AndComplexTypeOrBuilder getAndOrBuilder() {
        if (andBuilder_ != null) {
          return andBuilder_.getMessageOrBuilder();
        } else {
          return and_ == null ?
              uk.gov.gchq.event_logging.v4.AndComplexType.getDefaultInstance() : and_;
        }
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being AND'd together.
       * </pre>
       *
       * <code>.event_logging.v4.AndComplexType and = 2 [json_name = "and"];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.AndComplexType, uk.gov.gchq.event_logging.v4.AndComplexType.Builder, uk.gov.gchq.event_logging.v4.AndComplexTypeOrBuilder> 
          getAndFieldBuilder() {
        if (andBuilder_ == null) {
          andBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              uk.gov.gchq.event_logging.v4.AndComplexType, uk.gov.gchq.event_logging.v4.AndComplexType.Builder, uk.gov.gchq.event_logging.v4.AndComplexTypeOrBuilder>(
                  getAnd(),
                  getParentForChildren(),
                  isClean());
          and_ = null;
        }
        return andBuilder_;
      }

      private uk.gov.gchq.event_logging.v4.OrComplexType or_;
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.OrComplexType, uk.gov.gchq.event_logging.v4.OrComplexType.Builder, uk.gov.gchq.event_logging.v4.OrComplexTypeOrBuilder> orBuilder_;
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
       * @return Whether the or field is set.
       */
      public boolean hasOr() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
       * @return The or.
       */
      public uk.gov.gchq.event_logging.v4.OrComplexType getOr() {
        if (orBuilder_ == null) {
          return or_ == null ? uk.gov.gchq.event_logging.v4.OrComplexType.getDefaultInstance() : or_;
        } else {
          return orBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
       */
      public Builder setOr(uk.gov.gchq.event_logging.v4.OrComplexType value) {
        if (orBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          or_ = value;
        } else {
          orBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
       */
      public Builder setOr(
          uk.gov.gchq.event_logging.v4.OrComplexType.Builder builderForValue) {
        if (orBuilder_ == null) {
          or_ = builderForValue.build();
        } else {
          orBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
       */
      public Builder mergeOr(uk.gov.gchq.event_logging.v4.OrComplexType value) {
        if (orBuilder_ == null) {
          if (((bitField0_ & 0x00000004) != 0) &&
            or_ != null &&
            or_ != uk.gov.gchq.event_logging.v4.OrComplexType.getDefaultInstance()) {
            getOrBuilder().mergeFrom(value);
          } else {
            or_ = value;
          }
        } else {
          orBuilder_.mergeFrom(value);
        }
        if (or_ != null) {
          bitField0_ |= 0x00000004;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
       */
      public Builder clearOr() {
        bitField0_ = (bitField0_ & ~0x00000004);
        or_ = null;
        if (orBuilder_ != null) {
          orBuilder_.dispose();
          orBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
       */
      public uk.gov.gchq.event_logging.v4.OrComplexType.Builder getOrBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getOrFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
       */
      public uk.gov.gchq.event_logging.v4.OrComplexTypeOrBuilder getOrOrBuilder() {
        if (orBuilder_ != null) {
          return orBuilder_.getMessageOrBuilder();
        } else {
          return or_ == null ?
              uk.gov.gchq.event_logging.v4.OrComplexType.getDefaultInstance() : or_;
        }
      }
      /**
       * <pre>
       * All of the enclosed items are to be treated as being OR'd together.
       * </pre>
       *
       * <code>.event_logging.v4.OrComplexType or = 3 [json_name = "or"];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.OrComplexType, uk.gov.gchq.event_logging.v4.OrComplexType.Builder, uk.gov.gchq.event_logging.v4.OrComplexTypeOrBuilder> 
          getOrFieldBuilder() {
        if (orBuilder_ == null) {
          orBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              uk.gov.gchq.event_logging.v4.OrComplexType, uk.gov.gchq.event_logging.v4.OrComplexType.Builder, uk.gov.gchq.event_logging.v4.OrComplexTypeOrBuilder>(
                  getOr(),
                  getParentForChildren(),
                  isClean());
          or_ = null;
        }
        return orBuilder_;
      }

      private uk.gov.gchq.event_logging.v4.NotComplexType not_;
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.NotComplexType, uk.gov.gchq.event_logging.v4.NotComplexType.Builder, uk.gov.gchq.event_logging.v4.NotComplexTypeOrBuilder> notBuilder_;
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
       * @return Whether the not field is set.
       */
      public boolean hasNot() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
       * @return The not.
       */
      public uk.gov.gchq.event_logging.v4.NotComplexType getNot() {
        if (notBuilder_ == null) {
          return not_ == null ? uk.gov.gchq.event_logging.v4.NotComplexType.getDefaultInstance() : not_;
        } else {
          return notBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
       */
      public Builder setNot(uk.gov.gchq.event_logging.v4.NotComplexType value) {
        if (notBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          not_ = value;
        } else {
          notBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
       */
      public Builder setNot(
          uk.gov.gchq.event_logging.v4.NotComplexType.Builder builderForValue) {
        if (notBuilder_ == null) {
          not_ = builderForValue.build();
        } else {
          notBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
       */
      public Builder mergeNot(uk.gov.gchq.event_logging.v4.NotComplexType value) {
        if (notBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            not_ != null &&
            not_ != uk.gov.gchq.event_logging.v4.NotComplexType.getDefaultInstance()) {
            getNotBuilder().mergeFrom(value);
          } else {
            not_ = value;
          }
        } else {
          notBuilder_.mergeFrom(value);
        }
        if (not_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
       */
      public Builder clearNot() {
        bitField0_ = (bitField0_ & ~0x00000008);
        not_ = null;
        if (notBuilder_ != null) {
          notBuilder_.dispose();
          notBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
       */
      public uk.gov.gchq.event_logging.v4.NotComplexType.Builder getNotBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getNotFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
       */
      public uk.gov.gchq.event_logging.v4.NotComplexTypeOrBuilder getNotOrBuilder() {
        if (notBuilder_ != null) {
          return notBuilder_.getMessageOrBuilder();
        } else {
          return not_ == null ?
              uk.gov.gchq.event_logging.v4.NotComplexType.getDefaultInstance() : not_;
        }
      }
      /**
       * <pre>
       * The enclosed structure operators and terms are negated.
       * </pre>
       *
       * <code>.event_logging.v4.NotComplexType not = 4 [json_name = "not"];</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          uk.gov.gchq.event_logging.v4.NotComplexType, uk.gov.gchq.event_logging.v4.NotComplexType.Builder, uk.gov.gchq.event_logging.v4.NotComplexTypeOrBuilder> 
          getNotFieldBuilder() {
        if (notBuilder_ == null) {
          notBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              uk.gov.gchq.event_logging.v4.NotComplexType, uk.gov.gchq.event_logging.v4.NotComplexType.Builder, uk.gov.gchq.event_logging.v4.NotComplexTypeOrBuilder>(
                  getNot(),
                  getParentForChildren(),
                  isClean());
          not_ = null;
        }
        return notBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType)
    }

    // @@protoc_insertion_point(class_scope:event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType)
    private static final uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType();
    }

    public static uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ChoiceWrapperNotComplexType>
        PARSER = new com.google.protobuf.AbstractParser<ChoiceWrapperNotComplexType>() {
      @java.lang.Override
      public ChoiceWrapperNotComplexType parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ChoiceWrapperNotComplexType> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ChoiceWrapperNotComplexType> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int CHOICE_WRAPPER_FIELD_NUMBER = 1;
  @SuppressWarnings("serial")
  private java.util.List<uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType> choiceWrapper_;
  /**
   * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType> getChoiceWrapperList() {
    return choiceWrapper_;
  }
  /**
   * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public java.util.List<? extends uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexTypeOrBuilder> 
      getChoiceWrapperOrBuilderList() {
    return choiceWrapper_;
  }
  /**
   * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public int getChoiceWrapperCount() {
    return choiceWrapper_.size();
  }
  /**
   * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType getChoiceWrapper(int index) {
    return choiceWrapper_.get(index);
  }
  /**
   * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
   */
  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexTypeOrBuilder getChoiceWrapperOrBuilder(
      int index) {
    return choiceWrapper_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < choiceWrapper_.size(); i++) {
      output.writeMessage(1, choiceWrapper_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < choiceWrapper_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, choiceWrapper_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof uk.gov.gchq.event_logging.v4.NotComplexType)) {
      return super.equals(obj);
    }
    uk.gov.gchq.event_logging.v4.NotComplexType other = (uk.gov.gchq.event_logging.v4.NotComplexType) obj;

    if (!getChoiceWrapperList()
        .equals(other.getChoiceWrapperList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getChoiceWrapperCount() > 0) {
      hash = (37 * hash) + CHOICE_WRAPPER_FIELD_NUMBER;
      hash = (53 * hash) + getChoiceWrapperList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static uk.gov.gchq.event_logging.v4.NotComplexType parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static uk.gov.gchq.event_logging.v4.NotComplexType parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.NotComplexType parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static uk.gov.gchq.event_logging.v4.NotComplexType parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.NotComplexType parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static uk.gov.gchq.event_logging.v4.NotComplexType parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.NotComplexType parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static uk.gov.gchq.event_logging.v4.NotComplexType parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static uk.gov.gchq.event_logging.v4.NotComplexType parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static uk.gov.gchq.event_logging.v4.NotComplexType parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static uk.gov.gchq.event_logging.v4.NotComplexType parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static uk.gov.gchq.event_logging.v4.NotComplexType parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(uk.gov.gchq.event_logging.v4.NotComplexType prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * The enclosed structure operators and terms are negated.
   * </pre>
   *
   * Protobuf type {@code event_logging.v4.NotComplexType}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:event_logging.v4.NotComplexType)
      uk.gov.gchq.event_logging.v4.NotComplexTypeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return uk.gov.gchq.event_logging.v4.LogicComplexTypeProto.internal_static_event_logging_v4_NotComplexType_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return uk.gov.gchq.event_logging.v4.LogicComplexTypeProto.internal_static_event_logging_v4_NotComplexType_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              uk.gov.gchq.event_logging.v4.NotComplexType.class, uk.gov.gchq.event_logging.v4.NotComplexType.Builder.class);
    }

    // Construct using uk.gov.gchq.event_logging.v4.NotComplexType.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      if (choiceWrapperBuilder_ == null) {
        choiceWrapper_ = java.util.Collections.emptyList();
      } else {
        choiceWrapper_ = null;
        choiceWrapperBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return uk.gov.gchq.event_logging.v4.LogicComplexTypeProto.internal_static_event_logging_v4_NotComplexType_descriptor;
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.NotComplexType getDefaultInstanceForType() {
      return uk.gov.gchq.event_logging.v4.NotComplexType.getDefaultInstance();
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.NotComplexType build() {
      uk.gov.gchq.event_logging.v4.NotComplexType result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public uk.gov.gchq.event_logging.v4.NotComplexType buildPartial() {
      uk.gov.gchq.event_logging.v4.NotComplexType result = new uk.gov.gchq.event_logging.v4.NotComplexType(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(uk.gov.gchq.event_logging.v4.NotComplexType result) {
      if (choiceWrapperBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          choiceWrapper_ = java.util.Collections.unmodifiableList(choiceWrapper_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.choiceWrapper_ = choiceWrapper_;
      } else {
        result.choiceWrapper_ = choiceWrapperBuilder_.build();
      }
    }

    private void buildPartial0(uk.gov.gchq.event_logging.v4.NotComplexType result) {
      int from_bitField0_ = bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof uk.gov.gchq.event_logging.v4.NotComplexType) {
        return mergeFrom((uk.gov.gchq.event_logging.v4.NotComplexType)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(uk.gov.gchq.event_logging.v4.NotComplexType other) {
      if (other == uk.gov.gchq.event_logging.v4.NotComplexType.getDefaultInstance()) return this;
      if (choiceWrapperBuilder_ == null) {
        if (!other.choiceWrapper_.isEmpty()) {
          if (choiceWrapper_.isEmpty()) {
            choiceWrapper_ = other.choiceWrapper_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureChoiceWrapperIsMutable();
            choiceWrapper_.addAll(other.choiceWrapper_);
          }
          onChanged();
        }
      } else {
        if (!other.choiceWrapper_.isEmpty()) {
          if (choiceWrapperBuilder_.isEmpty()) {
            choiceWrapperBuilder_.dispose();
            choiceWrapperBuilder_ = null;
            choiceWrapper_ = other.choiceWrapper_;
            bitField0_ = (bitField0_ & ~0x00000001);
            choiceWrapperBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getChoiceWrapperFieldBuilder() : null;
          } else {
            choiceWrapperBuilder_.addAllMessages(other.choiceWrapper_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType m =
                  input.readMessage(
                      uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.parser(),
                      extensionRegistry);
              if (choiceWrapperBuilder_ == null) {
                ensureChoiceWrapperIsMutable();
                choiceWrapper_.add(m);
              } else {
                choiceWrapperBuilder_.addMessage(m);
              }
              break;
            } // case 10
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType> choiceWrapper_ =
      java.util.Collections.emptyList();
    private void ensureChoiceWrapperIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        choiceWrapper_ = new java.util.ArrayList<uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType>(choiceWrapper_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.Builder, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexTypeOrBuilder> choiceWrapperBuilder_;

    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public java.util.List<uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType> getChoiceWrapperList() {
      if (choiceWrapperBuilder_ == null) {
        return java.util.Collections.unmodifiableList(choiceWrapper_);
      } else {
        return choiceWrapperBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public int getChoiceWrapperCount() {
      if (choiceWrapperBuilder_ == null) {
        return choiceWrapper_.size();
      } else {
        return choiceWrapperBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType getChoiceWrapper(int index) {
      if (choiceWrapperBuilder_ == null) {
        return choiceWrapper_.get(index);
      } else {
        return choiceWrapperBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public Builder setChoiceWrapper(
        int index, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType value) {
      if (choiceWrapperBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChoiceWrapperIsMutable();
        choiceWrapper_.set(index, value);
        onChanged();
      } else {
        choiceWrapperBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public Builder setChoiceWrapper(
        int index, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.Builder builderForValue) {
      if (choiceWrapperBuilder_ == null) {
        ensureChoiceWrapperIsMutable();
        choiceWrapper_.set(index, builderForValue.build());
        onChanged();
      } else {
        choiceWrapperBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public Builder addChoiceWrapper(uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType value) {
      if (choiceWrapperBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChoiceWrapperIsMutable();
        choiceWrapper_.add(value);
        onChanged();
      } else {
        choiceWrapperBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public Builder addChoiceWrapper(
        int index, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType value) {
      if (choiceWrapperBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureChoiceWrapperIsMutable();
        choiceWrapper_.add(index, value);
        onChanged();
      } else {
        choiceWrapperBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public Builder addChoiceWrapper(
        uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.Builder builderForValue) {
      if (choiceWrapperBuilder_ == null) {
        ensureChoiceWrapperIsMutable();
        choiceWrapper_.add(builderForValue.build());
        onChanged();
      } else {
        choiceWrapperBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public Builder addChoiceWrapper(
        int index, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.Builder builderForValue) {
      if (choiceWrapperBuilder_ == null) {
        ensureChoiceWrapperIsMutable();
        choiceWrapper_.add(index, builderForValue.build());
        onChanged();
      } else {
        choiceWrapperBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public Builder addAllChoiceWrapper(
        java.lang.Iterable<? extends uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType> values) {
      if (choiceWrapperBuilder_ == null) {
        ensureChoiceWrapperIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, choiceWrapper_);
        onChanged();
      } else {
        choiceWrapperBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public Builder clearChoiceWrapper() {
      if (choiceWrapperBuilder_ == null) {
        choiceWrapper_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        choiceWrapperBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public Builder removeChoiceWrapper(int index) {
      if (choiceWrapperBuilder_ == null) {
        ensureChoiceWrapperIsMutable();
        choiceWrapper_.remove(index);
        onChanged();
      } else {
        choiceWrapperBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.Builder getChoiceWrapperBuilder(
        int index) {
      return getChoiceWrapperFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexTypeOrBuilder getChoiceWrapperOrBuilder(
        int index) {
      if (choiceWrapperBuilder_ == null) {
        return choiceWrapper_.get(index);  } else {
        return choiceWrapperBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public java.util.List<? extends uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexTypeOrBuilder> 
         getChoiceWrapperOrBuilderList() {
      if (choiceWrapperBuilder_ != null) {
        return choiceWrapperBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(choiceWrapper_);
      }
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.Builder addChoiceWrapperBuilder() {
      return getChoiceWrapperFieldBuilder().addBuilder(
          uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.getDefaultInstance());
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.Builder addChoiceWrapperBuilder(
        int index) {
      return getChoiceWrapperFieldBuilder().addBuilder(
          index, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.getDefaultInstance());
    }
    /**
     * <code>repeated .event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType choice_wrapper = 1 [json_name = "choiceWrapper", (.buf.validate.field) = { ... }</code>
     */
    public java.util.List<uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.Builder> 
         getChoiceWrapperBuilderList() {
      return getChoiceWrapperFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.Builder, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexTypeOrBuilder> 
        getChoiceWrapperFieldBuilder() {
      if (choiceWrapperBuilder_ == null) {
        choiceWrapperBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexType.Builder, uk.gov.gchq.event_logging.v4.NotComplexType.ChoiceWrapperNotComplexTypeOrBuilder>(
                choiceWrapper_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        choiceWrapper_ = null;
      }
      return choiceWrapperBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:event_logging.v4.NotComplexType)
  }

  // @@protoc_insertion_point(class_scope:event_logging.v4.NotComplexType)
  private static final uk.gov.gchq.event_logging.v4.NotComplexType DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new uk.gov.gchq.event_logging.v4.NotComplexType();
  }

  public static uk.gov.gchq.event_logging.v4.NotComplexType getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<NotComplexType>
      PARSER = new com.google.protobuf.AbstractParser<NotComplexType>() {
    @java.lang.Override
    public NotComplexType parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<NotComplexType> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<NotComplexType> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public uk.gov.gchq.event_logging.v4.NotComplexType getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

