// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/media_complex_type.proto

// Protobuf Java Version: 4.26.1
package uk.gov.gchq.event_logging.v4;

public interface MediaComplexTypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:event_logging.v4.MediaComplexType)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The type of the removable media, e.g. MemoryCard
   * </pre>
   *
   * <code>.event_logging.v4.MediaTypeSimpleType type = 1 [json_name = "type", (.buf.validate.field) = { ... }</code>
   * @return The enum numeric value on the wire for type.
   */
  int getTypeValue();
  /**
   * <pre>
   * The type of the removable media, e.g. MemoryCard
   * </pre>
   *
   * <code>.event_logging.v4.MediaTypeSimpleType type = 1 [json_name = "type", (.buf.validate.field) = { ... }</code>
   * @return The type.
   */
  uk.gov.gchq.event_logging.v4.MediaTypeSimpleType getType();

  /**
   * <pre>
   * The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.
   * </pre>
   *
   * <code>string id = 2 [json_name = "id"];</code>
   * @return The id.
   */
  java.lang.String getId();
  /**
   * <pre>
   * The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.
   * </pre>
   *
   * <code>string id = 2 [json_name = "id"];</code>
   * @return The bytes for id.
   */
  com.google.protobuf.ByteString
      getIdBytes();

  /**
   * <pre>
   * A friendly name for the media, possibly assigned by device monitoring system..
   * </pre>
   *
   * <code>string name = 3 [json_name = "name"];</code>
   * @return The name.
   */
  java.lang.String getName();
  /**
   * <pre>
   * A friendly name for the media, possibly assigned by device monitoring system..
   * </pre>
   *
   * <code>string name = 3 [json_name = "name"];</code>
   * @return The bytes for name.
   */
  com.google.protobuf.ByteString
      getNameBytes();

  /**
   * <pre>
   * Indicates if this media is removable, e.g. USB storage device or soft media such as DVD.
   * </pre>
   *
   * <code>bool removable = 4 [json_name = "removable"];</code>
   * @return The removable.
   */
  boolean getRemovable();

  /**
   * <pre>
   * Indicates if a device has read-write access. Most devices are read-write so this is assumed to be true and can therefore be omitted where this is the case.
   * </pre>
   *
   * <code>bool read_write = 5 [json_name = "readWrite"];</code>
   * @return The readWrite.
   */
  boolean getReadWrite();

  /**
   * <pre>
   * The capacity of the media in bytes.
   * </pre>
   *
   * <code>uint32 capacity = 6 [json_name = "capacity", (.buf.validate.field) = { ... }</code>
   * @return The capacity.
   */
  int getCapacity();

  /**
   * <pre>
   * The classification of the media.
   * </pre>
   *
   * <code>.event_logging.v4.ClassificationComplexType classification = 7 [json_name = "classification"];</code>
   * @return Whether the classification field is set.
   */
  boolean hasClassification();
  /**
   * <pre>
   * The classification of the media.
   * </pre>
   *
   * <code>.event_logging.v4.ClassificationComplexType classification = 7 [json_name = "classification"];</code>
   * @return The classification.
   */
  uk.gov.gchq.event_logging.v4.ClassificationComplexType getClassification();
  /**
   * <pre>
   * The classification of the media.
   * </pre>
   *
   * <code>.event_logging.v4.ClassificationComplexType classification = 7 [json_name = "classification"];</code>
   */
  uk.gov.gchq.event_logging.v4.ClassificationComplexTypeOrBuilder getClassificationOrBuilder();

  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> 
      getDataList();
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.DataComplexType getData(int index);
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  int getDataCount();
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  java.util.List<? extends uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
      getDataOrBuilderList();
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 8 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder getDataOrBuilder(
      int index);
}
