// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/authenticate_complex_type.proto

// Protobuf Java Version: 4.26.1
package uk.gov.gchq.event_logging.v4;

public interface AuthenticateComplexTypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:event_logging.v4.AuthenticateComplexType)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * The authentication action that was performed, e.g. Logon, Logoff.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateActionSimpleType action = 1 [json_name = "action", (.buf.validate.field) = { ... }</code>
   * @return The enum numeric value on the wire for action.
   */
  int getActionValue();
  /**
   * <pre>
   * The authentication action that was performed, e.g. Logon, Logoff.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateActionSimpleType action = 1 [json_name = "action", (.buf.validate.field) = { ... }</code>
   * @return The action.
   */
  uk.gov.gchq.event_logging.v4.AuthenticateActionSimpleType getAction();

  /**
   * <pre>
   * This indicates the type of logon. For example, Microsoft Windows has several logon types such as Interactive (logon to domain), RemoteInteractive (logon to remote machine), CachedInteractive (logon to local machine using cached domain information due to loss of network).
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateLogonTypeSimpleType logon_type = 2 [json_name = "logonType", (.buf.validate.field) = { ... }</code>
   * @return The enum numeric value on the wire for logonType.
   */
  int getLogonTypeValue();
  /**
   * <pre>
   * This indicates the type of logon. For example, Microsoft Windows has several logon types such as Interactive (logon to domain), RemoteInteractive (logon to remote machine), CachedInteractive (logon to local machine using cached domain information due to loss of network).
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateLogonTypeSimpleType logon_type = 2 [json_name = "logonType", (.buf.validate.field) = { ... }</code>
   * @return The logonType.
   */
  uk.gov.gchq.event_logging.v4.AuthenticateLogonTypeSimpleType getLogonType();

  /**
   * <pre>
   * The user who the authentication action relates to.
   * </pre>
   *
   * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
   * @return Whether the user field is set.
   */
  boolean hasUser();
  /**
   * <pre>
   * The user who the authentication action relates to.
   * </pre>
   *
   * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
   * @return The user.
   */
  uk.gov.gchq.event_logging.v4.UserComplexType getUser();
  /**
   * <pre>
   * The user who the authentication action relates to.
   * </pre>
   *
   * <code>.event_logging.v4.UserComplexType user = 3 [json_name = "user", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.UserComplexTypeOrBuilder getUserOrBuilder();

  /**
   * <pre>
   * Where a device authenticates with another device, this is the device that initiates the authentication action.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
   * @return Whether the device field is set.
   */
  boolean hasDevice();
  /**
   * <pre>
   * Where a device authenticates with another device, this is the device that initiates the authentication action.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
   * @return The device.
   */
  uk.gov.gchq.event_logging.v4.DeviceComplexType getDevice();
  /**
   * <pre>
   * Where a device authenticates with another device, this is the device that initiates the authentication action.
   * </pre>
   *
   * <code>.event_logging.v4.DeviceComplexType device = 4 [json_name = "device", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.DeviceComplexTypeOrBuilder getDeviceOrBuilder();

  /**
   * <pre>
   * The group the authentication action relates to.
   * </pre>
   *
   * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
   * @return Whether the group field is set.
   */
  boolean hasGroup();
  /**
   * <pre>
   * The group the authentication action relates to.
   * </pre>
   *
   * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
   * @return The group.
   */
  uk.gov.gchq.event_logging.v4.GroupComplexType getGroup();
  /**
   * <pre>
   * The group the authentication action relates to.
   * </pre>
   *
   * <code>.event_logging.v4.GroupComplexType group = 5 [json_name = "group", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.GroupComplexTypeOrBuilder getGroupOrBuilder();

  /**
   * <pre>
   * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
   * @return Whether the outcome field is set.
   */
  boolean hasOutcome();
  /**
   * <pre>
   * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
   * @return The outcome.
   */
  uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexType getOutcome();
  /**
   * <pre>
   * Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
   * </pre>
   *
   * <code>.event_logging.v4.AuthenticateOutcomeComplexType outcome = 11 [json_name = "outcome"];</code>
   */
  uk.gov.gchq.event_logging.v4.AuthenticateOutcomeComplexTypeOrBuilder getOutcomeOrBuilder();

  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  java.util.List<uk.gov.gchq.event_logging.v4.DataComplexType> 
      getDataList();
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.DataComplexType getData(int index);
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  int getDataCount();
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  java.util.List<? extends uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder> 
      getDataOrBuilderList();
  /**
   * <pre>
   * Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
   * </pre>
   *
   * <code>repeated .event_logging.v4.DataComplexType data = 12 [json_name = "data", (.buf.validate.field) = { ... }</code>
   */
  uk.gov.gchq.event_logging.v4.DataComplexTypeOrBuilder getDataOrBuilder(
      int index);
}
