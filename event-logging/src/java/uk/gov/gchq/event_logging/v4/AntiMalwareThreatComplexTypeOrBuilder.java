// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: event_logging/v4/anti_malware_threat_complex_type.proto

// Protobuf Java Version: 4.26.1
package uk.gov.gchq.event_logging.v4;

public interface AntiMalwareThreatComplexTypeOrBuilder extends
    // @@protoc_insertion_point(interface_extends:event_logging.v4.AntiMalwareThreatComplexType)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <pre>
   * Describes the anti-malware product used.
   * </pre>
   *
   * <code>.event_logging.v4.SoftwareComplexType product = 1 [json_name = "product"];</code>
   * @return Whether the product field is set.
   */
  boolean hasProduct();
  /**
   * <pre>
   * Describes the anti-malware product used.
   * </pre>
   *
   * <code>.event_logging.v4.SoftwareComplexType product = 1 [json_name = "product"];</code>
   * @return The product.
   */
  uk.gov.gchq.event_logging.v4.SoftwareComplexType getProduct();
  /**
   * <pre>
   * Describes the anti-malware product used.
   * </pre>
   *
   * <code>.event_logging.v4.SoftwareComplexType product = 1 [json_name = "product"];</code>
   */
  uk.gov.gchq.event_logging.v4.SoftwareComplexTypeOrBuilder getProductOrBuilder();

  /**
   * <pre>
   * Describes the anti-malware signature used.
   * </pre>
   *
   * <code>.event_logging.v4.AntiMalwareThreatComplexType.SignatureType signature = 2 [json_name = "signature"];</code>
   * @return Whether the signature field is set.
   */
  boolean hasSignature();
  /**
   * <pre>
   * Describes the anti-malware signature used.
   * </pre>
   *
   * <code>.event_logging.v4.AntiMalwareThreatComplexType.SignatureType signature = 2 [json_name = "signature"];</code>
   * @return The signature.
   */
  uk.gov.gchq.event_logging.v4.AntiMalwareThreatComplexType.SignatureType getSignature();
  /**
   * <pre>
   * Describes the anti-malware signature used.
   * </pre>
   *
   * <code>.event_logging.v4.AntiMalwareThreatComplexType.SignatureType signature = 2 [json_name = "signature"];</code>
   */
  uk.gov.gchq.event_logging.v4.AntiMalwareThreatComplexType.SignatureTypeOrBuilder getSignatureOrBuilder();

  /**
   * <pre>
   * Describes the threat if one has been found.
   * </pre>
   *
   * <code>.event_logging.v4.AntiMalwareThreatComplexType.ThreatType threat = 3 [json_name = "threat"];</code>
   * @return Whether the threat field is set.
   */
  boolean hasThreat();
  /**
   * <pre>
   * Describes the threat if one has been found.
   * </pre>
   *
   * <code>.event_logging.v4.AntiMalwareThreatComplexType.ThreatType threat = 3 [json_name = "threat"];</code>
   * @return The threat.
   */
  uk.gov.gchq.event_logging.v4.AntiMalwareThreatComplexType.ThreatType getThreat();
  /**
   * <pre>
   * Describes the threat if one has been found.
   * </pre>
   *
   * <code>.event_logging.v4.AntiMalwareThreatComplexType.ThreatType threat = 3 [json_name = "threat"];</code>
   */
  uk.gov.gchq.event_logging.v4.AntiMalwareThreatComplexType.ThreatTypeOrBuilder getThreatOrBuilder();

  /**
   * <pre>
   * Describes the infected item if one has been found.
   * </pre>
   *
   * <code>.event_logging.v4.MultiObjectComplexType infected = 4 [json_name = "infected"];</code>
   * @return Whether the infected field is set.
   */
  boolean hasInfected();
  /**
   * <pre>
   * Describes the infected item if one has been found.
   * </pre>
   *
   * <code>.event_logging.v4.MultiObjectComplexType infected = 4 [json_name = "infected"];</code>
   * @return The infected.
   */
  uk.gov.gchq.event_logging.v4.MultiObjectComplexType getInfected();
  /**
   * <pre>
   * Describes the infected item if one has been found.
   * </pre>
   *
   * <code>.event_logging.v4.MultiObjectComplexType infected = 4 [json_name = "infected"];</code>
   */
  uk.gov.gchq.event_logging.v4.MultiObjectComplexTypeOrBuilder getInfectedOrBuilder();
}
