// event_logging/v4/create_complex_type.proto at 0:0
syntax = "proto3";
package event_logging.v4;

import "event_logging/v4/banner_complex_type.proto";
import "event_logging/v4/chat_complex_type.proto";
import "event_logging/v4/configuration_complex_type.proto";
import "event_logging/v4/data_complex_type.proto";
import "event_logging/v4/document_complex_type.proto";
import "event_logging/v4/email_complex_type.proto";
import "event_logging/v4/file_complex_type.proto";
import "event_logging/v4/folder_complex_type.proto";
import "event_logging/v4/group_chat_complex_type.proto";
import "event_logging/v4/multi_object_complex_type.proto";
import "event_logging/v4/object_complex_type.proto";
import "event_logging/v4/outcome_complex_type.proto";
import "event_logging/v4/resource_complex_type.proto";
import "event_logging/v4/shortcut_complex_type.proto";
import "event_logging/v4/user_complex_type.proto";
import "event_logging/v4/virtual_session_complex_type.proto";
import "event_logging/v4/voip_complex_type.proto";
import "buf/validate/validate.proto";

// Describes an event action relating to creating data, files, documents, etc.
message CreateComplexType {
  repeated ChoiceWrapperCreateComplexType choice_wrapper = 1 [
    (buf.validate.field).repeated = {
      min_items: 1
    }
  ];
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 11;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 12 [
    (buf.validate.field).repeated = {
      min_items: 0
    }
  ];

  message ChoiceWrapperCreateComplexType {
    // Describes the association or link between two or more entities, e.g. the link between two web resources.
    AssociationComplexType association = 1 [
      (buf.validate.field).required = true
    ];
    // Describes a banner or message presented to a user, e.g. an acceptable use policy message shown on system login.
    BannerComplexType banner = 2 [
      (buf.validate.field).required = true
    ];
    // Describes part of a chat session between a user and one or more other users, e.g. in an instant messaging application.
    ChatComplexType chat = 3 [
      (buf.validate.field).required = true
    ];
    // Describes the configuration of entity, e.g. it can be used to describe the update to the configuration of a network device.
    ConfigurationComplexType configuration = 4 [
      (buf.validate.field).required = true
    ];
    // Structure used to describe a criteria used to filter or limit the scope of something, e.g. in a search, view, update or delete event.
    CriteriaComplexType criteria = 5 [
      (buf.validate.field).required = true
    ];
    // Describes a document that may be stored electronically or in hard-copy form.
    DocumentComplexType document = 6 [
      (buf.validate.field).required = true
    ];
    // Describes an email sent from one user to one or more recipients.
    EmailComplexType email = 7 [
      (buf.validate.field).required = true
    ];
    // A file object, e.g. a text file on file system
    FileComplexType file = 8 [
      (buf.validate.field).required = true
    ];
    // A folder object, e.g. a directory or folder on file system.
    FolderComplexType folder = 9 [
      (buf.validate.field).required = true
    ];
    // A group entity, e.g. a user group, an access control group or a named group of some kind that ties together a collection of entities/objects of some kind.
    GroupComplexType group = 10 [
      (buf.validate.field).required = true
    ];
    // Describes the details of a chat event within a chat room or group.
    GroupChatComplexType group_chat = 11 [
      (buf.validate.field).required = true
    ];
    // A generic object or entity that cannot be described using any of the other more specific object types.
    ObjectComplexType object = 12 [
      (buf.validate.field).required = true
    ];
    // A set of search results from a query where the results are viewed or interacted with in a separate event to the execution of the query. E.g. for long-running queries where the results are stored for later viewing/processing. The Search schema action should be used to describe the event for the execution of the search. Query/Id or Query/Name can be used to associate the results event with the query event.
    SearchResultsComplexType search_results = 13 [
      (buf.validate.field).required = true
    ];
    // A shortcut to another file/object, such as a Windows Shortcut or linux symbolic link.
    ShortcutComplexType shortcut = 14 [
      (buf.validate.field).required = true
    ];
    // A user entity which may represent a person or some form of non-human processing user.
    UserComplexType user = 15 [
      (buf.validate.field).required = true
    ];
    // This is used to describe the session used when viewing another user's session, e.g. screen sharing or remote assistance type activities.
    VirtualSessionComplexType virtual_session = 16 [
      (buf.validate.field).required = true
    ];
    // Describes a Voice Over Internet Protocol call.
    VoipComplexType voip = 17 [
      (buf.validate.field).required = true
    ];
    // This is used to describe a resource within a website or web application, such as an HTML file, image file or script, along with the details of that resource such as size or response codes. It can represent both successful and failed access to the resource object.
    ResourceComplexType resource = 18 [
      (buf.validate.field).required = true
    ];
  }
}
