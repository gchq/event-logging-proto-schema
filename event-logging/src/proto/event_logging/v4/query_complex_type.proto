// event_logging/v4/query_complex_type.proto at 0:0
syntax = "proto3";
package event_logging.v4;

import "event_logging/v4/logic_complex_type.proto";
import "event_logging/v4/term_complex_type.proto";
import "buf/validate/validate.proto";

message QueryComplexType {
  // An identifier to uniquely identify the query that was executed. This may be used to link the execution of a query (i.e. Search/Query/Id) with the results that are persisted and viewed at another time (i.e. View/SearchResults/Query/Id).
  string id = 1;
  // The name of the query that was executed. This may be used to link the execution of a query with the results that are persisted and viewed at another time.
  string name = 2;
  // A human-readable description of what the query is searching for.
  string description = 3;
  // A complex boolean tree or operators and terms that describes the query.
  AdvancedType advanced = 4;
  // A simple representation of a query using includes and excludes terms. This is suitable for simple filtered lists, e.g. for a list of names excluding "John,Bob".
  SimpleType simple = 5;
  // The raw query in the query language used by the application executing the query, e.g. SQL, xpath, etc.
  string raw = 6;

  // A complex boolean tree or operators and terms that describes the query.
  message AdvancedType {
    repeated ChoiceWrapperAdvancedType choice_wrapper = 1 [
      (buf.validate.field).repeated = {
        min_items: 0
      }
    ];
  
    message ChoiceWrapperAdvancedType {
      // Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
      TermComplexType term = 1;
      // All of the enclosed items are to be treated as being AND'd together.
      AndComplexType and = 2;
      // All of the enclosed items are to be treated as being OR'd together.
      OrComplexType or = 3;
      // The enclosed structure operators and terms are negated.
      NotComplexType not = 4;
    }
  }
  // A simple representation of a query using includes and excludes terms. This is suitable for simple filtered lists, e.g. for a list of names excluding "John,Bob".
  message SimpleType {
    // Values to include in the query results, typically delimited by a comma.
    string include = 1;
    // Values to exclude in the query results, typically delimited by a comma.
    string exclude = 2;
  }
}
