// event_logging/v4/event_source_complex_type.proto at 0:0
syntax = "proto3";
package event_logging.v4;

import "event_logging/v4/data_complex_type.proto";
import "event_logging/v4/device_complex_type.proto";
import "event_logging/v4/location_complex_type.proto";
import "event_logging/v4/system_complex_type.proto";
import "event_logging/v4/user_complex_type.proto";
import "buf/validate/validate.proto";

// Details where the event came from, i.e. what generator created the event and on what device.
message EventSourceComplexType {
  // A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
  string event_id = 1;
  // Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
  string session_id = 2;
  // The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
  SystemComplexType system = 3 [
    (buf.validate.field).required = true
  ];
  // The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
  string generator = 4 [
    (buf.validate.field).required = true
  ];
  // A description of the device that the event generator is hosted upon.
  DeviceComplexType device = 5 [
    (buf.validate.field).required = true
  ];
  // In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
  DeviceComplexType client = 6;
  // In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
  DeviceComplexType server = 7;
  // Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
  DoorType door = 8;
  // Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the <Id> element in preference to any other user identifier.
  UserComplexType user = 9;
  // In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the <User> element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the <Id> element in preference to any other user identifier.
  UserComplexType run_as = 10;
  // Indicates whether the event was produced as a result of direct interaction, i.e. user was directly responsible for the event being created and was present at the time it was created. This element will be false where an event may have been created after the user was present, e.g. where scheduled processing is performed or an action has been queued for execution later, as is the case when some form of asynchronous processing is used. All interactive events must provide the Id for the user. Can be omitted if true as this is the default.
  bool interactive = 11;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 12 [
    (buf.validate.field).repeated = {
      min_items: 0
    }
  ];

  // Physical access events are generated by doors, barriers, turnstiles, etc. This type provides details of the door and its location and access control properties.
  message DoorType {
    // The site-wide name/identifier for the door.
    string name = 1 [
      (buf.validate.field).required = true
    ];
    // A user readable description of the door.
    string description = 2;
    // Describes the geographic location of the device.
    LocationComplexType location = 3 [
      (buf.validate.field).required = true
    ];
    // It is assumed that doors only allow for a single authenticated person to enter at a time, e.g. in the case of turnstiles. Where single entry is true this element can be omitted as this is expected by default.
    bool single_entry = 4;
    // This element is used to tell us to remove all access zones from the list of currently accessible zones for a user before adding a new one. This is the case whenever a user moves from one zone to another and loses all possible access to the zones they were previously in, i.e. they would need to re-authenticate to regain access rather than just pass back through the door. If not specified this element is considered to be true as most movement through a door removes access to previously accessible zones. Removal of all access zones provides anti pass-back protection.
    bool remove_all = 5;
    // A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
    AddAccessType add_access = 6 [
      (buf.validate.field).required = true
    ];
  
    // A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
    message AddAccessType {
      // An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
      repeated string access_zone = 1 [
        (buf.validate.field).repeated = {
          min_items: 1
        }
      ];
    }
  }
}
