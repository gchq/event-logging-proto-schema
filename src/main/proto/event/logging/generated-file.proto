// event_logging.proto at 0:0
syntax = "proto3";
package event.logging;

option java_multiple_files = true;
option java_package = "org.entur.protobuf";

// Describes a set of groups used to control access to protectively marked items.
message AccessControlGroupsComplexType {
  // The name of an access control group that is used to control access to protectively marked items. E.g. 'HR', 'Auditors', 'Management', etc.
  repeated string access_control_group = 1;
}
// Type that describes relationships between different events. For example in an asynchronous search the viewing of the results of the search may be a separate event from the execution of the query. In this instance the view event would be a child of the execution event.
message ActivityComplexType {
  // The unique identifier of the event that is being referenced. This will be the value of Event/EventSource/EventId on the referenced event. E.g. where an event with Event/EventSource/EventId=101 is a child of an event with Event/EventSource/EventId=99, the value in this element would be 99.
  string id = 1;
  // A descriptive name for the referenced event.
  string name = 2;
  // The details of the event that is the parent of this referenced event. E.g. if event C is a child of event B which is a child of event A, this element would record an Id of A.
  ActivityComplexType parent = 3;
}
// Type that describes and alert of some kind, e.g. an alert generated by an intrusion detection system, malware scanner, virus scanner, etc.
message AlertComplexType {
  // The type of alert that has been fired, e.g. Error, Malware, etc.
  AlertTypeSimpleType type = 1;
  // The severity of the alert.
  AlertSeveritySimpleType severity = 2;
  // The priority of the alert.
  AlertPrioritySimpleType priority = 3;
  // The name of the event or rule that fired or vulnerability or malware that has been scanned for or found.
  string subject = 4;
  // The descriptive message for the alert.
  string description = 5;
  // Information about an IDS generated event.
  IDSType i_d_s = 6;
  // Type that describes a threat identified by an anti-malware scanner.
  AntiMalwareThreatComplexType malware = 7;
  // A type to describe part of a computer network or some activity on a network.
  NetworkComplexType network = 8;
  // Any events to do with monitoring the status of files should use this element.
  ChangeType change = 9;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 10;

  // Information about an IDS generated event.
  message IDSType {
    // The type of IDS event or rule that fired.
    string rule = 1;
    // The source network device involved in the IDS event.
    NetworkLocationComplexType source = 2;
    // The destination network device involved in the IDS event.
    NetworkLocationComplexType destination = 3;
    // Details about the payload being transmitted between the source and destination devices.
    MultiObjectComplexType payload = 4;
  }
  // Information about an IDS generated event.
  message ChangeType {
    // The action performed by the file monitor, e.g. starting to scan files for changes, or the detection of a file change.
    ChangeActionSimpleType action = 1;
    // Describes the last known state of the file before it was altered.
    MultiObjectComplexType before = 2;
    // Describes the new state of the file now it has changed.
    MultiObjectComplexType after = 3;
    // The file monitoring rule that was fired to generate this event.
    string rule = 4;
  }
}
// The priorities that can be assigned to an alert, e.g. an error in a system or the alert from the detection of malware. They indicate how important it is to resolve or mitigate the alert.
enum AlertPrioritySimpleType {
  // Default
  ALERT_PRIORITY_SIMPLE_TYPE_UNSPECIFIED = 0;
  ALERT_PRIORITY_SIMPLE_TYPE_NONE = 1;
  ALERT_PRIORITY_SIMPLE_TYPE_LOW = 2;
  ALERT_PRIORITY_SIMPLE_TYPE_NORMAL = 3;
  ALERT_PRIORITY_SIMPLE_TYPE_HIGH = 4;
  ALERT_PRIORITY_SIMPLE_TYPE_URGENT = 5;
  ALERT_PRIORITY_SIMPLE_TYPE_IMMEDIATE = 6;
}
// The severities that can be assigned to an alert, e.g. an error in a system or the alert from the detection of malware. They indicate how far-reaching the symptoms of the cause of the alert are.
enum AlertSeveritySimpleType {
  // Default
  ALERT_SEVERITY_SIMPLE_TYPE_UNSPECIFIED = 0;
  ALERT_SEVERITY_SIMPLE_TYPE_INFO = 1;
  ALERT_SEVERITY_SIMPLE_TYPE_MINOR = 2;
  ALERT_SEVERITY_SIMPLE_TYPE_MAJOR = 3;
  ALERT_SEVERITY_SIMPLE_TYPE_CRITICAL = 4;
}
// The types of alert that can be fired, for example errors in an application log, malware or antivirus detection alerts.
enum AlertTypeSimpleType {
  // Default
  ALERT_TYPE_SIMPLE_TYPE_UNSPECIFIED = 0;
  ALERT_TYPE_SIMPLE_TYPE_VULNERABILITY = 1;
  ALERT_TYPE_SIMPLE_TYPE_IDS = 2;
  ALERT_TYPE_SIMPLE_TYPE_MALWARE = 3;
  ALERT_TYPE_SIMPLE_TYPE_NETWORK = 4;
  ALERT_TYPE_SIMPLE_TYPE_CHANGE = 5;
  ALERT_TYPE_SIMPLE_TYPE_ERROR = 6;
  ALERT_TYPE_SIMPLE_TYPE_OTHER = 7;
}
// All of the enclosed items are to be treated as being AND together.
message AndComplexType {
  repeated ChoiceWrapper_AndComplexType choice_wrapper = 1;

  message ChoiceWrapper_AndComplexType {
    // Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
    TermComplexType term = 1;
    // All of the enclosed items are to be treated as being AND'd together.
    AndComplexType and = 2;
    // All of the enclosed items are to be treated as being OR'd together.
    OrComplexType or = 3;
    // The enclosed structure operators and terms are negated.
    NotComplexType not = 4;
  }
}
// Type that describes a threat identified by an anti-malware scanner.
message AntiMalwareThreatComplexType {
  // Describes the anti-malware product used.
  SoftwareComplexType product = 1;
  // Describes the anti-malware signature used.
  SignatureType signature = 2;
  // Describes the threat if one has been found.
  ThreatType threat = 3;
  // Describes the infected item if one has been found.
  MultiObjectComplexType infected = 4;

  // Describes the anti-malware signature used.
  message SignatureType {
    // The version of the signature.
    string version = 1;
    // When the signature was last updated.
    uint64 updated = 2;
  }
  // Describes the threat if one has been found.
  message ThreatType {
    // The category of the threat, e.g. Worm, Virus, etc.
    ThreatCategorySimpleType category = 1;
    // The name of the threat, e.g. a virus name.
    string name = 2;
  }
}
// This type is used to contain any content conforming to an agreed format/specification that is defined outside this XML Schema.
message AnyContentComplexType {
  // String to describe the format type and specification of the content, e.g. JSON or XML. The valid values are defined outside this XML Schema.
  string content_type = 1;
  // Defines the version of data structure specification.
  string version = 2;
  string any = 3;
}
// The stages in an approval workflow. E.g. when presenting a document for review before publishing.
enum ApprovalActionSimpleType {
  // Default
  APPROVAL_ACTION_SIMPLE_TYPE_UNSPECIFIED = 0;
  APPROVAL_ACTION_SIMPLE_TYPE_APPROVE = 1;
  APPROVAL_ACTION_SIMPLE_TYPE_ACCEPT = 2;
  APPROVAL_ACTION_SIMPLE_TYPE_REJECT = 3;
  APPROVAL_ACTION_SIMPLE_TYPE_REQUEST_APPROVAL = 4;
  APPROVAL_ACTION_SIMPLE_TYPE_OTHER = 5;
}
// This type describes an approval (or rejection) event in a workflow, e.g a workflow where a more privileged user is required to approve the work of another user.
message ApprovalComplexType {
  // The action that the approval event is capturing, e.g. Approve, Reject, etc.
  ApprovalActionSimpleType action = 1;
  // An identifier associated with the approval step/process.
  string id = 2;
  // The object that this approval step (or request for approval) relates to, e.g. the document being approved.
  MultiObjectComplexType subject = 3;
  // The user(s) that requested the approval, e.g. jbloggs requesting approval from a manager for his finance report.
  RequestorsType requestors = 4;
  // The user(s) that are providing the approval, e.g. a user requesting approval from manager fsmith for his finance report.
  ApproversType approvers = 5;
  // The reason for the approval/rejection/request, e.g. why the approval was rejected.
  string reason = 6;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 7;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 8;

  // The user(s) that requested the approval, e.g. jbloggs requesting approval from a manager for his finance report.
  message RequestorsType {
    // A user that requested the approval, e.g. jbloggs requesting approval from a manager for his finance report.
    repeated UserComplexType requestor = 1;
  }
  // The user(s) that are providing the approval, e.g. a user requesting approval from manager fsmith for his finance report.
  message ApproversType {
    // The user that is providing the approval, e.g. a user requesting approval from manager fsmith for his finance report.
    repeated UserComplexType approver = 1;
  }
}
// This type describes the association or linking of a number of objects. For example, it may describe the link between two web resources.
message AssociationComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The objects that have some form of link or association
  MultiObjectComplexType objects = 31;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 32;
}
// The types of action in an authentication step.
enum AuthenticateActionSimpleType {
  // Default
  AUTHENTICATE_ACTION_SIMPLE_TYPE_UNSPECIFIED = 0;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_LOGON = 1;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_LOGOFF = 2;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_CHANGE_PASSWORD = 3;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_RESET_PASSWORD = 4;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_SCREEN_LOCK = 5;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_SCREEN_UNLOCK = 6;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_ACCOUNT_LOCK = 7;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_ACCOUNT_UNLOCK = 8;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_RECONNECT = 9;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_DISCONNECT = 10;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_CONNECT = 11;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_ELEVATE_PRIVILEGE = 12;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_READ_TOKEN = 13;
  AUTHENTICATE_ACTION_SIMPLE_TYPE_OTHER = 14;
}
// Used to record authentication events such as logon and logoff. All authentication events that originate from a client device should record details of the client device in the event source.
message AuthenticateComplexType {
  // The authentication action that was performed, e.g. Logon, Logoff.
  AuthenticateActionSimpleType action = 1;
  // This indicates the type of logon. For example, Microsoft Windows has several logon types such as Interactive (logon to domain), RemoteInteractive (logon to remote machine), CachedInteractive (logon to local machine using cached domain information due to loss of network).
  AuthenticateLogonTypeSimpleType logon_type = 2;
  // The user who the authentication action relates to.
  UserComplexType user = 3;
  // Where a device authenticates with another device, this is the device that initiates the authentication action.
  DeviceComplexType device = 4;
  // The group the authentication action relates to.
  GroupComplexType group = 5;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  AuthenticateOutcomeComplexType outcome = 11;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 12;
}
// The types of session that a logon event will relate to.
enum AuthenticateLogonTypeSimpleType {
  // Default
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_UNSPECIFIED = 0;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_INTERACTIVE = 1;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_NETWORK = 2;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_BATCH = 3;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_SERVICE = 4;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_UNLOCK = 5;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_NETWORK_CLEARTEXT = 6;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_NEW_CREDENTIALS = 7;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_REMOTE_INTERACTIVE = 8;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_CACHED_INTERACTIVE = 9;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_CACHED_REMOTE_INTERACTIVE = 10;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_CACHED_UNLOCK = 11;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_PROXY = 12;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_PHYSICAL_ACCESS = 13;
  AUTHENTICATE_LOGON_TYPE_SIMPLE_TYPE_OTHER = 14;
}
// Used to describe the outcome of an authentication event, including the reason for any failure.
message AuthenticateOutcomeComplexType {
  // If the outcome of an event was successful then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.
  bool success = 1;
  // If an action was permitted then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.
  bool permitted = 2;
  // A description of the authorisation service that was used to decide if the action was permitted.
  AuthServiceType auth_service = 3;
  // Human readable text that describes the outcome.
  string description = 4;
  // An enumeration used to describe the reason why authentication failed.
  AuthenticateOutcomeReasonSimpleType reason = 21;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 22;
}
// The types of outcome from an authentication event.
enum AuthenticateOutcomeReasonSimpleType {
  // Default
  AUTHENTICATE_OUTCOME_REASON_SIMPLE_TYPE_UNSPECIFIED = 0;
  AUTHENTICATE_OUTCOME_REASON_SIMPLE_TYPE_INCORRECT_USERNAME_OR_PASSWORD = 1;
  AUTHENTICATE_OUTCOME_REASON_SIMPLE_TYPE_INCORRECT_USERNAME = 2;
  AUTHENTICATE_OUTCOME_REASON_SIMPLE_TYPE_INCORRECT_PASSWORD = 3;
  AUTHENTICATE_OUTCOME_REASON_SIMPLE_TYPE_EXPIRED_CERTIFICATE = 4;
  AUTHENTICATE_OUTCOME_REASON_SIMPLE_TYPE_REVOKED_CERTIFICATE = 5;
  AUTHENTICATE_OUTCOME_REASON_SIMPLE_TYPE_INCORRECT_CA = 6;
  AUTHENTICATE_OUTCOME_REASON_SIMPLE_TYPE_EXPIRED_CA = 7;
  AUTHENTICATE_OUTCOME_REASON_SIMPLE_TYPE_ACCOUNT_LOCKED = 8;
  AUTHENTICATE_OUTCOME_REASON_SIMPLE_TYPE_ACCOUNT_NOT_VALID_FOR_LOGIN_TYPE = 9;
  AUTHENTICATE_OUTCOME_REASON_SIMPLE_TYPE_OTHER = 10;
}
// The type of action in an authorisation event, e.g. the modification of authorisation permissions/groups or the request to be authorised.
enum AuthorisationSimpleType {
  // Default
  AUTHORISATION_SIMPLE_TYPE_UNSPECIFIED = 0;
  // A request to be authorised to do a subsequent action.
  AUTHORISATION_SIMPLE_TYPE_REQUEST = 1;
  // The action of modifying the permissions/rules/groups involved in an authorisation process.
  AUTHORISATION_SIMPLE_TYPE_MODIFY = 2;
}
// Describes event actions related to account management such as adding and removing user and system accounts. It can also describe event actions related to the request for authorisation, e.g. when a user is checked against a set of permissions for the data/entities they are trying to access.
message AuthoriseComplexType {
  repeated ChoiceWrapper_AuthoriseComplexType choice_wrapper = 1;
  // The type of the event action, e.g. a modification to authorisation rules/groups or the request to be authorised.
  AuthorisationSimpleType action = 11;
  // A list of roles or permissions that have been added to an object.
  AddGroupsType add_groups = 12;
  // A list of roles or permissions that have been removed from an object.
  RemoveGroupsType remove_groups = 13;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 14;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 15;

  message ChoiceWrapper_AuthoriseComplexType {
    // Describes the association or link between two or more entities, e.g. the link between two web resources.
    AssociationComplexType association = 1;
    // Describes a banner or message presented to a user, e.g. an acceptable use policy message shown on system login.
    BannerComplexType banner = 2;
    // Describes part of a chat session between a user and one or more other users, e.g. in an instant messaging application.
    ChatComplexType chat = 3;
    // Describes the configuration of entity, e.g. it can be used to describe the update to the configuration of a network device.
    ConfigurationComplexType configuration = 4;
    // Structure used to describe a criteria used to filter or limit the scope of something, e.g. in a search, view, update or delete event.
    CriteriaComplexType criteria = 5;
    // Describes a document that may be stored electronically or in hard-copy form.
    DocumentComplexType document = 6;
    // Describes an email sent from one user to one or more recipients.
    EmailComplexType email = 7;
    // A file object, e.g. a text file on file system
    FileComplexType file = 8;
    // A folder object, e.g. a directory or folder on file system.
    FolderComplexType folder = 9;
    // A group entity, e.g. a user group, an access control group or a named group of some kind that ties together a collection of entities/objects of some kind.
    GroupComplexType group = 10;
    // Describes the details of a chat event within a chat room or group.
    GroupChatComplexType group_chat = 11;
    // A generic object or entity that cannot be described using any of the other more specific object types.
    ObjectComplexType object = 12;
    // A set of search results from a query where the results are viewed or interacted with in a separate event to the execution of the query. E.g. for long-running queries where the results are stored for later viewing/processing. The Search schema action should be used to describe the event for the execution of the search. Query/Id or Query/Name can be used to associate the results event with the query event.
    SearchResultsComplexType search_results = 13;
    // A shortcut to another file/object, such as a Windows Shortcut or linux symbolic link.
    ShortcutComplexType shortcut = 14;
    // A user entity which may represent a person or some form of non-human processing user.
    UserComplexType user = 15;
    // This is used to describe the session used when viewing another user's session, e.g. screen sharing or remote assistance type activities.
    VirtualSessionComplexType virtual_session = 16;
    // Describes a Voice Over Internet Protocol call.
    VOIPComplexType v_o_i_p = 17;
    // This is used to describe a resource within a website or web application, such as an HTML file, image file or script, along with the details of that resource such as size or response codes.  It can represent both successful and failed access to the resource object.
    ResourceComplexType resource = 18;
  }
  // A list of roles or permissions that have been added to an object.
  message AddGroupsType {
    // A role or permission that has been added to an object.
    repeated GroupComplexType group = 1;
  }
  // A list of roles or permissions that have been removed from an object.
  message RemoveGroupsType {
    // A role or permission that has been removed from an object.
    repeated GroupComplexType group = 1;
  }
}
// Structure used to describe a banner presented to a user. Typically, it displays legal information relating to the system.
message BannerComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // If the text of the banner is versioned then this records the version of the banner that is displayed to the user.
  string version = 31;
  // The message text displayed on the banner.
  string message = 32;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 33;
}
// Describes the details of a chat event, e.g. an instance message chat message from one user to another.
message BaseChatComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The ID for the chat session.
  string session_id = 31;
  // The name of the chat room or group.
  string room = 32;
  // The user that initiated the chat event.
  UserComplexType from = 33;
  // The user(s) that the chat event (or message) is directed at.
  repeated UserComplexType to = 34;
  // The chat message or content sent by the user.
  string content = 35;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 36;
}
// A base type to describe a file object, e.g. a text file on file system
message BaseFileComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The full system file path.
  string path = 31;
  // The creation time of the file.
  uint64 created = 32;
  // The modification time of the file.
  uint64 modified = 33;
  // The last access time of the file.
  uint64 accessed = 34;
  // The size of the file in bytes.
  uint32 size = 35;
  // Optional description of the media that the file exists on or that the file is being written to.
  MediaComplexType media = 36;
  // Describes the output of a hash function and the type of has function used.
  HashComplexType hash = 37;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 38;
}
// A base type to describe part of a computer network or some activity on a network.
message BaseNetworkComplexType {
  // The source device that is attempting the network action.
  NetworkLocationComplexType source = 1;
  // The destination device for the network action.
  NetworkLocationComplexType destination = 2;
  // The name of the process responsible for the network action.
  string process_name = 3;
  // If the network action is related to message transfer from one place to another then this element describes the message.
  MultiObjectComplexType payload = 4;
  // The network boundary filter rule that was fired to generate this event.
  string rule = 5;
}
// A base type for describing some kind of object or entity.
message BaseObjectComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
}
// Contains an item of data, e.g. a file, document, etc, and describes the outcome of the event as well as providing for additional event data that does not fit into the item of data element.
message BaseObjectOutcomeComplexType {
  repeated ChoiceWrapper_BaseObjectOutcomeComplexType choice_wrapper = 1;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 11;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 12;
}
// Describes the outcome of an event whether it is successful and whether it was permitted.
message BaseOutcomeComplexType {
  // If the outcome of an event was successful then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.
  bool success = 1;
  // If an action was permitted then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.
  bool permitted = 2;
  // A description of the authorisation service that was used to decide if the action was permitted.
  AuthServiceType auth_service = 3;
  // Human readable text that describes the outcome.
  string description = 4;
}
// The action performed by the file/directory monitor, e.g. starting to scan files for changes, or the detection of a file change.
enum ChangeActionSimpleType {
  // Default
  CHANGE_ACTION_SIMPLE_TYPE_UNSPECIFIED = 0;
  // The file/directory monitor is started.
  CHANGE_ACTION_SIMPLE_TYPE_START_SCAN = 1;
  // The file/directory monitor is stopped.
  CHANGE_ACTION_SIMPLE_TYPE_STOP_SCAN = 2;
  // A new file had been added to the monitored directory.
  CHANGE_ACTION_SIMPLE_TYPE_FILE_ADDED = 3;
  // A file has been removed from the monitored directory.
  CHANGE_ACTION_SIMPLE_TYPE_FILE_REMOVED = 4;
  // A monitored file has been modified.
  CHANGE_ACTION_SIMPLE_TYPE_FILE_MODIFIED = 5;
}
// Describes the details of a chat event, e.g. an instance message chat message from one user to another.
message ChatComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The ID for the chat session.
  string session_id = 31;
  // The name of the chat room or group.
  string room = 32;
  // The user that initiated the chat event.
  UserComplexType from = 33;
  // The user(s) that the chat event (or message) is directed at.
  repeated UserComplexType to = 34;
  // The chat message or content sent by the user.
  string content = 35;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 36;
}
// Describes the classification and access controls for an item such as a document, record, file, etc.
message ClassificationComplexType {
  // Optional full human-readable text of the protective marking that can combine the various elements in this Classification structure, e.g 'Commercial in Confidence'.
  string text = 1;
  // The originator or creator of the protectively marked item. The originator is described by an Organisation and optionally qualified by the organisation's Country.
  OrganisationComplexType originator = 2;
  // The custodian or owner of the protectively marked item. The custodian is responsible for the lifecycle of the marked item. The custodian is described by an Organisation and optionally qualified by the organisation's Country.
  OrganisationComplexType custodian = 3;
  // The classification of the protectively marked item. E.g. 'OFFICIAL', 'COMMERCIAL IN CONFIDENCE', 'CONFIDENTIAL', 'INTERNAL' etc.
  string classification = 4;
  // Additional descriptors or keywords to further qualify the Classification e.g. 'PERSONAL'
  DescriptorsType descriptors = 5;
  // The groups that a person must belong to AT LEAST ONE OF in order to be permitted to access the protectively marked item. E.g. 'HR' OR 'Auditors'.
  AccessControlGroupsComplexType or_groups = 6;
  // The groups that a person must belong to ALL OF in order to be permitted to access the protectively marked item. E.g. 'Sales' AND 'Management'.
  AccessControlGroupsComplexType and_groups = 7;
  // The nationalities of people permitted to access this protectively marked item. E.g. 'GBR', 'USA'
  PermittedNationalitiesType permitted_nationalities = 8;
  // The organisations permitted to access the protectively marked item.
  PermittedOrganisationsType permitted_organisations = 9;
  // Controls governing the onward handling of the protectively marked item
  DisseminationControlsType dissemination_controls = 10;
  // Describes the timescale and process for the disposal of the protectively marked item
  DispositionType disposition = 11;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 12;

  // Additional descriptors or keywords to further qualify the Classification e.g. 'PERSONAL'
  message DescriptorsType {
    // Descriptor or keyword to further qualify the Classification e.g. 'PERSONAL'
    repeated string descriptor = 1;
  }
  // The nationalities of people permitted to access this protectively marked item. E.g. 'GBR', 'USA'
  message PermittedNationalitiesType {
    // An ISO 3166 alpha-3 trigraph for a nationality permitted to view this protectively marked item. E.g. 'GBR'.
    repeated string nationality = 1;
  }
  // The organisations permitted to access the protectively marked item.
  message PermittedOrganisationsType {
    // An organisation permitted to access the protectively marked item. The PermittedOrganisation is described by an Organisation and optionally qualified by the organisation's country code.
    OrganisationComplexType permitted_organisation = 1;
  }
  // Controls governing the onward handling of the protectively marked item
  message DisseminationControlsType {
    // A policy or control governing the onward handling of a protectively marked item. E.g. ORIGINATOR_CONTROLLED
    repeated string dissemination_control = 1;
  }
  // Describes the timescale and process for the disposal of the protectively marked item
  message DispositionType {
    // Date/time that the disposition process must be enacted by
    uint64 date = 1;
    // The action to be taken on expiry of the disposition date. E.g. 'DELETE' to delete the item.
    string process = 2;
  }
}
// Describes the configuration of entity, e.g. it can be used to describe the update to the configuration of a network device.
message ConfigurationComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 31;
}
// The geographic coordinates of the location (i.e. the latitude/longitude).
message CoordinatesComplexType {
  // Geographic coordinate specifying the north/south position on the earth's surface, expressed as decimal degrees from the equator (0). -90 (South) to +90 (North).
  double latitude = 1;
  // Geographic coordinate specifying the east/west position on the earth's surface, expressed as decimal degrees from the Greenwich Meridian (0). -180 (West) to +180 (East).
  double longitude = 2;
}
// Describes an event action relating to copying data, files, documents, etc.
message CopyComplexType {
  // The source of the data being copied.
  MultiObjectComplexType source = 1;
  // The destination for the data being copied.
  MultiObjectComplexType destination = 2;
  // Used to determine if the copy was successful. If omitted it is assumed that the copy was successful and was permitted.
  CopyMoveOutcomeComplexType outcome = 3;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 4;
}
// Used to describe the outcome of a copy or move event, including the reason for any failure.
message CopyMoveOutcomeComplexType {
  // If the outcome of an event was successful then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.
  bool success = 1;
  // If an action was permitted then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.
  bool permitted = 2;
  // A description of the authorisation service that was used to decide if the action was permitted.
  AuthServiceType auth_service = 3;
  // Human readable text that describes the outcome.
  string description = 4;
  // Used to explain the reason for failure, e.g. Device full.
  CopyMoveOutcomeReasonSimpleType reason = 21;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 22;
}
// The types of reason for failure during copy or move operations.
enum CopyMoveOutcomeReasonSimpleType {
  // Default
  COPY_MOVE_OUTCOME_REASON_SIMPLE_TYPE_UNSPECIFIED = 0;
  COPY_MOVE_OUTCOME_REASON_SIMPLE_TYPE_DEVICE_FULL = 1;
  COPY_MOVE_OUTCOME_REASON_SIMPLE_TYPE_IO_ERROR = 2;
  COPY_MOVE_OUTCOME_REASON_SIMPLE_TYPE_INVALID_PATH = 3;
  COPY_MOVE_OUTCOME_REASON_SIMPLE_TYPE_PERMISSION_DENIED = 4;
  COPY_MOVE_OUTCOME_REASON_SIMPLE_TYPE_READ_ONLY = 5;
}
// Describes an event action relating to creating data, files, documents, etc.
message CreateComplexType {
  repeated ChoiceWrapper_BaseObjectOutcomeComplexType choice_wrapper = 1;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 11;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 12;
}
// Structure used to describe a criteria used for search, view, update or delete.
message CriteriaComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // A collection of Datasource definitions that are referenced by the criteria/query
  DataSourcesType data_sources = 31;
  // Structure used to describe the query associated with a search event.
  QueryComplexType query = 32;
  // Details of the page (or sub-set) of results actually displayed/returned to the user, if known at query time.
  ResultPageType result_page = 33;
  // The total number of results returned by the query, if known at query time. In situations where only a sub-set of results are displayed/returned to the user then this element represents the count of ALL results and ResultPage should be used to provide details of which results are actually viewed/returned by the user.
  uint32 total_results = 34;
  // Describes the results returned by the search if they are known at the time of the Search event (a synchronous search). If the results are not know at execution time (an asynchronous search) and will be viewed as part of a separate event then View/SearchResults can be used to model that event.
  MultiObjectComplexType results = 35;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 41;

  // A collection of Datasource definitions that are referenced by the criteria/query
  message DataSourcesType {
    // The name or path of one or more datasources or datasets that are used by a criteria/query, e.g. 'EuroVoc XML distribution' or 'hdfs://mynamenode:8020/datasets/hr/grades.xml'
    repeated string data_source = 1;
  }
  // Details of the page (or sub-set) of results actually displayed/returned to the user, if known at query time.
  message ResultPageType {
    // The number of pages/sets that make up the complete result set.
    uint32 total_pages = 1;
    // The maximum number of results that will be displayed per page. E.g. 10 results per page.
    uint32 per_page = 2;
    // The number of the page/set of results displayed/returned to the user, e.g. 3 out of 24 pages.
    uint32 page_number = 3;
    // The index of the first result in the page out of the full result set (inclusive), e.g. 11 (in the case of showing results 11-20 of 453)
    uint32 from = 4;
    // The index of the last result in the page out of the full result set (inclusive), e.g. 20 (in the case of showing results 11-20 of 453)
    uint32 to = 5;
  }
}
// Describes any other event data that does not fit into a schema element but may be useful for the purpose of audit. The recursive nature of this type means it can be used to model a tree of data.
message DataComplexType {
  // The name of the data item. The taxonomy of the data items may be defined by the system sending the events or defined centrally for all systems to use.
  string name = 1;
  // The simple string value for the data item.
  string value = 2;
  // A child data item that may itself have descendants.
  repeated DataComplexType data = 3;
}
// Describes an event action relating to deleting data, files, documents, etc.
message DeleteComplexType {
  repeated ChoiceWrapper_BaseObjectOutcomeComplexType choice_wrapper = 1;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 11;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 12;
}
// Describes a device, e.g. a workstation, server or item of network infrastructure.
message DeviceComplexType {
  // Identifier used to uniquely identify the device within the organisation's asset register/system. Also, this can be used to identify a device that does not have HostName/IPAddress/MACAddress.
  string id = 1;
  // A descriptive name of the device, e.g. 'Sun Fire X4600', 'HP LaserJet 4+'.
  string name = 2;
  // The security classification associated with this device.
  ClassificationComplexType classification = 3;
  // The network host name of the device, e.g. someserver.somenet.org.uk. Ideally this field should always contain a fully qualified DNS name of the host.
  string host_name = 4;
  // The network IP address of the device, e.g. 192.168.0.3. Ideally this should always be supplied.
  string i_p_address = 5;
  // The Media Access Control (MAC) address of the device.
  string m_a_c_address = 6;
  // The network port that is being used on the device, e.g. 443.
  int32 port = 7;
  // Describes the geographic location of the device.
  LocationComplexType location = 8;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 9;
}
// Describes a document that may be stored electronically or in hard-copy form.
message DocumentComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The title or name of the document.
  string title = 31;
  // A unique code or ID that can be used to reference the document.
  string reference = 32;
  // The version or iteration of the document, e.g. v13 or v1.3.
  string version = 33;
  // The path that defines the location of the document on a file system or document management system, e.g. '/some/path/to/the/document.pdf'
  string path = 34;
  // The date that the document was created.
  uint64 created = 35;
  // The date that the document was last modified.
  uint64 modified = 36;
  // The date that the document was last accessed.
  uint64 accessed = 37;
  // The number of pages in the document.
  uint32 pages = 38;
  // The size of the document in bytes.
  uint32 size = 39;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 40;
}
// Describes an email sent from one user to one or more recipients.
message EmailComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The user that sent the email.
  UserComplexType from = 31;
  // The user(s) and/or distribution group(s) that the email was sent to.
  repeated UserComplexType to = 32;
  // The user(s) and/or distribution group(s) that the email was CC'd (carbon copied) to.
  repeated UserComplexType cc = 33;
  // The user(s) and/or distribution group(s) that the email was BCC'd (blind carbon copied) to.
  repeated UserComplexType bcc = 34;
  // The subject text of the email.
  string subject = 35;
  // The content of the email, i.e. the message body. This may be plain text or some form of rich text like HTML.
  string content = 36;
  // The MIME (Multipurpose Internet Mail Extensions) type of the email body, i.e. the format of the message body, e.g. 'text/plain' or 'text/html'.
  string mime_type = 37;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 38;
}
// This type can be used to create relationships between different events, i.e. where one event is the child of another.
message EventChainComplexType {
  // The event that this event has a relationship to or is referenced by.
  ActivityComplexType activity = 1;
}
// This type describes the details of what happened in the event: the type of the event, why it happened and the event action.
message EventDetailComplexType {
  // A name/code/ID to uniquely identify the logical event type within the service providing the events. E.g. a Windows eventId (i.e. representing 'Failed logon', 'Change password attempt', etc.) or for application logging: SaveRecord, ViewUserRecord, ViewSearchResults, etc. The granularity will depend on the application. Typically, the number of unique TypeIds will be in the 10s. Note, the values of the TypeId are not meant to be globally consistent, they will only be relevant within that service providing the events.
  string type_id = 1;
  // Some human-readable descriptive text for the event type.
  string description = 2;
  // The purpose/justification assigned to this event for user actions that are required to be justified for reasons of corporate policy, e.g. transferring data to removable media, viewing personnel records or making a high value payment.
  PurposeComplexType purpose = 3;
  // Used to record authentication events such as logon and logoff. Also used for recording authentication by physical access controls, e.g. doors/turnstiles. All authentication events that originate from a client device should record details of the client device in the event source.
  AuthenticateComplexType authenticate = 4;
  // All events related to account management such as adding and removing user and system accounts.
  AuthoriseComplexType authorise = 5;
  // Any events related to searching for data should use this element.
  SearchComplexType search = 6;
  // All events related to copying data, files, documents, etc. should use this element.
  CopyComplexType copy = 7;
  // All events related to moving data should use this element.
  MoveComplexType move = 8;
  // All events related to creating data should use this element.
  CreateComplexType create = 9;
  // All events related to viewing data should use this element. Note that viewing data is subtly different from reading data. This event is to be used when data is displayed to an end user and not for data read by an application.
  ViewComplexType view = 10;
  // All events related to importing data should use this element. An import could include any batch insert of data from an external source or uploading a file.
  ImportComplexType import_field = 11;
  // All events related to exporting data should use this element. An export could include activities such as downloading data from an application or generating a report.
  ExportComplexType export = 12;
  // All events related to updating data should use this element.
  UpdateComplexType update = 13;
  // All events related to deleting data should use this element.
  DeleteComplexType delete = 14;
  // Whenever processes such as applications or services are started, stopped etc., this should be recorded in this element. It also covers the running of batch processes or jobs.
  ProcessComplexType process = 15;
  // All events related to printing should use this element.
  PrintComplexType print = 16;
  // Details about installation of either hardware or software.
  InstallComplexType install = 17;
  // Details about removal of either hardware or software.
  UninstallComplexType uninstall = 18;
  // Any events related to network traffic, filtering or access should be recorded using this element.
  NetworkEventActionComplexType network = 19;
  // An alert event according to the system producing the event, e.g. an event raised when an anti-malware system finds malware.
  AlertComplexType alert = 20;
  // Used for send events that are at a higher level than a network/send event, e.g. sending an email
  SendComplexType send = 21;
  // Used for receive events that are at a higher level than a network/receive event, e.g. receiving an email
  ReceiveComplexType receive = 22;
  // Any events relating to the action of approving/accepting or rejecting something, e.g. an approval step in a workflow, accepting a license agreement, or acceptable use policy. The event may relate to one user approving the work/action of another user or a single user accepting something.
  ApprovalComplexType approval = 23;
  // This element should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
  UnknownType unknown = 24;

  // This type should be used were the type of the event cannot be described by any of the other event actions, or the event type is unknown.
  message UnknownType {
    // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
    repeated DataComplexType data = 1;
  }
}
// Details where the event came from, i.e. what generator created the event and on what device.
message EventSourceComplexType {
  // A unique identifier known to the source system that created the event. This identifier may not be unique outside the source system. It can be used for linking related events within the source system, e.g. where an event is part of a chain of events or is child of another event. Linking of events can be recorded with the Event/EventChain element.
  string event_id = 1;
  // Where an event is part of a session the identifier for that session can be recorded here to allow subsequent grouping of events for the same session. The SessionId should be a unique identifier for the session within the source system. It is not expected that the SessionId have meaning or be unique outside the source system.
  string session_id = 2;
  // The system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
  SystemComplexType system = 3;
  // The thing that generated the event. This could be the name of an application, service or OS entity. Multiple devices may host the same generator, e.g. many copies of the same OS. The event type within the event description will describe an event that is unique to the generator, i.e. the generator is treated as a namespace for event type ids.
  string generator = 4;
  // A description of the device that the event generator is hosted upon.
  DeviceComplexType device = 5;
  // In situations where an event has been created as a result of an interaction with a client device, the client should be recorded. This will be the case for web applications that are responding to input from users with active sessions. All authentication events that originate from a connected client should populate this element.
  DeviceComplexType client = 6;
  // In situations where an event has been created as a result of an interaction with a server device, the server should be recorded.
  DeviceComplexType server = 7;
  // Physical access events are generated by doors, barriers, turnstiles, etc. This element provides details of the door and its location and access control properties.
  DoorType door = 8;
  // Where events are created as a result of a user action or within the context of a user account, the user should be recorded. To achieve this it may be necessary to map the user identifier in an application to a common user identifier when populating this element. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the <Id> element in preference to any other user identifier.
  UserComplexType user = 9;
  // In some cases an account may switch to another account in order to run a process or perform a privileged action, e.g. use of sudo. Where this happens the <User> element should still refer to the real user and this element should indicate what the temporary user was when the event was created, e.g. root. This is also often used when a system user (processing account) executes scheduled jobs on behalf of the real user that scheduled the job. Where an identifier exists that is unique across the organisation, such as a distinguished name (User DN) from a certificate authority or directory service, then this should be used in the <Id> element in preference to any other user identifier.
  UserComplexType run_as = 10;
  // Indicates whether the event was produced as a result of direct interaction, i.e. user was directly responsible for the event being created and was present at the time it was created. This element will be false where an event may have been created after the user was present, e.g. where scheduled processing is performed or an action has been queued for execution later, as is the case when some form of asynchronous processing is used. All interactive events must provide the Id for the user. Can be omitted if true as this is the default.
  bool interactive = 11;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 12;

  // Physical access events are generated by doors, barriers, turnstiles, etc. This type provides details of the door and its location and access control properties.
  message DoorType {
    // The site-wide name/identifier for the door.
    string name = 1;
    // A user readable description of the door.
    string description = 2;
    // Describes the geographic location of the device.
    LocationComplexType location = 3;
    // It is assumed that doors only allow for a single authenticated person to enter at a time, e.g. in the case of turnstiles. Where single entry is true this element can be omitted as this is expected by default.
    bool single_entry = 4;
    // This element is used to tell us to remove all access zones from the list of currently accessible zones for a user before adding a new one. This is the case whenever a user moves from one zone to another and loses all possible access to the zones they were previously in, i.e. they would need to re-authenticate to regain access rather than just pass back through the door. If not specified this element is considered to be true as most movement through a door removes access to previously accessible zones. Removal of all access zones provides anti pass-back protection.
    bool remove_all = 5;
    // A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
    AddAccessType add_access = 6;
  
    // A list of access zones that have been added by this event assuming it is successful. For example if a person successfully enters a building at door A, the system then adds the access zone for room X within that building which ensures the person must have correctly entered the building at door A before being able to access room X.
    message AddAccessType {
      // An area within a building that is accessible only via an authenticated access method, e.g. a turnstile or door with an access control system.
      repeated string access_zone = 1;
    }
  }
}
// Describes the time the event was created.
message EventTimeComplexType {
  // This element contains information about the time the event was created.
  uint64 time_created = 1;
  // This is an optional element to be used to indicate the time source that the event creation time has been synchronised with. In most circumstances it is assumed that the event time has been synchronised with the corporate time service where the generating device resides so the inclusion of this element is not required.
  DeviceComplexType time_source = 2;
}
// The root element that contains multiple Event elements.
message EventsType {
  // The version of the schema that this document conforms to.
  VersionSimpleType version = 1;
  // This element contains data relating to the sharing of a set of events between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
  AnyContentComplexType sharing_data = 2;
  // A single event that has occurred and been recorded.
  repeated EventType event = 3;

  // A single event that has occurred and been recorded.
  message EventType {
    // This element can be used to supply any metadata relating to the event as long as it conforms to an allowed format/specification (defined outside this XML Schema).
    repeated AnyContentComplexType meta = 1;
    // The classification for the event.
    ClassificationComplexType classification = 2;
    // This element contains data relating to the sharing of an event between different systems or organisations. The data contained within this element will confirm to a specification defined outside of this schema.
    AnyContentComplexType sharing_data = 3;
    // This element contains information about the time the event was created.
    EventTimeComplexType event_time = 4;
    // This element details where the event came from, i.e. what generator created the event and on what device.
    EventSourceComplexType event_source = 5;
    // This element describes the details of what happened in the event: the type of the event, why it happened and the event action.
    EventDetailComplexType event_detail = 6;
    // This element can be used to create relationships between different events, i.e. where one event is the child of another.
    EventChainComplexType event_chain = 7;
    // Any other event data that does not fit into a schema element but may be useful for the purpose of audit. Can also be used for appending data about the event after it has been received or processed, e.g. for recording details relating to the processing of the event such as the feed name.
    repeated DataComplexType data = 8;
  }
}
// Captures data relevant to an export operation.
message ExportComplexType {
  // The source of the data being exported.
  MultiObjectComplexType source = 1;
  // The destination for the data being exported.
  MultiObjectComplexType destination = 2;
  // Used to determine if the export was successful. If omitted it is assumed that the export was successful and was permitted.
  OutcomeComplexType outcome = 3;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 4;
}
// A type to describe a file object, e.g. a text file on file system
message FileComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The full system file path.
  string path = 31;
  // The creation time of the file.
  uint64 created = 32;
  // The modification time of the file.
  uint64 modified = 33;
  // The last access time of the file.
  uint64 accessed = 34;
  // The size of the file in bytes.
  uint32 size = 35;
  // Optional description of the media that the file exists on or that the file is being written to.
  MediaComplexType media = 36;
  // Describes the output of a hash function and the type of has function used.
  HashComplexType hash = 37;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 38;
}
// Describes a folder object, e.g. a directory or folder on file system.
message FolderComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The full system file path.
  string path = 31;
  // The creation time of the file.
  uint64 created = 32;
  // The modification time of the file.
  uint64 modified = 33;
  // The last access time of the file.
  uint64 accessed = 34;
  // The size of the file in bytes.
  uint32 size = 35;
  // Optional description of the media that the file exists on or that the file is being written to.
  MediaComplexType media = 36;
  // Describes the output of a hash function and the type of has function used.
  HashComplexType hash = 37;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 38;
}
// Describes the details of a chat event within a chat room or group.
message GroupChatComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The ID for the chat session.
  string session_id = 31;
  // The name of the chat room or group.
  string room = 32;
  // The user that initiated the chat event.
  UserComplexType from = 33;
  // The user(s) that the chat event (or message) is directed at.
  repeated UserComplexType to = 34;
  // The chat message or content sent by the user.
  string content = 35;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 36;
}
// A group entity, e.g. a user group, an access control group or a named group of some kind that ties together a collection of entities/objects of some kind.
message GroupComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 31;
}
// Describes a collection of group entities, e.g. user groups or access control groups.
message GroupsComplexType {
  // One or more group entities, e.g. user groups or access control groups.
  repeated GroupComplexType group = 1;
}
// Used to describe a hardware item that may be added or removed from a system.
message HardwareComplexType {
  // The type of hardware, e.g. hard disk drive.
  HardwareTypeSimpleType type = 1;
  // A unique identifier for the piece of hardware, e.g. an asset number.
  string id = 2;
  // A friendly name for the hardware, e.g. a name that has been defined in an asset management or device monitoring system.
  string name = 3;
  // The model name as defined by the manufacturer.
  string model = 4;
  // The manufacturer of the piece of hardware.
  string manufacturer = 5;
  // The capacity of the device in bytes.
  uint32 capacity = 6;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 7;
}
// The types of hardware that can be added or removed from a system.
enum HardwareTypeSimpleType {
  // Default
  HARDWARE_TYPE_SIMPLE_TYPE_UNSPECIFIED = 0;
  HARDWARE_TYPE_SIMPLE_TYPE_OPTICAL_DRIVE = 1;
  HARDWARE_TYPE_SIMPLE_TYPE_HARD_DISK = 2;
  HARDWARE_TYPE_SIMPLE_TYPE_USB_MASS_STORAGE = 3;
  HARDWARE_TYPE_SIMPLE_TYPE_PRINTER = 4;
  HARDWARE_TYPE_SIMPLE_TYPE_MODEM = 5;
  HARDWARE_TYPE_SIMPLE_TYPE_KEYBOARD = 6;
  HARDWARE_TYPE_SIMPLE_TYPE_MOUSE = 7;
  HARDWARE_TYPE_SIMPLE_TYPE_WEBCAM = 8;
  HARDWARE_TYPE_SIMPLE_TYPE_OTHER = 9;
}
// Describes the output of a hash function and the type of has function used.
message HashComplexType {
  // The type of hashing algorithm used, e.g. MD5, SHA-256, etc.
  string type = 1;
  // The value obtained from applying a hash function (e.g. MD5, SHA-256, etc.) to the contents of the file.
  string value = 2;
}
// Captures data relevant to an import operation, e.g. importing a file from outside an application into the application.
message ImportComplexType {
  // The source of the data being imported.
  MultiObjectComplexType source = 1;
  // The destination for the data being imported.
  MultiObjectComplexType destination = 2;
  // Used to determine if the import was successful. If omitted it is assumed that the import was successful and was permitted.
  OutcomeComplexType outcome = 3;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 4;
}
// Describes the installation of either hardware or software.
message InstallComplexType {
  // Description of the software that was installed/uninstalled.
  SoftwareComplexType software = 1;
  // Description of the hardware that was installed/uninstalled.
  HardwareComplexType hardware = 2;
  // Description of the media that was installed/uninstalled.
  MediaComplexType media = 3;
  // The outcome of the (un)installation.
  OutcomeComplexType outcome = 11;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 12;
}
// Describes the geographic location of the device.
message LocationComplexType {
  // The ISO-3166 country short name, e.g. 'UNITED KINGDOM OF GREAT BRITAIN AND NORTHERN IRELAND' or 'ANDORRA'
  string country = 1;
  // The location State or Province.
  string state = 2;
  // The location City.
  string city = 3;
  // The location Town.
  string town = 4;
  // The name of the site of the location, e.g. where an organisation has multiple distinct sites or campuses. Specifying the site is particularly important when the sites are in the same town/city.
  string site = 5;
  // The name of the building.
  string building = 6;
  // The floor of the building that the location refers to.
  int32 floor = 7;
  // The identifier (e.g. name) of the room that the location refers to.
  string room = 8;
  // The identifier (e.g. name) of the desk that the location refers to.
  string desk = 9;
  // The identifier for the rack/cabinet where the location refers to a rack mounted device, e.g. a rack mounted 4U server in a cabinet.
  string rack = 10;
  // The position of the device where the location refers to a rack mounted device in a rack/cabinet. E.g. where a 4U device occupies U positions 1-4 in a cabinet (numbered from the bottom of the cabinet, starting from 1), the position would be '1'.
  string position = 11;
  // The timezone name for the location as defined by the IANA Timezone Database (https://www.iana.org/time-zones), e.g. 'Europe/London' or 'Australia/NSW'.
  string time_zone_name = 41;
  // The geographic coordinates of the location (i.e. the latitude/longitude).
  CoordinatesComplexType coordinates = 42;
  // The name of a zone within a building or site with some form of access control/monitoring for entry/exit to the zone.
  string access_zone = 43;
}
// Used to describe media added or removed from a computer system, or as a location for reading and writing files.
message MediaComplexType {
  // The type of the removable media, e.g. MemoryCard
  MediaTypeSimpleType type = 1;
  // The identifier for the removable media. This may be an identifier provided by the media (e.g. the Card Identification or CID of an SD card) or assigned by device monitoring software.
  string id = 2;
  // A friendly name for the media, possibly assigned by device monitoring system..
  string name = 3;
  // Indicates if this media is removable, e.g. USB storage device or soft media such as DVD.
  bool removable = 4;
  // Indicates if a device has read-write access. Most devices are read-write so this is assumed to be true and can therefore be omitted where this is the case.
  bool read_write = 5;
  // The capacity of the media in bytes.
  uint32 capacity = 6;
  // The classification of the media.
  ClassificationComplexType classification = 7;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 8;
}
// The types of removable media.
enum MediaTypeSimpleType {
  // Default
  MEDIA_TYPE_SIMPLE_TYPE_UNSPECIFIED = 0;
  MEDIA_TYPE_SIMPLE_TYPE_HARD_DISK = 1;
  MEDIA_TYPE_SIMPLE_TYPE_USB_MASS_STORAGE = 2;
  MEDIA_TYPE_SIMPLE_TYPE_BLU_RAY = 3;
  MEDIA_TYPE_SIMPLE_TYPE_DVD = 4;
  MEDIA_TYPE_SIMPLE_TYPE_CD = 5;
  MEDIA_TYPE_SIMPLE_TYPE_FLOPPY_DISK = 6;
  MEDIA_TYPE_SIMPLE_TYPE_TAPE = 7;
  MEDIA_TYPE_SIMPLE_TYPE_MEMORY_CARD = 8;
  MEDIA_TYPE_SIMPLE_TYPE_OTHER = 9;
}
// Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
message MetaDataTagsComplexType {
  // A categorisation tag or label
  repeated string tag = 1;
}
// Captures data relevant to move events, e.g. moving a file from one folder/device to another.
message MoveComplexType {
  // The source of the data being moved.
  MultiObjectComplexType source = 1;
  // The destination for the data being moved.
  MultiObjectComplexType destination = 2;
  // Used to determine if the move was successful. If omitted it is assumed that the move was successful and was permitted.
  CopyMoveOutcomeComplexType outcome = 3;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 4;
}
// Describes a collection of objects/entities that may be of different types.
message MultiObjectComplexType {
  repeated ChoiceWrapper_MultiObjectComplexType choice_wrapper = 1;

  message ChoiceWrapper_MultiObjectComplexType {
    // Describes the association or link between two or more entities, e.g. the link between two web resources.
    AssociationComplexType association = 1;
    // Describes a banner or message presented to a user, e.g. an acceptable use policy message shown on system login.
    BannerComplexType banner = 2;
    // Describes part of a chat session between a user and one or more other users, e.g. in an instant messaging application.
    ChatComplexType chat = 3;
    // Describes the configuration of entity, e.g. it can be used to describe the update to the configuration of a network device.
    ConfigurationComplexType configuration = 4;
    // Structure used to describe a criteria used to filter or limit the scope of something, e.g. in a search, view, update or delete event.
    CriteriaComplexType criteria = 5;
    // Describes a document that may be stored electronically or in hard-copy form.
    DocumentComplexType document = 6;
    // Describes an email sent from one user to one or more recipients.
    EmailComplexType email = 7;
    // A file object, e.g. a text file on file system
    FileComplexType file = 8;
    // A folder object, e.g. a directory or folder on file system.
    FolderComplexType folder = 9;
    // A group entity, e.g. a user group, an access control group or a named group of some kind that ties together a collection of entities/objects of some kind.
    GroupComplexType group = 10;
    // Describes the details of a chat event within a chat room or group.
    GroupChatComplexType group_chat = 11;
    // A generic object or entity that cannot be described using any of the other more specific object types.
    ObjectComplexType object = 12;
    // A set of search results from a query where the results are viewed or interacted with in a separate event to the execution of the query. E.g. for long-running queries where the results are stored for later viewing/processing. The Search schema action should be used to describe the event for the execution of the search. Query/Id or Query/Name can be used to associate the results event with the query event.
    SearchResultsComplexType search_results = 13;
    // A shortcut to another file/object, such as a Windows Shortcut or linux symbolic link.
    ShortcutComplexType shortcut = 14;
    // A user entity which may represent a person or some form of non-human processing user.
    UserComplexType user = 15;
    // This is used to describe the session used when viewing another user's session, e.g. screen sharing or remote assistance type activities.
    VirtualSessionComplexType virtual_session = 16;
    // Describes a Voice Over Internet Protocol call.
    VOIPComplexType v_o_i_p = 17;
    // This is used to describe a resource within a website or web application, such as an HTML file, image file or script, along with the details of that resource such as size or response codes.  It can represent both successful and failed access to the resource object.
    ResourceComplexType resource = 18;
  }
}
// A type to describe part of a computer network or some activity on a network.
message NetworkComplexType {
  // The source device that is attempting the network action.
  NetworkLocationComplexType source = 1;
  // The destination device for the network action.
  NetworkLocationComplexType destination = 2;
  // The name of the process responsible for the network action.
  string process_name = 3;
  // If the network action is related to message transfer from one place to another then this element describes the message.
  MultiObjectComplexType payload = 4;
  // The network boundary filter rule that was fired to generate this event.
  string rule = 5;
}
// Describes an event involving some form of activity on a computer network.
message NetworkEventActionComplexType {
  // The action of a server binding a network socket to a port and IP address.
  NetworkOutcomeComplexType bind = 1;
  // The action of a client system establishing a connection with a server.
  NetworkOutcomeComplexType connect = 2;
  // The action of opening an unnamed socket that is bound to an address.
  NetworkOutcomeComplexType open = 3;
  // The action of closing an open socket or connection.
  NetworkOutcomeComplexType close = 4;
  // The action of sending data on a socket.
  NetworkOutcomeComplexType send = 5;
  // The action of receiving data on a socket.
  NetworkOutcomeComplexType receive = 6;
  // The action of making a socket listen for connections.
  NetworkOutcomeComplexType listen = 7;
  // The action of network traffic being permitted by an Access Control List (ACL).
  NetworkOutcomeComplexType permit = 8;
  // The action of network traffic being denied by an Access Control List (ACL).
  NetworkOutcomeComplexType deny = 9;
}
// Describes an end point within a network. This may be an application running on a device or a network appliance such as a switch.
message NetworkLocationComplexType {
  // A device at the source or destination involved in the network activity.
  DeviceComplexType device = 1;
  // The application being used by the source or destination.
  string application = 2;
  // The transport protocol being used by the source or destination.
  NetworkProtocolSimpleType transport_protocol = 3;
  // The Internet Control Message Protocol type number. See https://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
  int32 i_c_m_p_type = 4;
  // The HTTP method, e.g. GET, POST, DELETE, PUT etc
  string h_t_t_p_method = 5;
  // The application protocol being used by the source or destination.
  string application_protocol = 6;
  // The port being used by the source or destination.
  int32 port = 7;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 8;
}
// A type to describe some activity on a network along with the outcome of that activity.
message NetworkOutcomeComplexType {
  // The source device that is attempting the network action.
  NetworkLocationComplexType source = 1;
  // The destination device for the network action.
  NetworkLocationComplexType destination = 2;
  // The name of the process responsible for the network action.
  string process_name = 3;
  // If the network action is related to message transfer from one place to another then this element describes the message.
  MultiObjectComplexType payload = 4;
  // The network boundary filter rule that was fired to generate this event.
  string rule = 5;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 21;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 22;
}
// The different types of network protocol.
enum NetworkProtocolSimpleType {
  // Default
  NETWORK_PROTOCOL_SIMPLE_TYPE_UNSPECIFIED = 0;
  NETWORK_PROTOCOL_SIMPLE_TYPE_TCP = 1;
  NETWORK_PROTOCOL_SIMPLE_TYPE_UDP = 2;
  NETWORK_PROTOCOL_SIMPLE_TYPE_ICMP = 3;
  NETWORK_PROTOCOL_SIMPLE_TYPE_IGMP = 4;
  NETWORK_PROTOCOL_SIMPLE_TYPE_OTHER = 5;
}
// The enclosed structure operators and terms are negated.
message NotComplexType {
  repeated ChoiceWrapper_NotComplexType choice_wrapper = 1;

  message ChoiceWrapper_NotComplexType {
    // Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
    TermComplexType term = 1;
    // All of the enclosed items are to be treated as being AND'd together.
    AndComplexType and = 2;
    // All of the enclosed items are to be treated as being OR'd together.
    OrComplexType or = 3;
    // The enclosed structure operators and terms are negated.
    NotComplexType not = 4;
  }
}
// Describes a generic object or entity that cannot be described using any of the other more specific object types.
message ObjectComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 31;
}
// All of the enclosed items are to be treated as being OR together.
message OrComplexType {
  repeated ChoiceWrapper_OrComplexType choice_wrapper = 1;

  message ChoiceWrapper_OrComplexType {
    // Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
    TermComplexType term = 1;
    // All of the enclosed items are to be treated as being AND'd together.
    AndComplexType and = 2;
    // All of the enclosed items are to be treated as being OR'd together.
    OrComplexType or = 3;
    // The enclosed structure operators and terms are negated.
    NotComplexType not = 4;
  }
}
// Describes an organisation optionally qualified by its country
message OrganisationComplexType {
  // An ISO 3166 alpha-3 trigraph for the country the organisation belongs to. E.g. 'GBR'.
  string country = 1;
  // The code or name for the organisation. E.g. 'Group HQ', 'Telecoms Division', etc.
  string organisation = 2;
}
// Describes the outcome of an event whether it is successful and whether it was permitted.
message OutcomeComplexType {
  // If the outcome of an event was successful then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.
  bool success = 1;
  // If an action was permitted then 'true', 'false' otherwise. Can be omitted if true as this is the default. The main exception to this default would be if there were many varied Descriptions for the success criteria and such Descriptions could provide additional context to the event.
  bool permitted = 2;
  // A description of the authorisation service that was used to decide if the action was permitted.
  AuthServiceType auth_service = 3;
  // Human readable text that describes the outcome.
  string description = 4;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 21;
}
// The types of permission that can be assigned to an entity such as a document.
enum PermissionAttributeSimpleType {
  // Default
  PERMISSION_ATTRIBUTE_SIMPLE_TYPE_UNSPECIFIED = 0;
  PERMISSION_ATTRIBUTE_SIMPLE_TYPE_AUTHOR = 1;
  PERMISSION_ATTRIBUTE_SIMPLE_TYPE_OWNER = 2;
  PERMISSION_ATTRIBUTE_SIMPLE_TYPE_READ = 3;
  PERMISSION_ATTRIBUTE_SIMPLE_TYPE_WRITE = 4;
  PERMISSION_ATTRIBUTE_SIMPLE_TYPE_EXECUTE = 5;
}
// The types of action relating to the use of a printer.
enum PrintActionSimpleType {
  // Default
  PRINT_ACTION_SIMPLE_TYPE_UNSPECIFIED = 0;
  PRINT_ACTION_SIMPLE_TYPE_CREATE_JOB = 1;
  PRINT_ACTION_SIMPLE_TYPE_CANCEL_JOB = 2;
  PRINT_ACTION_SIMPLE_TYPE_PAUSE_JOB = 3;
  PRINT_ACTION_SIMPLE_TYPE_RESUME_JOB = 4;
  PRINT_ACTION_SIMPLE_TYPE_START_PRINT = 5;
  PRINT_ACTION_SIMPLE_TYPE_FINISH_PRINT = 6;
  PRINT_ACTION_SIMPLE_TYPE_CANCEL_PRINT = 7;
  PRINT_ACTION_SIMPLE_TYPE_FAILED_PRINT = 8;
  PRINT_ACTION_SIMPLE_TYPE_OTHER = 9;
}
// Describes an event relating to a printer, e.g. printing a document.
message PrintComplexType {
  // The print action that was performed, e.g. CreateJob.
  PrintActionSimpleType action = 1;
  // Describes the print job that the event relates to.
  PrintJobType print_job = 2;
  // The printer settings that are to be used for the print job.
  PrintSettingsType print_settings = 3;
  // Describes the printer to use for the print job.
  DeviceComplexType printer = 4;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 5;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 6;

  // Describes the print job that the event relates to.
  message PrintJobType {
    // Describes the document being printed.
    DocumentComplexType document = 1;
    // The number of pages being printed.
    uint32 pages = 2;
    // The size of the print job in bytes.
    uint32 size = 3;
    // The time that the print job was submitted.
    uint64 submitted = 4;
  }
  // The printer settings that are to be used for the print job.
  message PrintSettingsType {
    // The paper size, e.g. A4.
    string paper_size = 1;
    // The paper orientation, e.g. Portrait, Landscape.
    PrintSettingsOrientationSimpleType orientation = 2;
    // True if printing in colour. Most printing is performed in black and white so this defaults to false and can therefore be omitted if printing in black and white.
    bool colour = 3;
    // True if fonts are to be used on the printing device. Using device fonts reduces the size of the print job as no font information needs to be supplied to the printer. However, using device fonts will result in different output on different printers. Most print jobs will not use device fonts so this defaults to false and can therefore be omitted if device fonts are not being used.
    bool device_fonts = 4;
    // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
    repeated DataComplexType data = 5;
  }
}
// The orientation types of a document when it is printed.
enum PrintSettingsOrientationSimpleType {
  // Default
  PRINT_SETTINGS_ORIENTATION_SIMPLE_TYPE_UNSPECIFIED = 0;
  PRINT_SETTINGS_ORIENTATION_SIMPLE_TYPE_PORTRAIT = 1;
  PRINT_SETTINGS_ORIENTATION_SIMPLE_TYPE_LANDSCAPE = 2;
}
// The types of action in a process event, e.g. executing a shell script.
enum ProcessActionSimpleType {
  // Default
  PROCESS_ACTION_SIMPLE_TYPE_UNSPECIFIED = 0;
  PROCESS_ACTION_SIMPLE_TYPE_STARTUP = 1;
  PROCESS_ACTION_SIMPLE_TYPE_SHUTDOWN = 2;
  PROCESS_ACTION_SIMPLE_TYPE_EXECUTE = 3;
  PROCESS_ACTION_SIMPLE_TYPE_TERMINATE = 4;
  PROCESS_ACTION_SIMPLE_TYPE_CHANGE_DIR = 5;
  PROCESS_ACTION_SIMPLE_TYPE_CALL = 6;
  PROCESS_ACTION_SIMPLE_TYPE_ACCESS = 7;
  PROCESS_ACTION_SIMPLE_TYPE_REQUEST_OBJECT_HANDLE = 8;
  PROCESS_ACTION_SIMPLE_TYPE_REGISTER = 9;
}
// Describes various actions such as the startup/shutdown/install of operating systems, services, applications. It also describes the execution of operating system commands, shell scripts and batch processes.
message ProcessComplexType {
  // The action that the process event is capturing, e.g. Startup, Shutdown.
  ProcessActionSimpleType action = 1;
  // The type of process, e.g. Application, OS, Service.
  ProcessTypeSimpleType type = 2;
  // The name of the process.
  string command = 3;
  // The process command arguments/parameters.
  string arguments = 4;
  // The system identifier for the process.
  string process_id = 5;
  // The thread identifier for the process.
  uint32 thread_id = 6;
  // The rule that was triggered when this process event happened.
  string rule = 7;
  // Any objects used as input to the process.
  MultiObjectComplexType input = 8;
  // Any objects output by the process
  MultiObjectComplexType output = 9;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 10;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 11;
}
// The types of a process event, e.g. a background process running within an application.
enum ProcessTypeSimpleType {
  // Default
  PROCESS_TYPE_SIMPLE_TYPE_UNSPECIFIED = 0;
  PROCESS_TYPE_SIMPLE_TYPE_OS = 1;
  PROCESS_TYPE_SIMPLE_TYPE_SERVICE = 2;
  PROCESS_TYPE_SIMPLE_TYPE_APPLICATION = 3;
}
// Describes the purpose and justification for the event along with details of any authorisations that were required for the event to happen.
message PurposeComplexType {
  // The classification of this task.
  ClassificationComplexType classification = 1;
  // A description of the task.
  string subject = 2;
  // Names of stakeholders.
  string stakeholders = 3;
  // Business case supporting task.
  string justification = 4;
  // Expected outcome from task.
  string expected_outcome = 5;
  // The authorisations that were granted to allow this event action to take place.
  AuthorisationsType authorisations = 6;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 7;

  // Details of authorisations that were granted to allow this event action to take place.
  message AuthorisationsType {
    // An authorisation that was granted to allow this event action to take place.
    repeated AuthType auth = 1;
  
    // Details of an authorisation that was granted to allow this event action to take place.
    message AuthType {
      // The reference number, code or ID for the authorisation.
      string ref_no = 1;
      // A textual description of the authorisation or any additional detail.
      string detail = 2;
    }
  }
}
message QueryComplexType {
  // An identifier to uniquely identify the query that was executed. This may be used to link the execution of a query (i.e. Search/Query/Id) with the results that are persisted and viewed at another time (i.e. View/SearchResults/Query/Id).
  string id = 1;
  // The name of the query that was executed. This may be used to link the execution of a query with the results that are persisted and viewed at another time.
  string name = 2;
  // A human-readable description of what the query is searching for.
  string description = 3;
  // A complex boolean tree or operators and terms that describes the query.
  AdvancedType advanced = 4;
  // A simple representation of a query using includes and excludes terms. This is suitable for simple filtered lists, e.g. for a list of names excluding "John,Bob".
  SimpleType simple = 5;
  // The raw query in the query language used by the application executing the query, e.g. SQL, xpath, etc.
  string raw = 6;

  // A complex boolean tree or operators and terms that describes the query.
  message AdvancedType {
    repeated ChoiceWrapper_AdvancedType choice_wrapper = 1;
  
    message ChoiceWrapper_AdvancedType {
      // Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
      TermComplexType term = 1;
      // All of the enclosed items are to be treated as being AND'd together.
      AndComplexType and = 2;
      // All of the enclosed items are to be treated as being OR'd together.
      OrComplexType or = 3;
      // The enclosed structure operators and terms are negated.
      NotComplexType not = 4;
    }
  }
  // A simple representation of a query using includes and excludes terms. This is suitable for simple filtered lists, e.g. for a list of names excluding "John,Bob".
  message SimpleType {
    // Values to include in the query results, typically delimited by a comma.
    string include = 1;
    // Values to exclude in the query results, typically delimited by a comma.
    string exclude = 2;
  }
}
// Describes the action of receiving an object or entity, e.g. receiving a push notification.
message ReceiveComplexType {
  // The initiator(s) of the object or resource sent or received. An initiator can be a user and/or device.
  SourceType source = 1;
  // The destination(s) of the object or resource sent or received. A destination can be a user and/or device.
  DestinationType destination = 2;
  // If the network action is related to message transfer from one place to another then this element describes the message.
  MultiObjectComplexType payload = 3;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 4;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 5;

  // The initiator(s) of the object or resource sent or received. An initiator can be a user and/or device.
  message SourceType {
    repeated ChoiceWrapper_SourceType choice_wrapper = 1;
  
    message ChoiceWrapper_SourceType {
      // The user that sent the payload.
      UserComplexType user = 1;
      // The device that sent the payload.
      DeviceComplexType device = 2;
    }
  }
  // The destination(s) of the object or resource sent or received. A destination can be a user and/or device.
  message DestinationType {
    repeated ChoiceWrapper_DestinationType choice_wrapper = 1;
  
    message ChoiceWrapper_DestinationType {
      // The user that the payload is being sent to
      UserComplexType user = 1;
      // The device that the payload is being sent to
      DeviceComplexType device = 2;
    }
  }
}
// Describes a resource within a website or web application, such as an HTML file, image file or script, along with the details of that resource such as size or response codes.  It can represent both successful and failed access to the resource object.
message ResourceComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The title of the resource or of the object the resource presents.
  string title = 31;
  // The URL of the resource the event relates to
  string u_r_l = 32;
  // The URL of the resource that referred to the URL of this event
  string referrer = 33;
  // The session identifier or token used to identify a session or series of related message exchanges.
  string session_id = 34;
  // The HTTP method, e.g. GET, POST, DELETE, PUT etc
  string h_t_t_p_method = 35;
  // The HTTP version, e.g. 1.1
  string h_t_t_p_version = 36;
  // This is a string provided by the initiating software agent used to identify itself, its application type, operating system, software vendor or software version. This string typically appears as a field in a request message with a field header name of 'User-Agent'.
  string user_agent = 37;
  // The size in bytes received, including the request and HTTP headers.
  uint32 inbound_size = 38;
  // The size in bytes of the incoming data, EXCLUDING HTTP headers.
  uint32 inbound_content_size = 39;
  // The HTTP request header.
  string inbound_header = 40;
  // The size in bytes of the outgoing data, including HTTP headers.
  uint32 outbound_size = 41;
  // The size in bytes of the outgoing data, EXCLUDING HTTP headers.
  uint32 outbound_content_size = 42;
  // The HTTP response header.
  string outbound_header = 43;
  // The number of microseconds the server took to handle the request.
  uint32 request_time = 44;
  // The connection status of the client connection.
  string connection_status = 45;
  // The status code of the original request.
  string initial_response_code = 46;
  // The final status code of the request, after any internal redirections may have taken place.
  string response_code = 47;
  // The Internet Media Type identifying the file format of the resource provided (format of request or response body). This string typically appears in the 'Content-Type' field of a Request or Response Header.
  string mime_type = 48;
  // The category of a web page or resource where a categorisation engine is used, e.g. News, Search Engine, Social Media, etc.
  string category = 49;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 50;
}
// Contains a criteria and describes the outcome of the event.
message SearchComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // A collection of Datasource definitions that are referenced by the criteria/query
  DataSourcesType data_sources = 21;
  // Structure used to describe the query associated with a search event.
  QueryComplexType query = 22;
  // Details of the page (or sub-set) of results actually displayed/returned to the user, if known at query time.
  ResultPageType result_page = 23;
  // The total number of results returned by the query, if known at query time. In situations where only a sub-set of results are displayed/returned to the user then this element represents the count of ALL results and ResultPage should be used to provide details of which results are actually viewed/returned by the user.
  uint32 total_results = 24;
  // Describes the results returned by the search if they are known at the time of the Search event (a synchronous search). If the results are not know at execution time (an asynchronous search) and will be viewed as part of a separate event then View/SearchResults can be used to model that event.
  MultiObjectComplexType results = 25;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 31;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 32;

  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  message PermissionsType {
    // A permission rule associated with an object, e.g. read and write access being granted to a user.
    repeated PermissionType permission = 1;
  
    // A permission rule associated with an object, e.g. read and write access being granted to a user.
    message PermissionType {
      // A user that has been granted (or is prevented from having) some form of permission.
      UserComplexType user = 1;
      // A named group of users that has been granted (or is prevented from having) some form of permission.
      GroupComplexType group = 2;
      // The permission attributes that have been explicitly allowed.
      repeated PermissionAttributeSimpleType allow = 11;
      // The permission attributes that have been explicitly denied.
      repeated PermissionAttributeSimpleType deny = 12;
    }
  }
  // A collection of Datasource definitions that are referenced by the criteria/query
  message DataSourcesType {
    // The name or path of one or more datasources or datasets that are used by a criteria/query, e.g. 'EuroVoc XML distribution' or 'hdfs://mynamenode:8020/datasets/hr/grades.xml'
    repeated string data_source = 1;
  }
  // Details of the page (or sub-set) of results actually displayed/returned to the user, if known at query time.
  message ResultPageType {
    // The number of pages/sets that make up the complete result set.
    uint32 total_pages = 1;
    // The maximum number of results that will be displayed per page. E.g. 10 results per page.
    uint32 per_page = 2;
    // The number of the page/set of results displayed/returned to the user, e.g. 3 out of 24 pages.
    uint32 page_number = 3;
    // The index of the first result in the page out of the full result set (inclusive), e.g. 11 (in the case of showing results 11-20 of 453)
    uint32 from = 4;
    // The index of the last result in the page out of the full result set (inclusive), e.g. 20 (in the case of showing results 11-20 of 453)
    uint32 to = 5;
  }
}
// Structure used to describe a set of search results from a query where the results are viewed or interacted with in a separate event to the execution of the query. E.g. for long-running queries where the results are stored for later viewing/processing. The Search schema action should be used to describe the event for the execution of the search. Query/Id or Query/Name can be used to associate the results event with the query event.
message SearchResultsComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // A collection of Datasource definitions that are referenced by the criteria/query
  DataSourcesType data_sources = 31;
  // Structure used to describe the query associated with a search event.
  QueryComplexType query = 32;
  // Details of the page (or sub-set) of results actually displayed/returned to the user, if known at query time.
  ResultPageType result_page = 33;
  // The total number of results returned by the query, if known at query time. In situations where only a sub-set of results are displayed/returned to the user then this element represents the count of ALL results and ResultPage should be used to provide details of which results are actually viewed/returned by the user.
  uint32 total_results = 34;
  // Describes the results returned by the search if they are known at the time of the Search event (a synchronous search). If the results are not know at execution time (an asynchronous search) and will be viewed as part of a separate event then View/SearchResults can be used to model that event.
  MultiObjectComplexType results = 35;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 41;

  // A collection of Datasource definitions that are referenced by the criteria/query
  message DataSourcesType {
    // The name or path of one or more datasources or datasets that are used by a criteria/query, e.g. 'EuroVoc XML distribution' or 'hdfs://mynamenode:8020/datasets/hr/grades.xml'
    repeated string data_source = 1;
  }
  // Details of the page (or sub-set) of results actually displayed/returned to the user, if known at query time.
  message ResultPageType {
    // The number of pages/sets that make up the complete result set.
    uint32 total_pages = 1;
    // The maximum number of results that will be displayed per page. E.g. 10 results per page.
    uint32 per_page = 2;
    // The number of the page/set of results displayed/returned to the user, e.g. 3 out of 24 pages.
    uint32 page_number = 3;
    // The index of the first result in the page out of the full result set (inclusive), e.g. 11 (in the case of showing results 11-20 of 453)
    uint32 from = 4;
    // The index of the last result in the page out of the full result set (inclusive), e.g. 20 (in the case of showing results 11-20 of 453)
    uint32 to = 5;
  }
}
// Describes the action of sending something (e.g. a file, data, object, etc.) from a source location/application/system/user to a destination.
message SendComplexType {
  // The initiator(s) of the object or resource sent or received. An initiator can be a user and/or device.
  SourceType source = 1;
  // The destination(s) of the object or resource sent or received. A destination can be a user and/or device.
  DestinationType destination = 2;
  // If the network action is related to message transfer from one place to another then this element describes the message.
  MultiObjectComplexType payload = 3;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 4;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 5;

  // The initiator(s) of the object or resource sent or received. An initiator can be a user and/or device.
  message SourceType {
    repeated ChoiceWrapper_SourceType choice_wrapper = 1;
  
    message ChoiceWrapper_SourceType {
      // The user that sent the payload.
      UserComplexType user = 1;
      // The device that sent the payload.
      DeviceComplexType device = 2;
    }
  }
  // The destination(s) of the object or resource sent or received. A destination can be a user and/or device.
  message DestinationType {
    repeated ChoiceWrapper_DestinationType choice_wrapper = 1;
  
    message ChoiceWrapper_DestinationType {
      // The user that the payload is being sent to
      UserComplexType user = 1;
      // The device that the payload is being sent to
      DeviceComplexType device = 2;
    }
  }
}
// Describes a shortcut to another file/object, such as a Windows Shortcut or linux symbolic link.
message ShortcutComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The full system file path.
  string path = 31;
  // The creation time of the file.
  uint64 created = 32;
  // The modification time of the file.
  uint64 modified = 33;
  // The last access time of the file.
  uint64 accessed = 34;
  // The size of the file in bytes.
  uint32 size = 35;
  // Optional description of the media that the file exists on or that the file is being written to.
  MediaComplexType media = 36;
  // Describes the output of a hash function and the type of has function used.
  HashComplexType hash = 37;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 38;
}
// Used to describe a software asset.
message SoftwareComplexType {
  // An identifier for the software asset.
  string id = 1;
  // The name of the software product.
  string name = 2;
  // The version of the software product, e.g. v3.1.
  string version = 3;
  // The manufacturer of the software product, e.g. Borland
  string manufacturer = 4;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 5;
}
// Describes the system that generated the event. This is not the same as the generator as the generator is merely the application or component that created the event, e.g. auditd. The system describes the higher level project/service or capability that uses the generator as a component, e.g. 'Payroll System'.
message SystemComplexType {
  // The name of the system.
  string name = 1;
  // An optional description of the system.
  string description = 2;
  // An optional classification or protective marking of the overall system.
  ClassificationComplexType classification = 3;
  // The environment describes a specific instance of a system. A system may have multiple deployment for various purposes, e.g. a development, reference or operational deployment. An instance may also be site specific e.g. a deployment at a particular data center. The way an environment is described will differ depending on the system and the way it is deployed however a good example would be REF_DC1 to indicate that the environment is a reference deployment in data center 1.
  string environment = 4;
  // Describes the organisation that owns or has responsibility for the system.
  string organisation = 5;
  // An optional element to define the domain that the system exists in.
  string security_domain = 6;
  // The version of the system's software, e.g. 1.3.2
  string version = 7;
  // Optional tags that can be used for additional tagging or categorisation of the system. These tags allow for the grouping or filtering of similar systems.
  TagsType tags = 8;

  // Optional tags that can be used for additional tagging or categorisation of the system. These tags allow for the grouping or filtering of similar systems.
  message TagsType {
    // A categorisation tag or label, e.g. 'critical-system', 'operational-data', 'non-operational-test-data', etc.
    repeated string tag = 1;
  }
}
// Describes a field to search and what to search for using name, condition and value, e.g. Title Contains 'Fox' or Title Equals 'The Quick Brown Fox'.
message TermComplexType {
  // The name of the search field.
  string name = 1;
  // The search condition, e.g. Contains, !Contains, Exists etc.
  TermConditionSimpleType condition = 2;
  // The value that the condition is operating on.
  string value = 3;
}
// The types of term used in query predicates.
enum TermConditionSimpleType {
  // Default
  TERM_CONDITION_SIMPLE_TYPE_UNSPECIFIED = 0;
  TERM_CONDITION_SIMPLE_TYPE_EXISTS = 1;
  TERM_CONDITION_SIMPLE_TYPE_NOT_EXISTS = 2;
  TERM_CONDITION_SIMPLE_TYPE_CONTAINS = 3;
  TERM_CONDITION_SIMPLE_TYPE_NOT_CONTAINS = 4;
  TERM_CONDITION_SIMPLE_TYPE_EMPTY = 5;
  TERM_CONDITION_SIMPLE_TYPE_NOT_EMPTY = 6;
  TERM_CONDITION_SIMPLE_TYPE_EQUALS = 7;
  TERM_CONDITION_SIMPLE_TYPE_NOT_EQUALS = 8;
  TERM_CONDITION_SIMPLE_TYPE_GREATER_THAN = 9;
  TERM_CONDITION_SIMPLE_TYPE_GREATER_THAN_EQUAL_TO = 10;
  TERM_CONDITION_SIMPLE_TYPE_LESS_THAN = 11;
  TERM_CONDITION_SIMPLE_TYPE_LESS_THAN_EQUAL_TO = 12;
  TERM_CONDITION_SIMPLE_TYPE_STARTS_WITH = 13;
  TERM_CONDITION_SIMPLE_TYPE_NOT_STARTS_WITH = 14;
  TERM_CONDITION_SIMPLE_TYPE_REGEX = 15;
  TERM_CONDITION_SIMPLE_TYPE_NOT_REGEX = 16;
}
// The types of threat assigned to detected malware.
enum ThreatCategorySimpleType {
  // Default
  THREAT_CATEGORY_SIMPLE_TYPE_UNSPECIFIED = 0;
  THREAT_CATEGORY_SIMPLE_TYPE_VIRUS = 1;
  THREAT_CATEGORY_SIMPLE_TYPE_WORM = 2;
  THREAT_CATEGORY_SIMPLE_TYPE_HACKING_TOOL = 3;
  THREAT_CATEGORY_SIMPLE_TYPE_SPYWARE = 4;
  THREAT_CATEGORY_SIMPLE_TYPE_TROJAN_HORSE = 5;
  THREAT_CATEGORY_SIMPLE_TYPE_ADWARE = 6;
  THREAT_CATEGORY_SIMPLE_TYPE_OTHER = 7;
}
// Describes the removal of either hardware or software.
message UninstallComplexType {
  // Description of the software that was installed/uninstalled.
  SoftwareComplexType software = 1;
  // Description of the hardware that was installed/uninstalled.
  HardwareComplexType hardware = 2;
  // Description of the media that was installed/uninstalled.
  MediaComplexType media = 3;
  // The outcome of the (un)installation.
  OutcomeComplexType outcome = 11;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 12;
}
// Describes the update/modification/change to a file, object, entity, piece of data, etc.
message UpdateComplexType {
  // Describes the state of one or more object properties before it was changed.
  MultiObjectComplexType before = 1;
  // Describes the state of one or more object properties after it was changed.
  MultiObjectComplexType after = 2;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 3;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 4;
}
// Describes a user entity that may represent a human or be a processing user account.
message UserComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The security domain that the user exists within, e.g. an Active Directory or OpenLDAP domain.
  string domain = 31;
  // The email address of the user.
  string email_address = 32;
  // The details of the person represented by the user account or identity.
  UserDetailsComplexType user_details = 33;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 34;
}
// Describes the person represented by a user account or identity.
message UserDetailsComplexType {
  // A unique identifier used across the business to identify this person.
  string id = 1;
  // A person's staff number.
  string staff_number = 2;
  // The person's surname.
  string surname = 3;
  // The person's initials.
  string initials = 4;
  // The person's title.
  string title = 5;
  // The person's given name. If a preferred name also exists then use KnownAs for this preferred name, otherwise use the same name for both elements.
  string given_name = 6;
  // The name that this person is known as.
  string known_as = 7;
  // Is the person an employee or a contractor.
  string person_type = 8;
  // The business group.
  string group = 9;
  // The business unit within the business group.
  string unit = 10;
  // The position within the business unit.
  string position = 11;
  // The role that the person is in.
  string role = 12;
  // The grade required for the current post.
  string grade_of_post = 13;
  // Is the person full-time, part-time etc.
  string employment_type = 14;
  // The employment status of the person, e.g. Active, Retired, Maternity Leave, Sabbatical Leave, etc.
  string employment_status = 15;
  // The person's nationality.
  string nationality = 16;
  // The building that the person usually works in.
  string location = 17;
  // The room number or name that the person usually works in.
  string room_number = 18;
  // The person's primary or internal phone number or extension.
  string phone = 19;
  // The person's secondary phone number or extension.
  string secondary_phone = 20;
  // The staff number of the person's supervisor or line manager.
  string supervisor_staff_number = 21;
  // When this person's current position is scheduled to end, e.g. the end date of a fixed term employment contract.
  uint32 occupancy_end_date = 22;
  // Describes a person's main employing organisation irrespective of who they are contracted or seconded to, or are performing an internship with.
  string organisation = 23;
  // Describes which organisation is currently hosting a person if they are on secondment, internship or are contracted to work for.
  string host_organisation = 24;
  // Any other user data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 25;
}
// Describes a Voice Over Internet Protocol call.
message VOIPComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The phone number of the initiator of the call.
  string phone_number = 31;
  // The user that initiated the call.
  UserComplexType from = 32;
  // The user that is the recipient of the call or a collection of users in the case of a conference type call.
  repeated UserComplexType to = 33;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 34;
}
// Type for specifying the version numbers of XML documents that are supported by this version of the XMLSchema.
enum VersionSimpleType {
  // Default
  VERSION_SIMPLE_TYPE_UNSPECIFIED = 0;
  VERSION_SIMPLE_TYPE_4_0_2 = 1;
}
// Describes events related to viewing data. Note that viewing data is subtly different from reading data. This event action is to be used when data is displayed to an end user and not for data read by an application.
message ViewComplexType {
  repeated ChoiceWrapper_BaseObjectOutcomeComplexType choice_wrapper = 1;
  // Used to determine if the action was successful. If omitted it is assumed that the event was successful and was permitted.
  OutcomeComplexType outcome = 11;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 12;
}
// Describes the session used when viewing another user's session, e.g. screen sharing or remote assistance type activities.
message VirtualSessionComplexType {
  // This element can be used to supply any metadata relating to an object as long as it conforms to an allowed format/specification (defined outside this XML Schema). This can be used for adding metadata to the event after receipt.
  repeated AnyContentComplexType meta = 1;
  // The type of the object in question and specific to the object type from the list above, e.g. a 'Resource' object may have a type such as 'image' or 'script'.
  string type = 2;
  // An identifier for the object, e.g a document ID in a document management system. This ID is likely to be specific to the system that generated the event.
  string id = 3;
  // The name of the object, e.g. a filename.
  string name = 4;
  // Human readable description of what the object is.
  string description = 5;
  // Any classification, protective marking or restrictions placed on the object, e.g. for commercially sensitive reports or user health records.
  ClassificationComplexType classification = 6;
  // Any state information about the object, e.g. 'Archived'.
  string state = 7;
  // Any groups associated with the object, e.g. group membership of a user account.
  GroupsComplexType groups = 8;
  // The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
  PermissionsType permissions = 9;
  // Metadata tags that can be used for additional object tagging or categorisation. Object tagging allows for the labelling (or filtering) of objects using words that label, categorise or group similar items, using a taxonomy defined outside this schema. For example, an email could be tagged with tags like 'internal', 'spam', 'external', 'rich-content', etc.
  MetaDataTagsComplexType tags = 10;
  // The state of the virtual session at the time of the event.
  VirtualSessionSessionStateSimpleType session_state = 31;
  // Any other event data that does not fit into a schema element but may be useful for the purpose of audit.
  repeated DataComplexType data = 32;
}
// Describes the state of a virtual session when viewing another user's session, e.g. screen sharing or remote assistance type activities.
enum VirtualSessionSessionStateSimpleType {
  // Default
  VIRTUAL_SESSION_SESSION_STATE_SIMPLE_TYPE_UNSPECIFIED = 0;
  VIRTUAL_SESSION_SESSION_STATE_SIMPLE_TYPE_PARKED = 1;
  VIRTUAL_SESSION_SESSION_STATE_SIMPLE_TYPE_UNPARKED = 2;
}
// A description of the authorisation service that was used to decide if the action was permitted.
message AuthServiceType {
  // An identifier for the authorisation service, usually a URI string.
  string id = 1;
  // The number of seconds a system is allowed to cache this authorisation before it needs to be checked again.
  uint32 cache_timeout = 2;
}
message ChoiceWrapper_BaseObjectOutcomeComplexType {
  // Describes the association or link between two or more entities, e.g. the link between two web resources.
  AssociationComplexType association = 1;
  // Describes a banner or message presented to a user, e.g. an acceptable use policy message shown on system login.
  BannerComplexType banner = 2;
  // Describes part of a chat session between a user and one or more other users, e.g. in an instant messaging application.
  ChatComplexType chat = 3;
  // Describes the configuration of entity, e.g. it can be used to describe the update to the configuration of a network device.
  ConfigurationComplexType configuration = 4;
  // Structure used to describe a criteria used to filter or limit the scope of something, e.g. in a search, view, update or delete event.
  CriteriaComplexType criteria = 5;
  // Describes a document that may be stored electronically or in hard-copy form.
  DocumentComplexType document = 6;
  // Describes an email sent from one user to one or more recipients.
  EmailComplexType email = 7;
  // A file object, e.g. a text file on file system
  FileComplexType file = 8;
  // A folder object, e.g. a directory or folder on file system.
  FolderComplexType folder = 9;
  // A group entity, e.g. a user group, an access control group or a named group of some kind that ties together a collection of entities/objects of some kind.
  GroupComplexType group = 10;
  // Describes the details of a chat event within a chat room or group.
  GroupChatComplexType group_chat = 11;
  // A generic object or entity that cannot be described using any of the other more specific object types.
  ObjectComplexType object = 12;
  // A set of search results from a query where the results are viewed or interacted with in a separate event to the execution of the query. E.g. for long-running queries where the results are stored for later viewing/processing. The Search schema action should be used to describe the event for the execution of the search. Query/Id or Query/Name can be used to associate the results event with the query event.
  SearchResultsComplexType search_results = 13;
  // A shortcut to another file/object, such as a Windows Shortcut or linux symbolic link.
  ShortcutComplexType shortcut = 14;
  // A user entity which may represent a person or some form of non-human processing user.
  UserComplexType user = 15;
  // This is used to describe the session used when viewing another user's session, e.g. screen sharing or remote assistance type activities.
  VirtualSessionComplexType virtual_session = 16;
  // Describes a Voice Over Internet Protocol call.
  VOIPComplexType v_o_i_p = 17;
  // This is used to describe a resource within a website or web application, such as an HTML file, image file or script, along with the details of that resource such as size or response codes.  It can represent both successful and failed access to the resource object.
  ResourceComplexType resource = 18;
}
// The collection of permissions associated with the object, e.g. write access being granted to a list of named users.
message PermissionsType {
  // A permission rule associated with an object, e.g. read and write access being granted to a user.
  repeated PermissionType permission = 1;

  // A permission rule associated with an object, e.g. read and write access being granted to a user.
  message PermissionType {
    // A user that has been granted (or is prevented from having) some form of permission.
    UserComplexType user = 1;
    // A named group of users that has been granted (or is prevented from having) some form of permission.
    GroupComplexType group = 2;
    // The permission attributes that have been explicitly allowed.
    repeated PermissionAttributeSimpleType allow = 11 [
      packed = true
    ];
    // The permission attributes that have been explicitly denied.
    repeated PermissionAttributeSimpleType deny = 12 [
      packed = true
    ];
  }
}
